<%- include('../layouts/boilerplate', { title: '' , body: '' }) %>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .vatable-item {
            background-color: lightgreen;
        }

        .non-vatable-item {
            background-color: lightyellow;
        }

        .dropdown-menu {
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }

        .dropdown-item {
            cursor: pointer;
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        .dropdown-item:focus,
        .dropdown-item:hover {
            background-color: #f1f1f1;
        }

        .item {
            margin-bottom: 10px;
        }

        .last-transactions {
            list-style-type: none;
            padding-left: 0;
        }

        .credit-party {
            display: none;
            /* Hide credit party options by default */
        }

        .dropdown-menu {
            display: none;
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-header {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            font-weight: bold;
        }

        .dropdown-item {
            display: flex;
            justify-content: space-around;
            padding: 8px;
            border-bottom: 1px solid #dee2e6;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        /* Styling for Select2 dropdown */
        .select2-container .select2-selection--single {
            height: 40px;
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            display: flex;
            align-items: center;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 100%;
            right: 10px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            color: #495057;
            font-size: 16px;
        }

        /* Focus state for the Select2 dropdown */
        .select2-container--default .select2-selection--single:focus {
            outline: none;
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        /* Keep the header fixed at the top */
        .dropdown-header {
            display: grid;
            grid-template-columns: 2fr 2fr 5fr 2fr 2fr 2fr 1fr;
            padding: 5px;
            border-bottom: 1px solid #ccc;
            top: 0;
            /* Stick to the top of the dropdown */
            background-color: #f0f0f0;
            /* Optional: ensure background color to avoid transparency */
            z-index: 1;
            /* Ensure the header stays on top of other items */
        }

        /* Ensure the dropdown container is scrollable */
        #dropdownMenu {
            /* Set a fixed height for the dropdown */
            overflow-y: auto;
            /* Enable vertical scrolling */
            width: 100%;
            /* Ensure the dropdown takes up full width */
        }

        /* Optional: style for the dropdown items */
        .dropdown-item {
            display: grid;
            grid-template-columns: 2fr 2fr 5fr 2fr 2fr 2fr 1fr;
            padding: 5px;
        }

        /*Excel-style table*/
        #itemsTable {
            width: 100%;
            border-collapse: collapse;
            font-family: Arial, sans-serif;
        }

        #itemsTable th,
        #itemsTable td {
            padding: 8px 12px;
            text-align: left;
            border: 1px solid #ddd;
        }

        #itemsTable th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        /* Hover effect for rows */
        #itemsTable tr:hover {
            background-color: #f1f1f1;
        }

        /* Custom styles to resize the form */
        .expanded-container {
            max-width: 90%;
            /* Expand the container to 90% of the viewport width */
        }

        .expanded-card {
            width: 100%;
            /* Ensure the card takes full width of the container */
        }

        @media (min-width: 768px) {
            .expanded-container {
                max-width: 80%;
                /* Adjust width for medium and larger screens */
            }
        }

        /* Compact table styles */
        .compact-table {
            font-size: 0.85rem;
            /* Reduce font size (12px) */
        }

        .compact-table th,
        .compact-table td {
            padding: 0.4rem 0.6rem;
            /* Decrease padding for compact appearance */
        }

        .compact-table input.form-control {
            font-size: 0.85rem;
            /* Smaller text size for input fields */
            padding: 0.3rem 0.5rem;
            /* Adjust input padding */
            height: auto;
            /* Reduce input height */
        }

        .compact-table .btn-danger {
            font-size: 0.85rem;
            /* Reduce button text size */
            padding: 0.3rem 0.5rem;
            /* Compact button padding */
        }

        .compact-table input[type="date"] {
            font-size: 0.85rem;
            padding: 0.3rem;
            height: auto;
        }
    </style>
    <div class="container mt-4 wow-form expanded-container">
        <div class=" card mt-4 shadow-lg p-4 animate__animated animate__fadeInUp expanded-card">
            <div class="card-header">
                Create New Bill
            </div>
            <div class="card-body">
                <form action="/billsTrackBatchOpen" method="post" id="billForm" class="wow-form">
                    <div class="form-group row">

                        <% if (companyDateFormat==='nepali' ) { %>
                            <!-- Nepali Date Fields -->
                            <div class="col">
                                <label for="transactionDateNepali">Transaction Date:</label>
                                <input type="text" name="transactionDateNepali" id="transactionDateNepali"
                                    class="form-control"
                                    value="<%= bill.transactionDate ? bill.transactionDate.toISOString().split('T')[0]: '' %>"
                                    autofocus required>

                            </div>
                            <div class="col">
                                <label for="nepaliDate">Invoice Date:</label>
                                <input type="text" name="nepaliDate" id="nepaliDate" class="form-control" required
                                    value="<%= bill.date ? bill.date.toISOString().split('T')[0] : '' %>" autofocus>
                            </div>

                            <!-- Hidden field for billDate, since we are using NepaliDate -->
                            <input type="hidden" name="billDate" id="billDate" value="">
                            <% } else { %>
                                <!-- English Date Fields -->
                                <div class="col">
                                    <label for="transactionDateRoman">Transaction Date:</label>
                                    <input type="date" name="transactionDateRoman" id="transactionDateRoman"
                                        class="form-control"
                                        value="<%= bill.transactionDate ? bill.transactionDate.toISOString().split('T')[0]: '' %>"
                                        autofocus required>
                                </div>
                                <div class="col">
                                    <label for="billDate">Invoice Date:</label>
                                    <input type="date" name="billDate" id="billDate" class="form-control" required
                                        value="<%= bill.date ? bill.date.toISOString().split('T')[0] : '' %>">
                                </div>
                                <!-- Hidden field for nepaliDate, since we are using English Date -->
                                <input type="hidden" name="nepaliDate" id="nepaliDate" value="">
                                <% } %>

                                    <div class="col">
                                        <label for="billNumber">Vch. No:</label>
                                        <input type="number" name="billNumber" id="billNumber" class="form-control"
                                            value="<%= bill.billNumber %>" required readonly>
                                    </div>

                                    <div class="col">
                                        <label for="paymentMode">Payment Mode:</label>
                                        <select class="form-control" id="paymentMode" name="paymentMode"
                                            onchange="toggleCreditPartyOptions()">
                                            <option>Select</option>
                                            <option value="cash" <%=bill.paymentMode==='cash' ? 'selected' : '' %>>Cash
                                            </option>
                                            <option value="credit" <%=bill.paymentMode==='credit' ?'selected':''%>
                                                >Credit</option>
                                        </select>
                                    </div>
                                    <!-- <div class="col">
                                        <label for="isVatExempt">VAT</label>
                                        <select name="isVatExempt" id="isVatExempt" class="form-control"
                                            onchange="toggleVatInputs()"
                                            onchange="filterItems(document.getElementById('itemSearch'))">
                                            <% if (vatEnabled) {%>
                                                <option value="all">All</option>
                                                <option value="false">13%</option>
                                                <%}%>
                                                    <option value="true">Exempt</option>
                                        </select>
                                    </div> -->

                                    <div class="col">
                                        <label for="isVatExempt">VAT</label>
                                        <select name="isVatExempt" id="isVatExempt" class="form-control"
                                            onchange="toggleVatInputs()"
                                            onchange="filterItems(document.getElementById('itemSearch'))">
                                            <option value="" disabled selected>Select vat</option>
                                            <% if (vatEnabled) {%>
                                                <option value="false"
                                                    <%=bill.isVatExempt===false&&bill.isVatAll==='true' ? 'selected' :''
                                                    %>>All</option>
                                                <option value="false"
                                                    <%=bill.isVatExempt===false&&bill.isVatAll==='false' ? 'selected'
                                                    : '' %>>13%
                                                </option>
                                                <%}%>
                                                    <option value="true"
                                                        <%=bill.isVatExempt===true&&bill.isVatAll==='false' ? 'selected'
                                                        : '' %>>Exempt</option>
                                        </select>
                                    </div>
                    </div>
                    <div class="form-group row">
                        <div class="col hidden">
                            <label for="purchaseSalesType">Type:</label>
                            <select id="purchaseSalesType" name="purchaseSalesType" class="form-control" disabled>
                                <option value="Sales">Sales</option>
                            </select>
                        </div>
                        <div class="col-6">
                            <label for="account">Party Name:</label>
                            <select name="account" id="account" class="form-control" required>
                                <option value="" disabled selected>Select a party name</option>
                                <% if (accounts && accounts.length> 0) { %>
                                    <% accounts.forEach(account=> { %>
                                        <option value="<%= account._id %>" <%=(account._id.equals(bill.account._id) ||
                                            account.name==='Cash in Hand' )? 'selected' : '' %> data-address="<%=
                                                account.address %>"
                                                data-pan="<%= account.pan %>">
                                                    <%= account.name %>
                                        </option>
                                        <% }); %>
                                            <% } else { %>
                                                <option disabled>No companies available</option>
                                                <% } %>
                            </select>
                        </div>

                        <div class="col">
                            <!-- New field for the address -->
                            <label for="address">Party Address:</label>
                            <input type="text" id="address" name="address" class="form-control"
                                value="<%=bill.account.address%>">
                        </div>
                        <div class="col">
                            <!-- New field for the address -->
                            <label for="pan">Vat No:</label>
                            <input type="text" id="pan" name="pan" class="form-control" value="<%=bill.account.pan%>">
                        </div>
                    </div>
                    <hr style="border: 1px solid gray;">
                    <div class="form-group row">
                        <div class="col">
                            <div class="form-group row">
                                <div class="col">
                                    <label for="itemSearch">Search Item</label>
                                    <input type="text" id="itemSearch" class="form-control"
                                        placeholder="Search for an item" oninput="filterItems(this)" autocomplete="off"
                                        onkeydown="handleItemSearchKeydown(event)">
                                    <div id="dropdownMenu" class="dropdown-menu"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <table class="table table-bordered compact-table" id="itemsTable">
                        <thead>
                            <tr>
                                <th>S.No.</th>
                                <th>Item Code</th>
                                <th>Item Name</th>
                                <th>H.S. Code</th>
                                <th>Qty</th>
                                <th>Unit</th>
                                <th>Batch & Exp.</th>
                                <th>Price</th>
                                <th>Amount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="items">
                            <!-- Item rows will be dynamically added here -->

                            <% if (items && items.length> 0) { %>
                                <% items.forEach((item, index)=> { %>
                                    <tr class="item <%= item.vatStatus ? 'vatable-item' : 'non-vatable-item' %>">
                                        <td>
                                            <%= index + 1 %>
                                        </td>
                                        <td>
                                            <%= item.item.uniqueNumber || 'N/A' %>
                                        </td>
                                        <td class="col-3">
                                            <input type="hidden" name="items[<%= index %>][item]"
                                                value="<%= item.item._id %>">
                                            <%= item.item.name %>
                                        </td>
                                        <td>
                                            <input type="hidden" name="items[<%= index %>][hscode]"
                                                value="<%= item.item.hscode || 'N/A' %>">
                                            <%= item.item.hscode || 'N/A' %>
                                        </td>
                                        <td>
                                            <input type="number" name="items[<%= index %>][quantity]"
                                                value="<%= item.quantity %>" class="form-control item-quantity"
                                                id="quantity-<%= index %>" min="1" step="any"
                                                oninput="updateItemTotal(this)"
                                                onkeydown="handleQuantityKeydown(event, <%= index %>)"
                                                onfocus="selectValue(this)">
                                        </td>
                                        <td>
                                            <%= item.unit.name %>
                                                <input type="hidden" name="items[<%= index %>][unit]"
                                                    value="<%= item.unit._id %>">
                                        </td>
                                        <td>
                                            <input type="text" name="items[<%= index %>][batchNumber]"
                                                value="<%= item.batchNumber || '' %>"
                                                class="form-control item-batchNumber" id="batchNumber-<%= index %>"
                                                onkeydown="handleBatchKeydown(event, <%= index %>)"
                                                onfocus="selectValue(this)">
                                            <input type="date" name="items[<%= index %>][expiryDate]"
                                                value="<%= item.expiryDate.toISOString().split('T')[0] || '' %>"
                                                class="form-control item-expiryDate" id="expiryDate-<%= index %>"
                                                onkeydown="handleExpDateKeydown(event, <%= index %>)"
                                                onfocus="selectValue(this)">
                                        </td>
                                        <td>
                                            <input type="number" name="items[<%= index %>][price]"
                                                value="<%= item.price || '' %>" class="form-control item-price"
                                                id="puPrice-<%= index %>" step="any" oninput="updateItemTotal(this)"
                                                onkeydown="handlePriceKeydown(event, <%= index %>)"
                                                onfocus="selectValue(this)">
                                        </td>
                                        <td class="item-amount">
                                            <%= (item.quantity * item.price).toFixed(2) %>
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" onclick="removeItem(this)">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </td>
                                    </tr>
                                    <% }); %>
                                        <% } %>
                        </tbody>
                    </table>

                    <div id="stockDetails" style="display: none;">
                        <label for="stock">Stock</label>
                        <select id="stock" name="stock" class="form-control">
                            <!-- Stock details will be populated here via JavaScript -->
                        </select>
                    </div>

                    <hr style="border: 1px solid gray;">
                    <!-- Bill Details Table -->
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th colspan="4" class="text-center bg-light">Bill Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Sub Total Row -->
                                <tr>
                                    <td><label for="subTotal">Sub Total:</label></td>
                                    <td colspan="2" class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="subTotal">
                                                <%= bill.subTotal.toFixed(2) %>
                                            </span></p>
                                    </td>
                                </tr>

                                <!-- Discount Row -->
                                <tr>
                                    <td><label for="discountPercentage">Discount %:</label></td>
                                    <td>
                                        <input type="number" step="any" name="discountPercentage"
                                            id="discountPercentage" class="form-control"
                                            value="<%= bill.discountPercentage.toFixed(2) %>"
                                            oninput="calculateTotal()">
                                    </td>
                                    <td><label for="discountAmount">Discount (Rs.):</label></td>
                                    <td>
                                        <input type="number" step="any" name="discountAmount" id="discountAmount"
                                            value="<%= bill.discountAmount.toFixed(2) %>" class="form-control"
                                            oninput="calculateTotal()">
                                    </td>
                                </tr>

                                <!-- VAT Rows (Initially visible) -->
                                <tr id="taxableAmountRow">
                                    <td><label for="taxableAmount">Taxable Amount:</label></td>
                                    <td colspan="2" class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="taxableAmount">
                                                <%= bill.taxableAmount.toFixed(2) %>
                                            </span>
                                        </p>
                                    </td>
                                </tr>
                                <tr id="vatPercentageRow">
                                    <td><label for="vatPercentage">VAT (13%):</label></td>
                                    <td>
                                        <input type="number" name="vatPercentage" id="vatPercentage"
                                            class="form-control" value="13.00" readonly>
                                    </td>
                                    <td><label for="vatAmount">VAT Amount:</label></td>
                                    <td class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="vatAmount">
                                                <%= bill.vatAmount.toFixed(2) %>
                                            </span></p>
                                    </td>
                                </tr>

                                <!-- Round Off & Total Row -->
                                <tr>
                                    <td><label for="roundOffAmount">Round Off:</label></td>
                                    <td colspan="2">
                                        <input type="number" class="form-control" step="any" id="roundOffAmount"
                                            name="roundOffAmount" value="0.00" oninput="calculateTotal()">
                                    </td>
                                </tr>

                                <!-- Total Amount & In Words Row -->
                                <tr>
                                    <td><label for="totalAmount">Total Amount:</label></td>
                                    <td>
                                        <p class="form-control-plaintext">Rs. <span id="totalAmount">
                                                <%= bill.totalAmount.toFixed(2) %>
                                            </span></p>
                                    </td>
                                    <td><label for="amountInWords">In Words:</label></td>
                                    <td class="text-right">
                                        <p class="form-control-plaintext" id="amountInWords">Zero Only.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-primary mr-2 p-3" id="saveBill"
                            onclick="submitBillForm(false)">
                            <i class="bi bi-save"></i>
                        </button>
                        <button type="button" class="btn btn-secondary p-3" onclick="submitBillForm(true)">
                            <i class="bi bi-printer"></i>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- <div id="printModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Print Bill</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Do you want to print this bill?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitBillForm(true)">Save & Print</button>
                </div>
            </div>
        </div>
    </div> -->

    <!-- Transaction Modal -->
    <div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transactionModalLabel">Last Transactions</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul id="transactionList" class="list-group">
                        <!-- Transactions will be dynamically inserted here -->
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" id="closeModalButton"
                        onkeydown="handleCloseButtonKeydown(event)">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Batch and Expiry Modal -->
    <div class="modal fade" id="batchModal" tabindex="-1" aria-labelledby="batchModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="batchModalLabel">Batch Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>

                    </button>

                </div>
                <div class="modal-body" id="batchModalBody">
                    <!-- Batch information will be populated here dynamically -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let itemIndex = 0;
        let currentFocus = 0;
        let isFirstLoad = true;

        $(document).ready(function () {
            // Initialize Select2 for searchable dropdown
            $('#account').select2({
                placeholder: "Select a party name",
                allowClear: true,
                width: '100%', // Ensure it takes the full width of the container
            });

            // Listen for the change event on the account dropdown
            $('#account').on('change', function () {
                const selectedOption = $(this).find('option:selected');
                const address = selectedOption.data('address');

                // Set the address field with the selected account's address
                $('#address').val(address || 'Address not available');
            });

            // Listen for the change event on the account dropdown
            $('#account').on('change', function () {
                const selectedOption = $(this).find('option:selected');
                const pan = selectedOption.data('pan');

                // Set the address field with the selected account's address
                $('#pan').val(pan || 'Pan no. not available');
            });
        });

        async function fetchItems(query, vatStatus, existingItemIds) {
            try {
                const response = await fetch(`/items/search?q=${query}&isVatExempt=${vatStatus}`);
                const data = await response.json();

                console.log('Fetched items:', data);

                if (!Array.isArray(data)) {
                    throw new Error('Invalid response format');
                }

                return data;
            } catch (error) {
                console.error('Error fetching items:', error);
                return [];
            }
        }


        document.getElementById('itemSearch').addEventListener('keydown', function (event) {
            const inputField = this;
            const dropdownMenu = document.getElementById('dropdownMenu');
            const items = dropdownMenu.getElementsByClassName('dropdown-item');

            if (event.key === 'ArrowDown') {
                // Navigate down the list
                currentFocus++;
                addActive(items);
                scrollToItem(items);
                updateInputWithHighlightedItem(items);
            } else if (event.key === 'ArrowUp') {
                // Navigate up the list
                currentFocus--;
                addActive(items);
                scrollToItem(items);
                updateInputWithHighlightedItem(items);
            } else if (event.key === 'Enter') {
                // Select the item
                event.preventDefault();

                if (currentFocus > -1) {
                    if (items[currentFocus]) {
                        items[currentFocus].click();


                        // Clear the input field after selection
                        inputField.value = '';
                    }
                }
            }
        });

        function addActive(items) {
            if (!items) return false;
            removeActive(items);
            if (currentFocus >= items.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = items.length - 1;
            items[currentFocus].classList.add('active');
        }

        function removeActive(items) {
            for (let i = 0; i < items.length; i++) {
                items[i].classList.remove('active');
            }
        }

        function scrollToItem(items) {
            if (currentFocus >= 0 && currentFocus < items.length) {
                const item = items[currentFocus];
                item.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest' // Ensures the item is in view without scrolling too far
                });
            }
        }

        function updateInputWithHighlightedItem(items) {
            const inputField = document.getElementById('itemSearch');
            if (currentFocus > -1 && items[currentFocus]) {
                const itemName = items[currentFocus].querySelector('div:nth-child(3)').textContent;
                inputField.value = itemName; // Update the input field with the highlighted item's name
            }
        }


        async function showAllItems(input) {
            const dropdownMenu = input.nextElementSibling;
            const vatStatus = document.getElementById('isVatExempt').value;
            const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
                .filter(input => input.name.includes('[item]'))
                .map(input => input.value);

            // Fetch all items with an empty query
            const items = await fetchItems('', vatStatus, existingItemIds);
            console.log('All items:', items);

            // Clear existing dropdown items
            dropdownMenu.innerHTML = '';

            if (items.length === 0) {
                const noItemsMessage = document.createElement('div');
                noItemsMessage.classList.add('dropdown-item');
                noItemsMessage.textContent = 'No items found';
                noItemsMessage.style.textAlign = 'center';
                noItemsMessage.style.color = 'white';
                noItemsMessage.style.backgroundColor = 'blue';
                dropdownMenu.appendChild(noItemsMessage);
                dropdownMenu.classList.add('show');
            } else {
                // Add header row
                const headerRow = document.createElement('div');
                headerRow.classList.add('dropdown-header');
                headerRow.innerHTML = `
            <div><strong>Item Code</strong></div>
            <div><strong>HS Code</strong></div>
            <div><strong>Name</strong></div>
            <div><strong>Stock</strong></div>
            <div><strong>Unit</strong></div>
            <div><strong>S.Rate</strong></div>
        `;
                headerRow.style.backgroundColor = '#f0f0f0';
                headerRow.style.fontWeight = 'bold';
                dropdownMenu.appendChild(headerRow);

                // Add item rows
                items.forEach(item => {
                    const dropdownItem = document.createElement('div');
                    dropdownItem.classList.add('dropdown-item');
                    dropdownItem.tabIndex = 0;

                    if (item.vatStatus === 'vatable') {
                        dropdownItem.classList.add('vatable-item');
                    } else {
                        dropdownItem.classList.add('non-vatable-item');
                    }

                    // Calculate total stock and fetch price from stock entries
                    const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);
                    const latestStockEntry = item.stockEntries[item.stockEntries.length - 1];
                    const price = latestStockEntry ? latestStockEntry.price : 0;

                    dropdownItem.innerHTML = `
                <div>${item.uniqueNumber || 'N/A'}</div>
                <div>${item.hscode || 'N/A'}</div>
                <div>${item.name}</div>
                <div>${totalStock}</div>
                <div>${item.unit ? item.unit.name : ''}</div>
                <div>Rs.${price.toFixed(2)}</div>
            `;

                    dropdownItem.addEventListener('click', () => {
                        addItemToBill(item, dropdownMenu);
                        input.value = item.name;
                        dropdownMenu.classList.remove('show');
                    });
                    dropdownMenu.appendChild(dropdownItem);
                });

                dropdownMenu.classList.add('show');
                currentFocus = 0;
                addActive(dropdownMenu.getElementsByClassName('dropdown-item'));

                // Auto-fill and auto-select the input field with the first item name on the first load
                if (isFirstLoad && items.length > 0) {
                    input.value = items[0].name;
                    input.select(); // Auto-select the input text
                    isFirstLoad = false; // Set the flag to false after the first time
                }
            }
        }





        // Add event listener for focus to show all items
        document.getElementById('itemSearch').addEventListener('focus', function () {
            showAllItems(this);
        });


        // Add event listener for input to fetch items dynamically
        document.getElementById('itemSearch').addEventListener('input', function () {
            const query = this.value.trim().toLowerCase();
            const vatStatus = document.getElementById('isVatExempt').value;
            const dropdownMenu = this.nextElementSibling;

            if (query.length === 0) {
                showAllItems(this);
                return;
            }

            const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
                .filter(input => input.name.includes('[item]'))
                .map(input => input.value);

            fetchItems(query, vatStatus, existingItemIds).then(items => {
                dropdownMenu.innerHTML = '';

                if (items.length === 0) {
                    const noItemsMessage = document.createElement('div');
                    noItemsMessage.classList.add('dropdown-item');
                    noItemsMessage.textContent = 'No items found';
                    noItemsMessage.style.textAlign = 'center';
                    noItemsMessage.style.color = 'white';
                    noItemsMessage.style.backgroundColor = 'blue';
                    dropdownMenu.appendChild(noItemsMessage);
                    dropdownMenu.classList.add('show');
                } else {
                    items.forEach(item => {
                        const dropdownItem = document.createElement('div');
                        dropdownItem.classList.add('dropdown-item');
                        dropdownItem.tabIndex = 0;

                        if (item.vatStatus === 'vatable') {
                            dropdownItem.classList.add('vatable-item');
                        } else {
                            dropdownItem.classList.add('non-vatable-item');
                        }

                        const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);

                        dropdownItem.innerHTML = `
                    <div>${item.uniqueNumber || 'N/A'}</div>
                    <div>${item.hscode || 'N/A'}</div>
                    <div>${item.name}</div>
                    <div>${item.category ? item.category.name : 'No Category'}</div>
                    <div>${totalStock}</div>
                    <div>${item.unit ? item.unit.name : ''}</div>
                    <div>Rs.${item.price.toFixed()}</div>
                `;

                        dropdownItem.addEventListener('click', () => {
                            addItemToBill(item, dropdownMenu);
                            this.value = item.name;
                            dropdownMenu.classList.remove('show'); // Close the dropdown after selection
                        });
                        dropdownMenu.appendChild(dropdownItem);
                    });

                    dropdownMenu.classList.add('show');
                    currentFocus = 0;
                    addActive(dropdownMenu.getElementsByClassName('dropdown-item'));
                }
            });
        });

        // Close dropdown when user clicks outside
        document.addEventListener('click', function (event) {
            const itemSearch = document.getElementById('itemSearch');
            const dropdownMenu = itemSearch.nextElementSibling;

            if (!itemSearch.contains(event.target) && !dropdownMenu.contains(event.target)) {
                dropdownMenu.classList.remove('show'); // Close the dropdown if clicked outside
            }
        });



        //     async function filterItems(input) {
        //         const query = input.value.trim().toLowerCase();
        //         const vatStatus = document.getElementById('isVatExempt').value; // Get the VAT status from the select input
        //         const dropdownMenu = input.nextElementSibling;

        //         // To exclude already present items from search
        //         const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
        //             .filter(input => input.name.includes('[item]'))
        //             .map(input => input.value);

        //         // To exclude already present items from search
        //         if (query.length === 0) {
        //             dropdownMenu.innerHTML = '';
        //             dropdownMenu.classList.remove('show'); // Hide the dropdown if input is blank
        //             return;
        //         }

        //         const items = await fetchItems(query, vatStatus, existingItemIds);
        //         console.log('Filtered items:', items);

        //         // Clear existing dropdown items
        //         dropdownMenu.innerHTML = '';

        //         if (items.length === 0) {
        //             // Display a "No items found" message
        //             const noItemsMessage = document.createElement('div');
        //             noItemsMessage.classList.add('dropdown-item');
        //             noItemsMessage.textContent = 'No items found';
        //             noItemsMessage.style.textAlign = 'center'; // Center-align the message
        //             noItemsMessage.style.color = 'white';
        //             noItemsMessage.style.backgroundColor = 'blue';
        //             dropdownMenu.appendChild(noItemsMessage);
        //             dropdownMenu.classList.add('show');
        //         } else {

        //             // Create and add table header
        //             const header = document.createElement('div');
        //             header.classList.add('dropdown-header');
        //             header.innerHTML = `
        //     <div><strong>Item Code</strong></div>
        //     <div><strong>H.S. Code</strong></div>
        //     <div><strong>Item Name</strong></div>
        //     <div><strong>Category</strong></div>
        //     <div><strong>Quantity</strong></div>
        //     <div><strong>Unit</strong></div>
        //     <div><strong>S.Price</strong></div>
        //     <div><strong>Pu.Price</strong></div>
        // `;
        //             dropdownMenu.appendChild(header);

        //             // Create and add dropdown items
        //             items.forEach(item => {
        //                 const dropdownItem = document.createElement('div');
        //                 dropdownItem.classList.add('dropdown-item');
        //                 dropdownItem.tabIndex = 0; // Make the item focusable

        //                 // Add class based on VAT status
        //                 if (item.vatStatus === 'vatable') {
        //                     dropdownItem.classList.add('vatable-item');
        //                 } else {
        //                     dropdownItem.classList.add('non-vatable-item');
        //                 }

        //                 // Calculate the total available stock from stockEntries
        //                 const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);

        //                 dropdownItem.innerHTML = `
        //         <div>${item.uniqueNumber || 'N/A'}</div>
        //         <div>${item.hscode || 'N/A'}</div>
        //         <div>${item.name}</div>
        //         <div>${item.category ? item.category.name : 'No Category'}</div>
        //         <div>${totalStock}</div> <!-- Display total available stock -->
        //         <div>${item.unit ? item.unit.name : ''}</div>
        //         <div>Rs.${item.price.toFixed()}</div>
        //         <div>Rs.${item.puPrice.toFixed()}</div>
        //     `;

        //                 dropdownItem.addEventListener('click', () => addItemToBill(item, dropdownMenu));
        //                 dropdownMenu.appendChild(dropdownItem);
        //             });

        //             // Show or hide the dropdown menu based on the number of items
        //             if (items.length > 0) {
        //                 dropdownMenu.classList.add('show');
        //             } else {
        //                 dropdownMenu.classList.remove('show');
        //             }
        //         }
        //     }

        let selectedBatch = {}; // Store the selected batch information

        function addItemToBill(item, dropdownMenu) {
            const tbody = document.getElementById('items');
            const inputField = document.getElementById('itemSearch');

            if (!inputField.value.trim()) {
                return; // Do not add an item if the search field is blank
            }

            // Clear the item search field immediately after showing the modal
            inputField.value = '';

            // First, check if we should display last transactions
            shouldDisplayTransactions().then((displayTransactions) => {
                // If displayTransactions is true, fetch the last transactions
                if (displayTransactions) {
                    handleFetchLastTransactions(item._id).then(() => {
                        // Show batch modal after the transaction modal is closed
                        $('#transactionModal').on('hidden.bs.modal', function () {
                            // Trigger the batch modal with batch details
                            showBatchModal(item, (batchInfo) => {
                                // This callback will be triggered when the user selects a batch from the modal
                                selectedBatch = batchInfo;

                                const tr = document.createElement('tr');
                                tr.classList.add('item', item.vatStatus ? 'vatable-item' : 'non-vatable-item');

                                const serialNumber = tbody.rows.length + 1;  // Calculate the serial number based on the number of rows already in the table
                                tr.innerHTML = `
            <td>${serialNumber}</td>
            <td>${item.uniqueNumber}</td>
        <td class="col-3">
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.name}
        </td>
        <td>
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.hscode}
        </td>
        <td><input type="number" name="items[${itemIndex}][quantity]" value="0" class="form-control item-quantity" id="quantity-${itemIndex}" min="1" step="any" oninput="updateItemTotal(this)" onkeydown="handleQuantityKeydown(event,${itemIndex})" onfocus="selectValue(this)"></td>
        <td>
            ${item.unit ? item.unit.name : ''}
            <input type="hidden" name="items[${itemIndex}][unit]" value="${item.unit ? item.unit._id : ''}">
        </td>
             <td>
                    <input type="text" name="items[${itemIndex}][batchNumber]" value="${selectedBatch.batchNumber}" class="form-control item-batchNumber" id="batchNumber-${itemIndex}" onkeydown="handleBatchKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
                    <input type="date" name="items[${itemIndex}][expiryDate]" value="${selectedBatch.expiryDate}" class="form-control item-expiryDate" id="expiryDate-${itemIndex}" onkeydown="handleExpDateKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
                </td>
        <td><input type="number" name="items[${itemIndex}][price]" value="${selectedBatch.price}" class="form-control item-price" id="price-${itemIndex}" step="any" oninput="updateItemTotal(this)" onkeydown="handlePriceKeydown(event, ${itemIndex})" onfocus="selectValue(this)"></td>
        <td class="item-amount">0.00</td>
        <td>
             <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="removeItem(this)">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
        <input type="hidden" name="items[${itemIndex}][vatStatus]" value="${item.vatStatus}">
    `;

                                tbody.appendChild(tr);
                                itemIndex++;
                                calculateTotal();

                                // Focus on the newly added row's quantity input
                                document.getElementById(`quantity-${itemIndex - 1}`).focus();

                                // Hide the dropdown menu after selecting an item
                                dropdownMenu.classList.remove('show');
                            });
                        });
                    });
                } else {
                    // Directly show the batch modal without fetching transactions
                    showBatchModal(item, (batchInfo) => {
                        // This callback will be triggered when the user selects a batch from the modal
                        selectedBatch = batchInfo;

                        const tr = document.createElement('tr');
                        tr.classList.add('item', item.vatStatus ? 'vatable-item' : 'non-vatable-item');

                        const serialNumber = tbody.rows.length + 1;  // Calculate the serial number based on the number of rows already in the table
                        tr.innerHTML = `
            <td>${serialNumber}</td>
            <td>${item.uniqueNumber}</td>
        <td class="col-3">
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.name}
        </td>
        <td>
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.hscode}
        </td>
        <td><input type="number" name="items[${itemIndex}][quantity]" value="0" class="form-control item-quantity" id="quantity-${itemIndex}" min="1" step="any" oninput="updateItemTotal(this)" onkeydown="handleQuantityKeydown(event,${itemIndex})" onfocus="selectValue(this)"></td>
        <td>
            ${item.unit ? item.unit.name : ''}
            <input type="hidden" name="items[${itemIndex}][unit]" value="${item.unit ? item.unit._id : ''}">
        </td>
        <!-- Hidden fields for batch and expiry -->
             <td>
                    <input type="text" name="items[${itemIndex}][batchNumber]" value="${selectedBatch.batchNumber}" class="form-control item-batchNumber" id="batchNumber-${itemIndex}" onkeydown="handleBatchKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
                    <input type="date" name="items[${itemIndex}][expiryDate]" value="${selectedBatch.expiryDate}" class="form-control item-expiryDate" id="expiryDate-${itemIndex}" onkeydown="handleExpDateKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
                </td>
        <td><input type="number" name="items[${itemIndex}][price]" value="${selectedBatch.price}" class="form-control item-price" id="price-${itemIndex}" step="any" oninput="updateItemTotal(this)" onkeydown="handlePriceKeydown(event, ${itemIndex})" onfocus="selectValue(this)"></td>
        <td class="item-amount">0.00</td>
        <td>
             <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="removeItem(this)">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
        <input type="hidden" name="items[${itemIndex}][vatStatus]" value="${item.vatStatus}">
    `;

                        tbody.appendChild(tr);
                        itemIndex++;
                        calculateTotal();

                        // Focus on the newly added row's quantity input
                        document.getElementById(`quantity-${itemIndex - 1}`).focus();

                        // Hide the dropdown menu after selecting an item
                        dropdownMenu.classList.remove('show');
                    });
                }
            });
        }

        function showBatchModal(item, callback) {
            const modal = document.getElementById('batchModal');
            const modalBody = document.getElementById('batchModalBody');

            // Check if all stock entries are out of stock
            const outOfStock = item.stockEntries.every((entry) => entry.quantity === 0);

            let modalContent = `<h5>Batch Information for ${item.name}</h5>`;

            if (outOfStock) {
                // Display 'Out of Stock' message
                modalContent += `<div class="alert alert-warning" role="alert">Out of Stock</div>`;
            } else {
                // Populate the modal with batch information if stock is available
                modalContent += `
        <table class="table" id="batchTable">
            <thead>
                <tr>
                    <th>Batch Number</th>
                    <th>Expiry Date</th>
                    <th>Quantity</th>
                    <th>S.P</th>
                    <th>C.P</th>
                    <th>%</th>
                    <th>Mrp</th>
                </tr>
            </thead>
            <tbody>
        `;

                item.stockEntries.forEach((entry) => {
                    if (entry.quantity > 0) { // Only show entries with stock
                        modalContent += `
                <tr tabindex="0">
                    <td>${entry.batchNumber || 'N/A'}</td>
                    <td>${entry.expiryDate || 'N/A'}</td>
                    <td>${entry.quantity}</td>
                    <td>${entry.price}</td>
                    <td>${entry.puPrice}</td>
                    <td>${entry.marginPercentage}</td>
                    <td>${entry.mrp}</td>
                </tr>
            `;
                    }
                });

                modalContent += '</tbody></table>';
            }

            modalBody.innerHTML = modalContent;

            // Show the modal
            $(modal).modal('show');

            // Wait for the modal to be shown, then focus on the first row
            $(modal).on('shown.bs.modal', function () {
                const firstRow = modalBody.querySelector('tbody tr');
                if (firstRow) {
                    firstRow.focus(); // Set focus on the first row
                }
            });

            // Handle keyboard navigation and selection
            const rows = modalBody.querySelectorAll('tbody tr');
            let selectedIndex = 0;

            rows.forEach((row, index) => {
                row.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowDown') {
                        selectedIndex = (index + 1) % rows.length; // Move down
                        rows[selectedIndex].focus();
                    } else if (event.key === 'ArrowUp') {
                        selectedIndex = (index - 1 + rows.length) % rows.length; // Move up
                        rows[selectedIndex].focus();
                    } else if (event.key === 'Enter') {
                        const batchNumber = row.cells[0].textContent; // Assuming batch number is in the first cell
                        const expiryDate = row.cells[1].textContent; // Expiry date in the second cell
                        const price = row.cells[3].textContent;
                        callback({ batchNumber, expiryDate, price });

                        // Hide the modal after selection
                        $(modal).modal('hide');
                    }
                });
            });

            // Optional: Close the modal on clicking outside or the close button
            modal.addEventListener('hidden.bs.modal', function () {
                modalBody.innerHTML = ''; // Clear modal content
            });
        }



        function removeItem(button) {
            const row = button.closest('tr');
            row.remove();
            calculateTotal();
        }

        function updateItemTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(row.querySelector('input.item-quantity').value) || 0;
            const price = parseFloat(row.querySelector('input.item-price').value) || 0;
            const amount = quantity * price;
            row.querySelector('.item-amount').textContent = amount.toFixed(2);
            calculateTotal();
        }

        function updateDiscountFromPercentage() {
            const subTotal = calculateSubTotal();
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountAmount = (subTotal * discountPercentage) / 100;
            document.getElementById('discountAmount').value = discountAmount.toFixed(2);
        }

        function updateDiscountFromAmount() {
            const subTotal = calculateSubTotal();
            const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
            const discountPercentage = (discountAmount / subTotal) * 100;
            document.getElementById('discountPercentage').value = discountPercentage.toFixed(2);
        }

        function calculateSubTotal() {
            const rows = document.querySelectorAll('#items tr.item');
            let subTotal = 0;

            rows.forEach(row => {
                const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
                const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value === 'true';

                subTotal += amount;
                if (vatStatus) {
                    taxableAmount += amount;
                    vatAmount += amount * 0.13; // VAT is 13%
                }
            });

            return subTotal;
        }


        function calculateTotal() {
            const rows = document.querySelectorAll('#items tr.item');
            let subTotal = calculateSubTotal();
            let vatAmount = 0;
            let totalTaxableAmount = 0;
            let totalNonTaxableAmount = 0;

            // Separate amounts for vatable and non-vatable items
            rows.forEach(row => {
                const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
                const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value;

                if (vatStatus === 'vatable') {
                    totalTaxableAmount += amount;
                } else {
                    totalNonTaxableAmount += amount;
                }
            });

            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;

            // Calculate total amount before discount
            const totalAmountBeforeDiscount = totalTaxableAmount + totalNonTaxableAmount;

            // Apply discount proportionally to vatable and non-vatable items
            // const totalDiscount = (totalAmountBeforeDiscount * discountPercentage / 100) + discountAmount;
            const discountForTaxable = (totalTaxableAmount * discountPercentage / 100);
            const discountForNonTaxable = (totalNonTaxableAmount * discountPercentage / 100)

            const finalTaxableAmount = totalTaxableAmount - discountForTaxable;
            const finalNonTaxableAmount = totalNonTaxableAmount - discountForNonTaxable;

            // Calculate VAT only for vatable items
            const vatSelection = document.getElementById('isVatExempt').value;
            if (vatSelection === 'false' || vatSelection === 'all') {
                vatAmount = finalTaxableAmount * 0.13; // VAT is 13%
            } else {
                vatAmount = 0;
            }
            const roundOffAmount = parseFloat(document.getElementById('roundOffAmount').value) || 0;
            const totalAmount = finalTaxableAmount + finalNonTaxableAmount + vatAmount + roundOffAmount;

            document.getElementById('subTotal').textContent = subTotal.toFixed(2);
            document.getElementById('taxableAmount').textContent = finalTaxableAmount.toFixed(2);
            document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
            document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);

            const amountInWords = numberToWords(totalAmount) + ' Only.';
            document.getElementById('amountInWords').textContent = amountInWords;
        }


        function toggleCreditPartyOptions() {
            const paymentMode = document.getElementById('paymentMode').value;
            const creditPartyOptions = document.querySelectorAll('.credit-party');
            creditPartyOptions.forEach(option => {
                option.style.display = paymentMode === 'credit' ? 'block' : 'none';
            });
        }

        function toggleVatInputs() {
            const isVatExempt = document.getElementById('isVatExempt').value === 'true';

            // VAT-related fields
            const vatInputs = document.getElementById('vatInputs'); // Group for VAT-related inputs
            const taxableAmountRow = document.getElementById('taxableAmountRow');
            const vatPercentageRow = document.getElementById('vatPercentageRow');
            const vatAmountRow = document.getElementById('vatAmountRow');

            // Toggle display based on VAT exemption
            if (isVatExempt) {
                taxableAmountRow.style.display = 'none';
                vatPercentageRow.style.display = 'none';
                vatAmountRow.style.display = 'none';
            } else {
                taxableAmountRow.style.display = 'table-row'; // Show taxable amount row
                vatPercentageRow.style.display = 'table-row'; // Show VAT 13% row
                vatAmountRow.style.display = 'table-row'; // Show VAT amount row
            }

            // Recalculate total when toggling VAT
            calculateTotal();
        }

        // function showPrintModal() {
        //     $('#printModal').modal('show');
        // }

        function submitBillForm(print) {
            shouldPrint = print;
            const billForm = document.getElementById('billForm');
            const saveButton = document.getElementById('saveBill');

            // Change button text and disable it
            saveButton.innerText = 'Saving...';
            saveButton.disabled = true;

            if (print) {
                const url = new URL(billForm.action);
                url.searchParams.append('print', 'true');
                billForm.action = url.toString();
            }

            // Simulate form submission (replace this with actual form submission logic)
            setTimeout(() => {
                billForm.submit();

                // Reset button text and enable it after submission
                saveButton.innerText = 'Save Bill';
                saveButton.disabled = false;
            }, 2000); // Simulating a delay; adjust or remove as needed
        }


        document.getElementById('billForm').addEventListener('submit', function (event) {
            if (!shouldPrint && event.submitter && event.submitter.innerText === 'Save & Print Bill') {
                event.preventDefault();
                // showPrintModal();
            }
        });
        function numberToWords(num) {
            const ones = [
                '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
                'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
                'Seventeen', 'Eighteen', 'Nineteen'
            ];

            const tens = [
                '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
            ];

            const scales = ['', 'Thousand', 'Million', 'Billion'];

            function convertHundreds(num) {
                let words = '';

                if (num > 99) {
                    words += ones[Math.floor(num / 100)] + ' Hundred ';
                    num %= 100;
                }

                if (num > 19) {
                    words += tens[Math.floor(num / 10)] + ' ';
                    num %= 10;
                }

                if (num > 0) {
                    words += ones[num] + ' ';
                }

                return words.trim();
            }

            if (num === 0) return 'Zero';

            if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

            let words = '';

            for (let i = 0; i < scales.length; i++) {
                let unit = Math.pow(1000, scales.length - i - 1);
                let currentNum = Math.floor(num / unit);

                if (currentNum > 0) {
                    words += convertHundreds(currentNum) + ' ' + scales[scales.length - i - 1] + ' ';
                }

                num %= unit;
            }

            return words.trim();
        };

        // Fetch Total Amount and Convert to Words
        document.addEventListener('DOMContentLoaded', () => {
            const totalAmount = parseFloat(document.getElementById('totalAmount').innerText);
            const amountInWords = numberToWords(totalAmount);
            document.getElementById('amountInWords').innerText = amountInWords + ' Only.';
        });


        window.addEventListener('DOMContentLoaded', () => {
            toggleVatInputs();
            toggleCreditPartyOptions();
        });

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('discountPercentage').addEventListener('input', function () {
                updateDiscountFromPercentage();
                calculateTotal();
            });

            document.getElementById('discountAmount').addEventListener('input', function () {
                updateDiscountFromAmount();
                calculateTotal();
            });

            // document.querySelectorAll('.price-input, .quantity-input, .item-select').forEach(element => {
            //     element.addEventListener('input', calculateTotal);
            // });

            document.getElementById('roundOffAmount').addEventListener('input', function () {
                calculateTotal();
            });

            calculateTotal();
        });

        async function shouldDisplayTransactions() {
            try {
                const response = await fetch(`/settings/get-display-transactions`);
                const { displayTransactions } = await response.json();
                return displayTransactions;
            } catch (error) {
                console.error('Error fetching settings:', error);
                return false;
            }
        }

        async function fetchLastTransactions(itemId) {
            // const itemId = select.value;
            const accountId = document.getElementById('account').value;
            const purchaseSalesType = document.getElementById('purchaseSalesType').value; // Ensure this element exists and has a value
            const transactionList = document.getElementById('transactionList');

            if (!purchaseSalesType) {
                console.error('Account Type is undefined. Please ensure it is set.');
                return;
            }

            try {

                const response = await fetch(`/api/transactions/${itemId}/${accountId}/${purchaseSalesType}`);
                const transactions = await response.json();
                // const { transactions, companyDateFormat } = await response.json();

                // Check if transactions are empty
                if (transactions.length === 0) {
                    transactionList.innerHTML = '<p>No transactions to display.</p>';
                    // Do not show the modal if there are no transactions
                    return;
                }

                // Create table header
                let tableHtml = `
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Trans. Id</th>
                        <th>Date</th>
                        <th>Bill No.</th>
                        <th>Type</th>
                        <th>A/c Type</th>
                        <th>Pay.Mode</th>
                        <th>Qty.</th>
                        <th>Unit</th>
                        <th>S.price</th>
                    </tr>
                </thead>
                <tbody>
        `;

                // Add table rows for each transaction
                tableHtml += transactions.map(transaction => {
                    return `
                <tr onclick="window.location.href='/bills/${transaction.billId._id}/print'" style="cursor: pointer;">
                    <td>${transaction._id}</td>
                    <td>${new Date(transaction.date).toLocaleDateString()}</td>
                    <td>${transaction.billNumber}</td>
                    <td>${transaction.type}</td>
                    <td>${transaction.purchaseSalesType}</td>
                    <td>${transaction.paymentMode}</td>
                    <td>${transaction.quantity}</td>
                    <td>${transaction.unit ? transaction.unit.name : 'N/A'}</td>
                    <td>Rs.${transaction.price}</td>
                </tr>
            `;
                }).join('');

                // Close table
                tableHtml += `
                </tbody>
            </table>
        `;

                // Set the innerHTML of the transaction list container
                transactionList.innerHTML = tableHtml;

                // Show the modal
                $('#transactionModal').modal('show');
            } catch (error) {
                console.error('Error fetching transactions:', error);
            }
        }


        async function handleFetchLastTransactions(itemId) {
            const displayTransactions = await shouldDisplayTransactions();
            if (displayTransactions) {
                await fetchLastTransactions(itemId);
            }
        }


        // Assuming you have a batch modal with an ID 'batchModal' and an input field inside it
        const batchModal = document.getElementById('batchModal');

        // Add keydown event listener to the batch modal to detect "Enter" press
        batchModal.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent form submission or modal close

                // Focus on the quantity field of the last added row after pressing "Enter"
                focusOnLastQuantityField();
            }
        });

        // Function to focus on the quantity field of the last added item
        function focusOnLastQuantityField() {
            const tbody = document.getElementById('items');

            // Get the last row's quantity field
            const lastRow = tbody.querySelector('tr.item:last-child');

            if (lastRow) {
                const lastQuantityField = lastRow.querySelector('.item-quantity');

                if (lastQuantityField) {
                    lastQuantityField.focus();
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const itemSearchInput = document.getElementById('itemSearch'); // Initial focus on item search input
        });

        async function handleItemSearchKeydown(event) {
            const itemSearchInput = document.getElementById('itemSearch');
            const itemsTable = document.getElementById('itemsTable');
            const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

            if (itemSearchInput.value.length > 0) {
                if (event.key === 'Enter') {
                    // Fetch and check if transactions should be displayed
                    const displayTransactions = await shouldDisplayTransactions();

                    // Only open the modal if displayTransactions is true
                    if (displayTransactions) {
                        openModalAndFocusCloseButton();

                    } else {
                        focusOnLastRow('item-quantity');
                    }
                }
            } else if (itemSearchInput.value.length < 0 || itemsAvailable) {
                if (event.key === 'Enter') {
                    const submitBillForm = document.getElementById('saveBill')
                    submitBillForm.focus();
                }
            }
        }
        function openModalAndFocusCloseButton() {
            // Open the modal
            $('#transactionModal').modal('show');

            // Wait until the modal is fully shown before focusing the close button
            $('#transactionModal').on('shown.bs.modal', function () {
                document.getElementById('closeModalButton').focus();
            });
        }

        function handleCloseButtonKeydown(event) {
            if (event.key === 'Enter') {
                // Close the modal (optional, depending on your implementation)
                $('#transactionModal').modal('hide');

                // Focus on the quantity input field
                document.getElementById(`quantity-${itemIndex - 1}`).focus();
                // focusOnLastRow('quantity');
            }
        }

        function handleQuantityKeydown(event) {
            if (event.key === 'Enter') {
                // Focus on the price input field
                // document.getElementById('price').focus();
                // document.getElementById(`price-${itemIndex}`).focus();
                const batchNumberInput = document.getElementById(`batchNumber-${itemIndex - 1}`);
                batchNumberInput.focus();
                batchNumberInput.select();

            }
        }

        function handleBatchKeydown(event) {
            if (event.key === 'Enter') {
                const expDateInput = document.getElementById(`expiryDate-${itemIndex - 1}`);
                expDateInput.focus();
                expDateInput.select();
            }
        }

        function handleExpDateKeydown(event) {
            if (event.key === 'Enter') {
                const priceInput = document.getElementById(`price-${itemIndex - 1}`);
                priceInput.focus();
                priceInput.select();
            }
        }

        function handlePriceKeydown(event) {
            if (event.key === 'Enter') {
                // Focus back on the item search input field
                const itemSearchInput = document.getElementById('itemSearch');
                itemSearchInput.focus();
                itemSearchInput.select();

            }
        }

        function selectValue(input) {
            input.select(); // Select the value of the input field when it is focused
        }

        function focusOnLastRow(fieldClass) {
            const rows = document.querySelectorAll('.item');
            if (rows.length > 0) {
                const lastRow = rows[rows.length - 1];
                const inputField = lastRow.querySelector(`.${fieldClass}`);
                if (inputField) {
                    inputField.focus();
                    inputField.select();
                }
            }
        }


        // //Handle scape buttons
        // document.addEventListener('keydown', function (event) {
        //     if (event.key === 'Escape') {
        //         event.preventDefault(); // Prevent default escape behavior
        //         var exitModal = new bootstrap.Modal(document.getElementById('exitConfirmationModal'));
        //         exitModal.show();
        //     }
        // });

        // // Handle the exit confirmation
        // document.getElementById('confirmExit').addEventListener('click', function () {
        //     // Redirect to the home page
        //     window.location.href = '/wholesellerDashboard'; // Change '/' to your home page URL
        // });

    </script>