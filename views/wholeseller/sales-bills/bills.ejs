<div class="form-control">
    <%- include('../layouts/boilerplate', { title: 'Sales' , body: 'wholeseller >> sales >> add' }) %>
</div>
<style>
    .vatable-item {
        background-color: lightgreen;
    }

    .non-vatable-item {
        background-color: lightyellow;
    }

    .dropdown-menu {
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
    }

    .dropdown-item {
        cursor: pointer;
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

    .dropdown-item:focus,
    .dropdown-item:hover {
        background-color: #f1f1f1;
    }

    .item {
        margin-bottom: 10px;
    }

    .last-transactions {
        list-style-type: none;
        padding-left: 0;
    }

    .credit-party {
        display: none;
        /* Hide credit party options by default */
    }

    .dropdown-menu {
        display: none;
    }

    .dropdown-menu.show {
        display: block;
    }

    .dropdown-header {
        display: flex;
        justify-content: space-between;
        padding: 8px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        font-weight: bold;
    }

    .dropdown-item {
        display: flex;
        justify-content: space-around;
        padding: 8px;
        border-bottom: 1px solid #dee2e6;
    }

    .dropdown-item:last-child {
        border-bottom: none;
    }

    /* Styling for Select2 dropdown */
    .select2-container .select2-selection--single {
        height: 40px;
        padding: 5px;
        border-radius: 4px;
        border: 1px solid #ccc;
        display: flex;
        align-items: center;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 100%;
        right: 10px;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        color: #495057;
        font-size: 16px;
    }

    /* Focus state for the Select2 dropdown */
    .select2-container--default .select2-selection--single:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
</style>
<div class="container" id="mainContainer">
    <div class=" card mt-4">
        <div class="card-header">
            Create New Bill
        </div>
        <div class="card-body">
            <form action="/bills" method="post" id="billForm">
                <div class="form-group row">

                    <% if (companyDateFormat==='nepali' ) { %>
                        <!-- Nepali Date Fields -->
                        <div class="col">
                            <label for="transactionDateNepali">Transaction Date:</label>
                            <input type="text" name="transactionDateNepali" id="transactionDateNepali"
                                class="form-control" value="<%= transactionDateNepali || '' %>" autofocus required>
                        </div>
                        <div class="col">
                            <label for="nepaliDate">Invoice Date:</label>
                            <input type="text" name="nepaliDate" id="nepaliDate" class="form-control" required
                                value="<%= nepaliDate || '' %>">
                        </div>
                        <!-- Hidden field for billDate, since we are using NepaliDate -->
                        <input type="hidden" name="billDate" id="billDate" value="">
                        <% } else { %>
                            <!-- English Date Fields -->
                            <div class="col">
                                <label for="transactionDateRoman">Transaction Date:</label>
                                <input type="date" name="transactionDateRoman" id="transactionDateRoman"
                                    class="form-control" value="<%= new Date().toISOString().split('T')[0] %>" autofocus
                                    required>
                            </div>
                            <div class="col">
                                <label for="billDate">Invoice Date:</label>
                                <input type="date" name="billDate" id="billDate" class="form-control" required
                                    value="<%= new Date().toISOString().split('T')[0] %>">
                            </div>
                            <!-- Hidden field for nepaliDate, since we are using English Date -->
                            <input type="hidden" name="nepaliDate" id="nepaliDate" value="">
                            <% } %>

                                <div class="col">
                                    <p id="billNumber">
                                        <label for="billNumber">Vch. No:</label>
                                        <input type="number" class="form-control" value="<%=nextBillNumber %>" disabled
                                            readonly>
                                        <input type="hidden" name="billNumber" value="<%= nextBillNumber %>" readonly>
                                    </p>
                                </div>

                                <div class="col">
                                    <label for="paymentMode">Payment Mode:</label>
                                    <select class="form-control" id="paymentMode" name="paymentMode"
                                        onchange="toggleCreditPartyOptions()">
                                        <option>Select</option>
                                        <option value="cash">Cash</option>
                                        <option value="credit">Credit</option>
                                    </select>
                                </div>
                                <div class="col">
                                    <label for="isVatExempt">VAT</label>
                                    <select name="isVatExempt" id="isVatExempt" class="form-control"
                                        onchange="toggleVatInputs()"
                                        onchange="filterItems(document.getElementById('itemSearch'))">
                                        <option value="all">All</option>
                                        <option value="false">13%</option>
                                        <option value="true">Exempt</option>
                                    </select>
                                </div>
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label for="purchaseSalesType">Type:</label>
                        <select id="purchaseSalesType" name="purchaseSalesType" class="form-control" disabled>
                            <option value="Sales">Sales</option>
                        </select>
                    </div>
                    <div class="col">
                        <label for="account">Party Name:</label>
                        <select name="account" id="account" class="form-control" required>
                            <option value="" disabled selected>Select a party name</option>
                            <% if (accounts && accounts.length> 0) { %>
                                <% accounts.forEach(account=> { %>
                                    <option value="<%= account._id %>">
                                        <%= account.name %>
                                    </option>
                                    <% }); %>
                                        <% } else { %>
                                            <option disabled>No companies available</option>
                                            <% } %>
                        </select>
                    </div>
                </div>
                <hr style="border: 1px solid gray;">
                <div class="form-group row">
                    <div class="col">
                        <div class="form-group row">
                            <div class="col">
                                <label for="itemSearch">Search Item</label>
                                <input type="text" id="itemSearch" class="form-control" placeholder="Search for an item"
                                    oninput="filterItems(this)" autocomplete="off"
                                    onkeydown="handleItemSearchKeydown(event)">
                                <div id="dropdownMenu" class="dropdown-menu"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <table class="table table-bordered" id="itemsTable">
                    <thead>
                        <tr>
                            <th>S.No.</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>H.S. Code</th>
                            <th>Qty</th>
                            <th>Unit</th>
                            <th>Price</th>
                            <th>Amount</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="items">
                        <!-- Item rows will be dynamically added here -->
                    </tbody>
                </table>

                <div id="stockDetails" style="display: none;">
                    <label for="stock">Stock</label>
                    <select id="stock" name="stock" class="form-control">
                        <!-- Stock details will be populated here via JavaScript -->
                    </select>
                </div>

                <hr style="border: 1px solid gray;">
                <div class="form-group row">
                    <div class="col">
                        <label for="subTotal">Sub Total: </label>
                        <p class="form-control-plaintext">Rs.<span id="subTotal">0</span></p>
                    </div>
                    <div class="col">
                        <label for="discountPercentage">Discount %: </label>
                        <input type="number" step="any" name="discountPercentage" id="discountPercentage"
                            class="form-control" value="0" oninput="calculateTotal()">
                    </div>
                    <div class="col">
                        <label for="discountAmount">Discount (Rs.): </label>
                        <input type="number" step="any" name="discountAmount" id="discountAmount" value="0"
                            class="form-control" oninput="calculateTotal()">
                    </div>
                </div>
                <div id="vatInputs">
                    <div class="form-group row">
                        <div class="col">
                            <label for="taxableAmount">Taxable Amount: </label>
                            <p class="form-control-plaintext">Rs.<span id="taxableAmount">0</span></p>
                        </div>
                        <div class="col">
                            <label for="vatPercentage">VAT (13%): </label>
                            <input type="number" name="vatPercentage" id="vatPercentage" class="form-control"
                                value="13">
                        </div>
                        <div class="col">
                            <label for="vatAmount">VAT Amount: </label>
                            <p class="form-control-plaintext">Rs.<span id="vatAmount">0</span></p>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label for="totalAmount">Total Amount: </label>
                        <p class="form-control-plaintext">Rs.<span id="totalAmount">0</span></p>
                    </div>
                    <div class="col">
                        <label for="roundOffAmount">Round Off: </label>
                        <input type="number" class="form-control" step="any" id="roundOffAmount" name="roundOffAmount"
                            value="0" oninput="calculateTotal()">
                    </div>
                    <div class="col">
                        <label for="amountInWords">In Words: </label>
                        <p class="form-control-plaintext" id="amountInWords" oninput="numberToWords">Zero Only.</p>
                    </div>
                </div>
                <div style="float: right;">
                    <button type="button" class="btn btn-primary" id="saveBill" onclick="submitBillForm(false)">Save
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="submitBillForm(true)">Save & Print
                    </button>
                </div>
            </form>
        </div>
    </div>
    <a href="/" class="btn btn-link mt-4">Back</a>
</div>

<div id="printModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Print Bill</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Do you want to print this bill?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitBillForm(true)">Save & Print</button>
            </div>
        </div>
    </div>
</div>

<!-- Transaction Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="transactionModalLabel">Last Transactions</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul id="transactionList" class="list-group">
                    <!-- Transactions will be dynamically inserted here -->
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="closeModalButton"
                    onkeydown="handleCloseButtonKeydown(event)">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Exit Confirmation Modal -->
<div class="modal fade" id="exitConfirmationModal" tabindex="-1" aria-labelledby="exitConfirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exitConfirmationModalLabel">Exit Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to exit without saving?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmExit" autofocus>Yes, Exit</button>
            </div>
        </div>
    </div>
</div>


<script>
    let itemIndex = 0;
    let currentFocus = 0;

    $(document).ready(function () {
        // Initialize Select2 for searchable dropdown
        $('#account').select2({
            placeholder: "Select a party name",
            allowClear: true,
            width: '100%', // Ensure it takes the full width of the container
        });
    });

    async function fetchItems(query, vatStatus, existingItemIds) {
        try {
            const response = await fetch(`/items/search?q=${query}&isVatExempt=${vatStatus}&exclude=${existingItemIds.join(',')}`);
            const data = await response.json();

            console.log('Fetched items:', data);

            if (!Array.isArray(data)) {
                throw new Error('Invalid response format');
            }

            return data;
        } catch (error) {
            console.error('Error fetching items:', error);
            return [];
        }
    }


    document.getElementById('itemSearch').addEventListener('keydown', function (event) {
        const inputField = this;
        const dropdownMenu = document.getElementById('dropdownMenu');
        const items = dropdownMenu.getElementsByClassName('dropdown-item');


        if (event.key === 'ArrowDown') {
            // Navigate down the list
            currentFocus++;
            addActive(items);
        } else if (event.key === 'ArrowUp') {
            // Navigate up the list
            currentFocus--;
            addActive(items);
        } else if (event.key === 'Enter') {
            // Select the item
            event.preventDefault();
            if (currentFocus > -1) {
                if (items[currentFocus]) {
                    items[currentFocus].click();
                }
            }
        }
    });

    function addActive(items) {
        if (!items) return false;
        removeActive(items);
        if (currentFocus >= items.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = items.length - 1;
        items[currentFocus].classList.add('active');
    }

    function removeActive(items) {
        for (let i = 0; i < items.length; i++) {
            items[i].classList.remove('active');
        }
    }

    // async function filterItems(input) {
    //     const query = input.value.trim().toLowerCase();
    //     const vatStatus = document.getElementById('isVatExempt').value; // Get the VAT status from the select input
    //     const dropdownMenu = input.nextElementSibling;
    //     //to exculde already present items from search
    //     const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
    //         .filter(input => input.name.includes('[item]'))
    //         .map(input => input.value);
    //     //to exculde already present items from search


    //     if (query.length === 0) {
    //         dropdownMenu.innerHTML = '';
    //         dropdownMenu.classList.remove('show'); // Hide the dropdown if input is blank
    //         return;
    //     }

    //     const items = await fetchItems(query, vatStatus, existingItemIds);

    //     console.log('Filtered items:', items);

    //     // Clear existing dropdown items
    //     dropdownMenu.innerHTML = '';

    //     // Create and add table header
    //     const header = document.createElement('div');
    //     header.classList.add('dropdown-header');
    //     header.innerHTML = `
    //     <div><strong>Item Code</strong></div>
    //     <div><strong>H.S. Code</strong></div>
    //     <div><strong>Item Name</strong></div>
    //     <div><strong>Category</strong></div>
    //     <div><strong>Quantity</strong></div>
    //     <div><strong>Unit</strong></div>
    //     <div><strong>S.Price</strong></div>
    //     <div><strong>Pu.Price</strong></div>

    // `;
    //     dropdownMenu.appendChild(header);

    //     // Create and add dropdown items
    //     items.forEach(item => {
    //         const dropdownItem = document.createElement('div');
    //         dropdownItem.classList.add('dropdown-item');
    //         dropdownItem.tabIndex = 0; // Make the item focusable

    //         // Add class based on VAT status
    //         if (item.vatStatus === 'vatable') {
    //             dropdownItem.classList.add('vatable-item');
    //         } else {
    //             dropdownItem.classList.add('non-vatable-item');
    //         }
    //         dropdownItem.innerHTML = `
    //         <div>${item.uniqueNumber || 'N/A'}</div>
    //         <div>${item.hscode || 'N/A'}</div>
    //         <div>${item.name}</div>
    //         <div>${item.category ? item.category.name : 'No Category'}</div>
    //         <div>${item.stock}</div>
    //         <div>${item.unit ? item.unit.name : ''}</div>
    //         <div>Rs.${item.price.toFixed()}</div>
    //         <div>Rs.${item.puPrice.toFixed()}</div>

    //     `;
    //         dropdownItem.addEventListener('click', () => addItemToBill(item, dropdownMenu));
    //         dropdownMenu.appendChild(dropdownItem);
    //     });

    //     // Show or hide the dropdown menu based on the number of items
    //     if (items.length > 0) {
    //         dropdownMenu.classList.add('show');
    //     } else {
    //         dropdownMenu.classList.remove('show');
    //     }
    // }

    async function filterItems(input) {
        const query = input.value.trim().toLowerCase();
        const vatStatus = document.getElementById('isVatExempt').value; // Get the VAT status from the select input
        const dropdownMenu = input.nextElementSibling;

        // To exclude already present items from search
        const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
            .filter(input => input.name.includes('[item]'))
            .map(input => input.value);

        // To exclude already present items from search
        if (query.length === 0) {
            dropdownMenu.innerHTML = '';
            dropdownMenu.classList.remove('show'); // Hide the dropdown if input is blank
            return;
        }

        const items = await fetchItems(query, vatStatus, existingItemIds);
        console.log('Filtered items:', items);

        // Clear existing dropdown items
        dropdownMenu.innerHTML = '';

        // Create and add table header
        const header = document.createElement('div');
        header.classList.add('dropdown-header');
        header.innerHTML = `
        <div><strong>Item Code</strong></div>
        <div><strong>H.S. Code</strong></div>
        <div><strong>Item Name</strong></div>
        <div><strong>Category</strong></div>
        <div><strong>Quantity</strong></div>
        <div><strong>Unit</strong></div>
        <div><strong>S.Price</strong></div>
        <div><strong>Pu.Price</strong></div>
    `;
        dropdownMenu.appendChild(header);

        // Create and add dropdown items
        items.forEach(item => {
            const dropdownItem = document.createElement('div');
            dropdownItem.classList.add('dropdown-item');
            dropdownItem.tabIndex = 0; // Make the item focusable

            // Add class based on VAT status
            if (item.vatStatus === 'vatable') {
                dropdownItem.classList.add('vatable-item');
            } else {
                dropdownItem.classList.add('non-vatable-item');
            }

            // Calculate the total available stock from stockEntries
            const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);

            dropdownItem.innerHTML = `
            <div>${item.uniqueNumber || 'N/A'}</div>
            <div>${item.hscode || 'N/A'}</div>
            <div>${item.name}</div>
            <div>${item.category ? item.category.name : 'No Category'}</div>
            <div>${totalStock}</div> <!-- Display total available stock -->
            <div>${item.unit ? item.unit.name : ''}</div>
            <div>Rs.${item.price.toFixed()}</div>
            <div>Rs.${item.puPrice.toFixed()}</div>
        `;

            dropdownItem.addEventListener('click', () => addItemToBill(item, dropdownMenu));
            dropdownMenu.appendChild(dropdownItem);
        });

        // Show or hide the dropdown menu based on the number of items
        if (items.length > 0) {
            dropdownMenu.classList.add('show');
        } else {
            dropdownMenu.classList.remove('show');
        }
    }

    function addItemToBill(item, dropdownMenu) {
        const tbody = document.getElementById('items');
        const inputField = document.getElementById('itemSearch');

        if (!inputField.value.trim()) {
            return; // Do not add an item if the search field is blank
        }
        const tr = document.createElement('tr');
        tr.classList.add('item', item.vatStatus ? 'vatable-item' : 'non-vatable-item');

        // Calculate the serial number based on the number of rows already in the table
        const serialNumber = tbody.rows.length + 1;
        tr.innerHTML = `
            <td>${serialNumber}</td>
            <td>${item.uniqueNumber}</td>
        <td class="col-4">
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.name}
        </td>
        <td>
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.hscode}
        </td>
        <td><input type="number" name="items[${itemIndex}][quantity]" value="0" class="form-control item-quantity" id="quantity-${itemIndex}" min="1" step="any" oninput="updateItemTotal(this)" onkeydown="handleQuantityKeydown(event,${itemIndex})" onfocus="selectValue(this)"></td>
        <td>
            ${item.unit ? item.unit.name : ''}
            <input type="hidden" name="items[${itemIndex}][unit]" value="${item.unit ? item.unit._id : ''}">
        </td>
        <td><input type="number" name="items[${itemIndex}][price]" value="${item.price}" class="form-control item-price" id="price-${itemIndex}" step="any" oninput="updateItemTotal(this)" onkeydown="handlePriceKeydown(event, ${itemIndex})" onfocus="selectValue(this)"></td>
        <td class="item-amount">0.00</td>
        <td>
             <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="removeItem(this)">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
        <input type="hidden" name="items[${itemIndex}][vatStatus]" value="${item.vatStatus}">
    `;
        tbody.appendChild(tr);

        itemIndex++;
        calculateTotal();

        // Fetch and display last transactions for the added item
        fetchLastTransactions(item._id);

        // Hide the dropdown menu after selecting an item
        dropdownMenu.classList.remove('show');

        // Clear the input field
        inputField.value = '';

        // Focus on the quantity input field of the newly added row
        document.getElementById(`quantity-${itemIndex - 1}`).focus();
    }

    function removeItem(button) {
        const row = button.closest('tr');
        row.remove();
        calculateTotal();
    }

    function updateItemTotal(input) {
        const row = input.closest('tr');
        const quantity = parseFloat(row.querySelector('input.item-quantity').value) || 0;
        const price = parseFloat(row.querySelector('input.item-price').value) || 0;
        const amount = quantity * price;
        row.querySelector('.item-amount').textContent = amount.toFixed(2);
        calculateTotal();
    }

    function updateDiscountFromPercentage() {
        const subTotal = calculateSubTotal();
        const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
        const discountAmount = (subTotal * discountPercentage) / 100;
        document.getElementById('discountAmount').value = discountAmount.toFixed(2);
    }

    function updateDiscountFromAmount() {
        const subTotal = calculateSubTotal();
        const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
        const discountPercentage = (discountAmount / subTotal) * 100;
        document.getElementById('discountPercentage').value = discountPercentage.toFixed(2);
    }

    function calculateSubTotal() {
        const rows = document.querySelectorAll('#items tr.item');
        let subTotal = 0;

        rows.forEach(row => {
            const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
            const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value === 'true';

            subTotal += amount;
            if (vatStatus) {
                taxableAmount += amount;
                vatAmount += amount * 0.13; // VAT is 13%
            }
        });

        return subTotal;
    }

    function calculateTotal() {
        const rows = document.querySelectorAll('#items tr.item');
        let subTotal = calculateSubTotal();
        let vatAmount = 0;
        let totalTaxableAmount = 0;
        let totalNonTaxableAmount = 0;

        // Separate amounts for vatable and non-vatable items
        rows.forEach(row => {
            const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
            const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value;

            if (vatStatus === 'vatable') {
                totalTaxableAmount += amount;
            } else {
                totalNonTaxableAmount += amount;
            }
        });

        const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
        const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;

        // Calculate total amount before discount
        const totalAmountBeforeDiscount = totalTaxableAmount + totalNonTaxableAmount;

        // Apply discount proportionally to vatable and non-vatable items
        // const totalDiscount = (totalAmountBeforeDiscount * discountPercentage / 100) + discountAmount;
        const discountForTaxable = (totalTaxableAmount * discountPercentage / 100);
        const discountForNonTaxable = (totalNonTaxableAmount * discountPercentage / 100)

        const finalTaxableAmount = totalTaxableAmount - discountForTaxable;
        const finalNonTaxableAmount = totalNonTaxableAmount - discountForNonTaxable;

        // Calculate VAT only for vatable items
        const vatSelection = document.getElementById('isVatExempt').value;
        if (vatSelection === 'false' || vatSelection === 'all') {
            vatAmount = finalTaxableAmount * 0.13; // VAT is 13%
        } else {
            vatAmount = 0;
        }
        const roundOffAmount = parseFloat(document.getElementById('roundOffAmount').value) || 0;
        const totalAmount = finalTaxableAmount + finalNonTaxableAmount + vatAmount + roundOffAmount;

        document.getElementById('subTotal').textContent = subTotal.toFixed(2);
        document.getElementById('taxableAmount').textContent = finalTaxableAmount.toFixed(2);
        document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
        document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);

        const amountInWords = numberToWords(totalAmount) + ' Only.';
        document.getElementById('amountInWords').textContent = amountInWords;
    }


    function toggleCreditPartyOptions() {
        const paymentMode = document.getElementById('paymentMode').value;
        const creditPartyOptions = document.querySelectorAll('.credit-party');
        creditPartyOptions.forEach(option => {
            option.style.display = paymentMode === 'credit' ? 'block' : 'none';
        });
    }

    function toggleVatInputs() {
        const isVatExempt = document.getElementById('isVatExempt').value === 'true';
        const vatInputs = document.getElementById('vatInputs');
        vatInputs.style.display = isVatExempt ? 'none' : 'block';
        calculateTotal();
    }

    // function showPrintModal() {
    //     $('#printModal').modal('show');
    // }

    function submitBillForm(print) {
        shouldPrint = print;
        const billForm = document.getElementById('billForm');
        const saveButton = document.getElementById('saveBill');

        // Change button text and disable it
        saveButton.innerText = 'Saving...';
        saveButton.disabled = true;

        if (print) {
            const url = new URL(billForm.action);
            url.searchParams.append('print', 'true');
            billForm.action = url.toString();
        }

        // Simulate form submission (replace this with actual form submission logic)
        setTimeout(() => {
            billForm.submit();

            // Reset button text and enable it after submission
            saveButton.innerText = 'Save Bill';
            saveButton.disabled = false;
        }, 2000); // Simulating a delay; adjust or remove as needed
    }


    document.getElementById('billForm').addEventListener('submit', function (event) {
        if (!shouldPrint && event.submitter && event.submitter.innerText === 'Save & Print Bill') {
            event.preventDefault();
            // showPrintModal();
        }
    });
    function numberToWords(num) {
        const ones = [
            '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
            'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
            'Seventeen', 'Eighteen', 'Nineteen'
        ];

        const tens = [
            '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
        ];

        const scales = ['', 'Thousand', 'Million', 'Billion'];

        function convertHundreds(num) {
            let words = '';

            if (num > 99) {
                words += ones[Math.floor(num / 100)] + ' Hundred ';
                num %= 100;
            }

            if (num > 19) {
                words += tens[Math.floor(num / 10)] + ' ';
                num %= 10;
            }

            if (num > 0) {
                words += ones[num] + ' ';
            }

            return words.trim();
        }

        if (num === 0) return 'Zero';

        if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

        let words = '';

        for (let i = 0; i < scales.length; i++) {
            let unit = Math.pow(1000, scales.length - i - 1);
            let currentNum = Math.floor(num / unit);

            if (currentNum > 0) {
                words += convertHundreds(currentNum) + ' ' + scales[scales.length - i - 1] + ' ';
            }

            num %= unit;
        }

        return words.trim();
    }
    window.addEventListener('DOMContentLoaded', () => {
        toggleVatInputs();
        toggleCreditPartyOptions();
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('discountPercentage').addEventListener('input', function () {
            updateDiscountFromPercentage();
            calculateTotal();
        });

        document.getElementById('discountAmount').addEventListener('input', function () {
            updateDiscountFromAmount();
            calculateTotal();
        });

        document.getElementById('roundOffAmount').addEventListener('input', function () {
            calculateTotal();
        });

        calculateTotal();
    });

    async function shouldDisplayTransactions() {
        try {
            const response = await fetch(`/settings/get-display-transactions`);
            const { displayTransactions } = await response.json();
            return displayTransactions;
        } catch (error) {
            console.error('Error fetching settings:', error);
            return false;
        }
    }

    async function fetchLastTransactions(itemId) {
        // const itemId = select.value;
        const accountId = document.getElementById('account').value;
        const purchaseSalesType = document.getElementById('purchaseSalesType').value; // Ensure this element exists and has a value
        const transactionList = document.getElementById('transactionList');

        if (!purchaseSalesType) {
            console.error('Account Type is undefined. Please ensure it is set.');
            return;
        }

        try {

            const response = await fetch(`/api/transactions/${itemId}/${accountId}/${purchaseSalesType}`);
            const transactions = await response.json();
            // const { transactions, companyDateFormat } = await response.json();

            // Check if transactions are empty
            if (transactions.length === 0) {
                transactionList.innerHTML = '<p>No transactions to display.</p>';
                // Do not show the modal if there are no transactions
                return;
            }

            // Create table header
            let tableHtml = `
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Trans. Id</th>
                        <th>Date</th>
                        <th>Bill No.</th>
                        <th>Type</th>
                        <th>A/c Type</th>
                        <th>Pay.Mode</th>
                        <th>Qty.</th>
                        <th>Unit</th>
                        <th>S.price</th>
                    </tr>
                </thead>
                <tbody>
        `;

            // Add table rows for each transaction
            tableHtml += transactions.map(transaction => {
                return `
                <tr onclick="window.location.href='/bills/${transaction.billId._id}/print'" style="cursor: pointer;">
                    <td>${transaction._id}</td>
                    <td>${new Date(transaction.date).toLocaleDateString()}</td>
                    <td>${transaction.billNumber}</td>
                    <td>${transaction.type}</td>
                    <td>${transaction.purchaseSalesType}</td>
                    <td>${transaction.paymentMode}</td>
                    <td>${transaction.quantity}</td>
                    <td>${transaction.unit ? transaction.unit.name : 'N/A'}</td>
                    <td>Rs.${transaction.price}</td>
                </tr>
            `;
            }).join('');

            // Close table
            tableHtml += `
                </tbody>
            </table>
        `;

            // Set the innerHTML of the transaction list container
            transactionList.innerHTML = tableHtml;

            // Show the modal
            $('#transactionModal').modal('show');
        } catch (error) {
            console.error('Error fetching transactions:', error);
        }
    }
    async function handleFetchLastTransactions(itemId) {
        const displayTransactions = await shouldDisplayTransactions();
        if (displayTransactions) {
            await fetchLastTransactions(itemId);
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const itemSearchInput = document.getElementById('itemSearch'); // Initial focus on item search input
    });

    async function handleItemSearchKeydown(event) {
        const itemSearchInput = document.getElementById('itemSearch');
        const itemsTable = document.getElementById('itemsTable');
        const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

        if (itemSearchInput.value.length > 0) {
            if (event.key === 'Enter') {
                // Fetch and check if transactions should be displayed
                const displayTransactions = await shouldDisplayTransactions();

                // Only open the modal if displayTransactions is true
                if (displayTransactions) {
                    openModalAndFocusCloseButton();
                } else {
                    // document.getElementById('quantity').focus();
                    // const lastRow = document.querySelectorAll('.item');
                    // if (lastRow.length > 0) {
                    //     const lastQuantityInput = lastRow[lastRow.length - 1].querySelector('.item-quantity');
                    //     lastQuantityInput.focus();
                    // }
                    focusOnLastRow('item-quantity');
                }
            }
        } else if (itemSearchInput.value.length < 0 || itemsAvailable) {
            if (event.key === 'Enter') {
                const submitBillForm = document.getElementById('saveBill')
                submitBillForm.focus();
            }
        }
    }
    function openModalAndFocusCloseButton() {
        // Open the modal
        $('#transactionModal').modal('show');

        // Wait until the modal is fully shown before focusing the close button
        $('#transactionModal').on('shown.bs.modal', function () {
            document.getElementById('closeModalButton').focus();
        });
    }

    function handleCloseButtonKeydown(event) {
        if (event.key === 'Enter') {
            // Close the modal (optional, depending on your implementation)
            $('#transactionModal').modal('hide');

            // Focus on the quantity input field
            document.getElementById(`quantity-${itemIndex - 1}`).focus();
            // focusOnLastRow('quantity');
        }
    }

    function handleQuantityKeydown(event) {
        if (event.key === 'Enter') {
            // Focus on the price input field
            // document.getElementById('price').focus();
            // document.getElementById(`price-${itemIndex}`).focus();
            const priceInput = document.getElementById(`price-${itemIndex - 1}`);
            priceInput.focus();
            priceInput.select();

        }
    }

    function handlePriceKeydown(event) {
        if (event.key === 'Enter') {
            // Focus back on the item search input field
            const itemSearchInput = document.getElementById('itemSearch');
            itemSearchInput.focus();
            itemSearchInput.select();

        }
    }

    function selectValue(input) {
        input.select(); // Select the value of the input field when it is focused
    }

    function focusOnLastRow(fieldClass) {
        const rows = document.querySelectorAll('.item');
        if (rows.length > 0) {
            const lastRow = rows[rows.length - 1];
            const inputField = lastRow.querySelector(`.${fieldClass}`);
            if (inputField) {
                inputField.focus();
                inputField.select();
            }
        }
    }


    //Handle scape buttons
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            event.preventDefault(); // Prevent default escape behavior
            var exitModal = new bootstrap.Modal(document.getElementById('exitConfirmationModal'));
            exitModal.show();
        }
    });

    // Handle the exit confirmation
    document.getElementById('confirmExit').addEventListener('click', function () {
        // Redirect to the home page
        window.location.href = '/wholesellerDashboard'; // Change '/' to your home page URL
    });

</script>