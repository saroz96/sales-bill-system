<%- include('../layouts/boilerplate', { title: 'Create New User', body: '' }) %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<style>
  .user-container {
    max-width: 700px;
    margin: 2rem auto;
  }
  
  .user-card {
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: none;
    overflow: hidden;
  }
  
  .card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #eee;
    font-weight: 600;
    padding: 1.5rem;
  }
  
  .card-title {
    margin: 0;
    font-size: 1.5rem;
    color: #333;
  }
  
  .form-control, .form-select {
    padding: 0.75rem 1rem;
    border-radius: 8px;
    border: 1px solid #ced4da;
    transition: all 0.3s;
  }
  
  .form-control:focus, .form-select:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  }
  
  .password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #6c757d;
  }
  
  .password-toggle:hover {
    color: #495057;
  }
  
  .password-strength {
    height: 5px;
    margin-top: 5px;
    border-radius: 5px;
    transition: all 0.3s;
  }
  
  .password-requirements {
    font-size: 0.85rem;
    color: #6c757d;
    margin-top: 0.5rem;
  }
  
  .requirement {
    display: flex;
    align-items: center;
    margin-bottom: 0.25rem;
  }
  
  .requirement i {
    margin-right: 5px;
    font-size: 0.75rem;
  }
  
  .valid {
    color: #28a745;
  }
  
  .invalid {
    color: #dc3545;
  }
  
  .btn-primary {
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    border-radius: 8px;
    background-color: #0d6efd;
    border: none;
    transition: all 0.3s;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
    transform: translateY(-1px);
  }
  
  .btn-secondary {
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    border-radius: 8px;
    transition: all 0.3s;
  }
  
  .btn-secondary:hover {
    transform: translateY(-1px);
  }
  
  .input-group {
    position: relative;
  }
  
  .animate__animated {
    animation-duration: 0.5s;
  }
</style>

<div class="container user-container">
  <div class="card user-card animate__animated animate__fadeInUp">
    <div class="card-header text-center">
      <h2 class="card-title"><i class="fas fa-user-plus me-2"></i>Create a New User</h2>
    </div>
    <div class="card-body p-4">
      <form id="userForm" action="/admin/create-user/new" method="POST">
        <!-- Name -->
        <div class="mb-4">
          <label for="name" class="form-label">Full Name</label>
          <input type="text" class="form-control" id="name" name="name" required autofocus>
        </div>
        
        <!-- Email -->
        <div class="mb-4">
          <label for="email" class="form-label">Email Address</label>
          <input type="email" class="form-control" id="email" name="email" required>
        </div>
        
        <!-- Password -->
        <div class="mb-3">
          <label for="password" class="form-label">Password</label>
          <div class="input-group">
            <input type="password" class="form-control" id="password" name="password" required
                   pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" 
                   title="Must contain at least 8 characters, including uppercase, lowercase and numbers">
            <span class="password-toggle" onclick="togglePassword('password')">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="password-strength" id="passwordStrength"></div>
          <div class="password-requirements">
            <div class="requirement" id="lengthReq">
              <i class="fas fa-circle"></i>
              <span>At least 8 characters</span>
            </div>
            <div class="requirement" id="uppercaseReq">
              <i class="fas fa-circle"></i>
              <span>At least 1 uppercase letter</span>
            </div>
            <div class="requirement" id="lowercaseReq">
              <i class="fas fa-circle"></i>
              <span>At least 1 lowercase letter</span>
            </div>
            <div class="requirement" id="numberReq">
              <i class="fas fa-circle"></i>
              <span>At least 1 number</span>
            </div>
          </div>
        </div>
        
        <!-- Confirm Password -->
        <div class="mb-4">
          <label for="password2" class="form-label">Confirm Password</label>
          <div class="input-group">
            <input type="password" class="form-control" id="password2" name="password2" required>
            <span class="password-toggle" onclick="togglePassword('password2')">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="invalid-feedback" id="confirmPasswordFeedback">
            Passwords do not match
          </div>
        </div>
        
        <!-- Role -->
        <div class="mb-4">
          <label for="role" class="form-label">User Role</label>
          <select class="form-select" id="role" name="role" required>
            <option value="Sales">Sales Department</option>
            <option value="Purchase">Purchase Department</option>
            <option value="Supervisor">Supervisor</option>
          </select>
        </div>
        
        <div class="d-flex justify-content-between">
          <a href="/admin/users/list" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-2"></i>Back to User List
          </a>
          <button type="submit" class="btn btn-primary" id="submitBtn">
            <i class="fas fa-user-plus me-2"></i>Create User
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const password = document.getElementById('password');
    const confirmPassword = document.getElementById('password2');
    const passwordStrength = document.getElementById('passwordStrength');
    const submitBtn = document.getElementById('submitBtn');
    
    // Password toggle functionality
    window.togglePassword = function(inputId) {
      const input = document.getElementById(inputId);
      const icon = input.nextElementSibling.querySelector('i');
      
      if (input.type === 'password') {
        input.type = 'text';
        icon.classList.replace('fa-eye', 'fa-eye-slash');
      } else {
        input.type = 'password';
        icon.classList.replace('fa-eye-slash', 'fa-eye');
      }
    }
    
    // Password strength checker
    password.addEventListener('input', function() {
      const pass = this.value;
      let strength = 0;
      
      // Check length
      if (pass.length >= 8) {
        strength += 1;
        document.getElementById('lengthReq').classList.add('valid');
        document.getElementById('lengthReq').classList.remove('invalid');
      } else {
        document.getElementById('lengthReq').classList.add('invalid');
        document.getElementById('lengthReq').classList.remove('valid');
      }
      
      // Check uppercase
      if (/[A-Z]/.test(pass)) {
        strength += 1;
        document.getElementById('uppercaseReq').classList.add('valid');
        document.getElementById('uppercaseReq').classList.remove('invalid');
      } else {
        document.getElementById('uppercaseReq').classList.add('invalid');
        document.getElementById('uppercaseReq').classList.remove('valid');
      }
      
      // Check lowercase
      if (/[a-z]/.test(pass)) {
        strength += 1;
        document.getElementById('lowercaseReq').classList.add('valid');
        document.getElementById('lowercaseReq').classList.remove('invalid');
      } else {
        document.getElementById('lowercaseReq').classList.add('invalid');
        document.getElementById('lowercaseReq').classList.remove('valid');
      }
      
      // Check number
      if (/\d/.test(pass)) {
        strength += 1;
        document.getElementById('numberReq').classList.add('valid');
        document.getElementById('numberReq').classList.remove('invalid');
      } else {
        document.getElementById('numberReq').classList.add('invalid');
        document.getElementById('numberReq').classList.remove('valid');
      }
      
      // Update strength meter
      if (strength === 0) {
        passwordStrength.style.width = '0%';
        passwordStrength.style.backgroundColor = '#dc3545';
      } else if (strength === 1) {
        passwordStrength.style.width = '25%';
        passwordStrength.style.backgroundColor = '#dc3545';
      } else if (strength === 2) {
        passwordStrength.style.width = '50%';
        passwordStrength.style.backgroundColor = '#fd7e14';
      } else if (strength === 3) {
        passwordStrength.style.width = '75%';
        passwordStrength.style.backgroundColor = '#ffc107';
      } else if (strength === 4) {
        passwordStrength.style.width = '100%';
        passwordStrength.style.backgroundColor = '#28a745';
      }
    });
    
    // Password confirmation check
    confirmPassword.addEventListener('input', function() {
      if (this.value !== password.value) {
        this.classList.add('is-invalid');
        document.getElementById('confirmPasswordFeedback').style.display = 'block';
        submitBtn.disabled = true;
      } else {
        this.classList.remove('is-invalid');
        document.getElementById('confirmPasswordFeedback').style.display = 'none';
        submitBtn.disabled = false;
      }
    });
    
    // Form validation
    document.getElementById('userForm').addEventListener('submit', function(e) {
      if (password.value !== confirmPassword.value) {
        e.preventDefault();
        confirmPassword.classList.add('is-invalid');
        document.getElementById('confirmPasswordFeedback').style.display = 'block';
        confirmPassword.focus();
      }
    });
  });
</script>