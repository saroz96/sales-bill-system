const express = require('express');
const router = express.Router();

//npm install pdfkit fs
const PDFDocument = require('pdfkit');
//npm install pdfkit fs

const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const Item = require('../models/Item');
const SalesBill = require('../models/SalesBill');
const Transaction = require('../models/Transaction');
const { ensureAuthenticated, ensureCompanySelected } = require('../middleware/auth');
const BillCounter = require('../models/billCounter');
const Account = require('../models/Account');
const Settings = require('../models/Settings');
const Company = require('../models/Company');

// const switchCompany = require('../middleware/switchCompany');
// const setCurrentCompany = require('../middleware/setCurrentCompany');

// router.use('/bills', ensureAuthenticated,);

// router.get('/bills', (req, res) => {
//     if (!req.company) {
//         return res.status(400).json({ error: 'No company selected' });
//     }
//     res.render('sales-bills/bills', { company: req.company });
// });

// Fetch all sales bills
router.get('/bills-list', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    const companyId = req.session.currentCompany;

    const bills = await SalesBill.find({ company: companyId }).populate('account').populate('items.item').populate('user');
    res.render('sales-bills/allbills', { bills, user: req.user });
});

// Fetch items based on search query
router.get('/api/items/search', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    try {
        const companyId = req.session.currentCompany;
        const searchTerm = req.query.q;
        const items = await Item.find({ name: new RegExp(searchTerm, 'i'), company: companyId }).limit(10).populate('category').populate('unit'); // Limit results for performance
        res.json({ items: items });
    } catch (err) {
        res.status(500).send('Server error');
    }
});

// Sales Bill routes
router.get('/bills', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    const companyId = req.session.currentCompany;
    const accounts = await Account.find({ company: companyId });
    const items = await Item.find({ company: companyId }).populate('category').populate('unit');
    const bills = await SalesBill.find({ company: companyId }).populate('account').populate('items.item');

    // Get the next bill number
    const billCounter = await BillCounter.findOne({ company: companyId });
    const nextBillNumber = billCounter ? billCounter.count + 1 : 1;
    res.render('sales-bills/bills', {
        company: companyId, accounts: accounts, items: items, bills: bills, nextBillNumber: nextBillNumber,
        user: req.user, currentCompanyName: req.session.currentCompanyName
    });
});

// POST route to handle sales bill creation

router.post('/bills', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    try {
        const { account, items, vatPercentage, billDate, isVatExempt, discountPercentage, paymentMode, roundOffAmount: manualRoundOffAmount } = req.body;
        const companyId = req.session.currentCompany;
        const userId = req.user._id;
        console.log('Request Body:', req.body);
        // Find the counter for the company
        let billCounter = await BillCounter.findOne({ company: companyId });
        if (!billCounter) {
            billCounter = new BillCounter({ company: companyId });
        }
        // Increment the counter
        billCounter.count += 1;
        await billCounter.save();

        const isVatExemptBool = isVatExempt === 'true' || isVatExempt === true;
        const discount = parseFloat(discountPercentage) || 0;

        let subTotal = 0;
        let vatAmount = 0;
        let hasVatableItems = false;
        let hasNonVatableItems = false;

        if (!companyId) {
            return res.status(400).json({ error: 'Company ID is required' });
        }
        const accounts = await Account.findOne({ _id: account, company: companyId });
        if (!accounts) {
            return res.status(400).json({ error: 'Invalid account for this company' });
        }

        // Validate each item before processing
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const product = await Item.findById(item.item);

            if (!product) {
                req.flash('error', `Item with id ${item.item} not found`);
                return res.redirect('/bills');
            }

            const itemTotal = parseFloat(item.price) * parseFloat(item.quantity, 10);
            subTotal += itemTotal;

            if (product.vatStatus === 'vatable') {
                hasVatableItems = true;
            } else {
                hasNonVatableItems = true;
            }

            // Check stock quantity
            if (product.stock < item.quantity) {
                req.flash('error', `Not enough stock for item: ${product.name}. Available: ${product.stock}, Required: ${item.quantity}`);
                return res.redirect('/bills');
            }
        }

        // Check validation conditions after processing all items
        if (isVatExemptBool && hasVatableItems) {
            req.flash('error', 'Cannot save VAT exempt bill with vatable items');
            return res.redirect('/bills');
        }

        if (!isVatExemptBool && hasNonVatableItems) {
            req.flash('error', 'Cannot save bill with non-vatable items when VAT is applied');
            return res.redirect('/bills');
        }

        // Generate unique bill number
        const lastBill = await SalesBill.findOne().sort({ billNumber: -1 });
        const billNumber = lastBill ? lastBill.billNumber + 1 : 1;

        // Calculate totals
        const discountAmount = (subTotal * discount) / 100;
        const taxableAmount = subTotal - discountAmount;

        if (!isVatExemptBool) {
            vatAmount = (taxableAmount * vatPercentage) / 100;
        }

        let totalAmount = taxableAmount + vatAmount;
        let finalAmount = totalAmount;

        // Check if round off is enabled in settings
        const settings = await Settings.findOne(); // Assuming you have a single settings document

        // Handle case where settings is null
        if (!settings) {
            console.log('No settings found, using default settings or handling as required');
            settings = { roundOff: false }; // Provide default settings or handle as needed
        }
        let roundOffAmount = 0;
        if (settings.roundOff) {
            finalAmount = Math.round(finalAmount.toFixed(2)); // Round off final amount
            roundOffAmount = finalAmount - totalAmount;
        }
        // let roundOffAmount = finalAmount - totalAmount;

        if (manualRoundOffAmount && !settings.roundOff) {
            roundOffAmount = parseFloat(manualRoundOffAmount);
            finalAmount = totalAmount + roundOffAmount;
        }

        // if (roundOffAmount) {
        //     finalAmount += parseFloat(roundOffAmount);
        // }
        // Calculate roundOffAmount

        // Create new bill
        const newBill = new SalesBill({
            billNumber: billCounter.count,
            account,
            items: [], // We'll update this later
            isVatExempt: isVatExemptBool,
            vatPercentage: isVatExemptBool ? 0 : vatPercentage,
            subTotal,
            discountPercentage: discount,
            discountAmount,
            taxableAmount,
            vatAmount,
            // roundOffAmount: roundOffAmount ? parseFloat(roundOffAmount) : 0,
            totalAmount: finalAmount,
            roundOffAmount: roundOffAmount,
            // roundOffApplied: settings.roundOff,
            paymentMode,
            date: new Date(billDate),
            company: companyId,
            user: userId
        });

        // Create transactions
        let previousBalance = 0;
        const accountTransaction = await Transaction.findOne({ account: account }).sort({ transactionDate: -1 });
        if (accountTransaction) {
            previousBalance = accountTransaction.balance;
        }

        // Create transactions
        const billItems = await Promise.all(items.map(async item => {
            const product = await Item.findById(item.item);

            const transaction = new Transaction({
                company: companyId,
                item: product._id,
                account: account,
                billNumber: billNumber,
                quantity: item.quantity,
                price: item.price,
                transactionDate: new Date(billDate),
                type: 'Sale',
                billId: newBill._id,  // Set billId to the new bill's ID
                accountType: 'Sales',
                debit: finalAmount,
                paymentMode,
                credit: 0,
                balance: previousBalance - finalAmount, // Calculate balance
            });

            await transaction.save();

            // Decrement stock quantity
            product.stock -= item.quantity;
            await product.save();

            return {
                item: product._id,
                quantity: item.quantity,
                price: item.price,
                vatStatus: product.vatStatus
            };
        }));

        // Update bill with items
        newBill.items = billItems;
        console.log(newBill);
        await newBill.save();

        if (req.query.print === 'true') {
            // Redirect to the print route
            res.redirect(`/bills/${newBill._id}/print`);
            // res.json({ success: true, billId: newBill._id });
        } else {
            // Redirect to the bills list or another appropriate page
            req.flash('success', 'Bill saved successfully!');
            res.redirect('/bills');
        }
    } catch (error) {
        console.error("Error creating bill:", error);
        req.flash('error', 'Error creating bill');
        res.redirect('/bills');
    }
});

router.get('/bills/:id/print', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    const currentCompanyName = req.session.currentCompanyName;
    const companyId = req.session.currentCompany;
    console.log("Company ID from session:", companyId); // Debugging line
    try {
        // const companyId = req.session.currentCompanyId; // Assuming company ID is stored in session
        const currentCompany = await Company.findById(new ObjectId(companyId)).populate({
            path: 'account',
            populate: { path: 'amount' }
        });
        // Assuming the account is populated within the currentCompany
        const account = currentCompany.account;
        const openingBalance = account.openingBalance || 0;
        console.log("Current Company:", currentCompany); // Debugging line

        if (!currentCompany) {
            req.flash('error', 'Company not found');
            return res.redirect('/bills');
        }

        const billId = req.params.id;
        const bill = await SalesBill.findById(billId).populate({ path: 'account' }).populate('items.item');

        if (!bill) {
            req.flash('error', 'Bill not found');
            return res.redirect('/bills');
        }

        // Populate unit for each item in the bill
        for (const item of bill.items) {
            await item.item.populate('unit');
        }

        const firstBill = !bill.firstPrinted; // Inverse logic based on your implementation

        if (firstBill) {
            bill.firstPrinted = true;
            await bill.save();
        }

        // Fetch the latest transaction for the current company and bill
        const latestTransaction = await Transaction.findOne({
            company: new ObjectId(companyId),
            billId: new ObjectId(billId)
        }).sort({ transactionDate: -1 });

        let lastBalance = 0;
        let balanceLabel = '';

        // const lastCreditBalance = latestTransaction ? latestTransaction.balance : 0;
        if (latestTransaction) {
            lastBalance = Math.abs(latestTransaction.balance || 0); // Ensure balance is positive

            // Determine if the amount is receivable (dr) or payable (cr)
            if (latestTransaction.debit) {
                balanceLabel = 'Dr'; // Receivable amount
            } else if (latestTransaction.credit) {
                balanceLabel = 'Cr'; // Payable amount
            }
        }
        const finalBalance = openingBalance + lastBalance;
        res.render('sales-bills/print', { bill, currentCompanyName, currentCompany, firstBill, lastBalance: finalBalance, balanceLabel });
    } catch (error) {
        console.error("Error fetching bill for printing:", error);
        req.flash('error', 'Error fetching bill for printing');
        res.redirect('/bills');
    }
});

// Route to generate PDF
router.get('/bills/:id/pdf', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    try {
        const billId = req.params.id;
        const companyId = req.session.currentCompany;
        const currentCompanyName = req.session.currentCompanyName;

        // Fetch the bill data with populated account and item details
        const bill = await SalesBill.findOne({ _id: billId, company: companyId })
            .populate('account')
            .populate('items.item');

        if (!bill) {
            req.flash('error', 'Bill not found');
            return res.redirect('/bills');
        }

        // Populate unit for each item in the bill
        for (const item of bill.items) {
            await item.item.populate('unit');
        }

        // Log the bill object for debugging
        console.log('Bill Object:', bill);

        // Create a new PDF document with A4 size
        const doc = new PDFDocument({ size: 'A4', margin: 50 });
        const filename = `bill_${bill.billNumber}.pdf`;

        // Set HTTP headers for PDF download
        res.setHeader('Content-disposition', `attachment; filename="${filename}"`);
        res.setHeader('Content-type', 'application/pdf');

        // Pipe the PDF content to the response stream
        doc.pipe(res);

        // Add content to the PDF
        doc.fontSize(20).text('Tax Invoice', { underline: true, align: 'center' });
        doc.fontSize(16).text(`${currentCompanyName}`, { align: 'center' });
        doc.moveDown();
        doc.fontSize(12).text(`Date: ${new Date(bill.date).toLocaleDateString()}`, { align: 'right' });

        // Add payment mode and invoice number on the same row
        doc.fontSize(12);
        const paymentModeText = `Payment Mode: ${bill.paymentMode}`;
        const invoiceNumberText = `Invoice No: ${bill.billNumber}`;
        const pageWidth = doc.page.width - doc.options.margin * 3.25; // Page width without margins

        const paymentModeWidth = doc.widthOfString(paymentModeText);
        const invoiceNumberWidth = doc.widthOfString(invoiceNumberText);

        doc.text(paymentModeText, { continued: true, align: 'left' })
            .text(invoiceNumberText, pageWidth - invoiceNumberWidth, doc.y, { align: 'left' });
        doc.moveDown();

        // Company details section
        doc.fontSize(12).text('A/c Details:', { underline: true });
        doc.text(`${bill.account.name}`, { align: 'left' });

        // Add items table
        const tableTop = doc.y + 15;
        const itemHeaders = [
            { label: 'S.N.', align: 'left', width: 50 }, // Serial Number (S.N.) column
            { label: 'Description of Goods', align: 'left', width: 150 },
            { label: 'Quantity', align: 'right', width: 80 },
            { label: 'Unit', align: 'right', width: 80 },
            { label: 'Price (Rs.)', align: 'right', width: 80 },
            { label: 'Total (Rs.)', align: 'right', width: 80 },
        ];

        let currentPosition = 50; // Adjust starting X position if needed

        // Draw table header
        let y = tableTop;
        itemHeaders.forEach(header => {
            doc.text(header.label, currentPosition, y, { width: header.width, align: header.align });
            currentPosition += header.width;
        });

        y += 15;
        doc.moveTo(50, y)
            .lineTo(570, y)
            .stroke();

        // Draw table rows
        let serialNumber = 1;
        bill.items.forEach(item => {
            currentPosition = 50;
            y += 25;
            doc.text(serialNumber.toString(), currentPosition, y, { width: itemHeaders[0].width, align: 'left' });
            currentPosition += itemHeaders[0].width;
            doc.text(item.item.name, currentPosition, y, { width: itemHeaders[1].width, align: 'left' });
            currentPosition += itemHeaders[1].width;
            doc.text(item.quantity, currentPosition, y, { width: itemHeaders[2].width, align: 'right' });
            currentPosition += itemHeaders[2].width;
            doc.text(item.item.unit ? item.item.unit.name : '', currentPosition, y, { width: itemHeaders[3].width, align: 'right' });
            currentPosition += itemHeaders[3].width;
            doc.text(item.price.toFixed(2), currentPosition, y, { width: itemHeaders[4].width, align: 'right' });
            currentPosition += itemHeaders[4].width;
            doc.text((item.quantity * item.price).toFixed(2), currentPosition, y, { width: itemHeaders[5].width, align: 'right' });
            serialNumber++;
        });

        y += 15;
        doc.moveTo(50, y)
            .lineTo(570, y)
            .stroke();

        // Calculate remaining space on the page
        // const remainingSpace = doc.page.height - y - 50; // 50 is the bottom margin

        // if (remainingSpace > 100) { // Ensure there's enough space for totals
        //     y = doc.page.height - 100;
        // }

        // Add totals at the bottom of the page if space is available
        doc.y = y + 15;
        // y += 15;
        // doc.moveTo(50, y)
        //     .lineTo(570, y)
        //     .stroke();
        const subTotalText = `Sub-Total: Rs.${bill.subTotal.toFixed(2)}`;
        const discountPercentageText = `Discount ${bill.discountPercentage.toFixed(2)}% : ${bill.discountAmount.toFixed(2)}`;
        const taxableAmountText = `Taxable Amount : ${bill.taxableAmount.toFixed(2)}`;
        const vatText = !bill.isVatExempt ? `VAT (${bill.vatPercentage}%): Rs.${(bill.totalAmount * bill.vatPercentage / 100).toFixed(2)}` : '';
        const totalText = !bill.isVatExempt ? `Net Total: Rs.${bill.totalAmount.toFixed(2)}` : `Net Total: Rs.${bill.totalAmount.toFixed(2)}`;

        const subTotalWidth = doc.widthOfString(subTotalText);
        const discountPercentageWidth = doc.widthOfString(discountPercentageText);
        const taxableAmountWidth = doc.widthOfString(taxableAmountText);
        const vatWidth = doc.widthOfString(vatText);
        const totalWidth = doc.widthOfString(totalText);

        const totalRowStartX = doc.page.width - doc.options.margin - totalWidth - 50;

        doc.fontSize(12).text(subTotalText, totalRowStartX, doc.y + 10, { align: 'right' });
        doc.fontSize(12).text(discountPercentageText, totalRowStartX, doc.y + 10, { align: 'right' });
        doc.fontSize(12).text(taxableAmountText, totalRowStartX, doc.y + 5, { align: 'right' });
        doc.fontSize(12).text(vatText, totalRowStartX, doc.y + 10, { align: 'right' });
        // y += 100;
        // doc.moveTo(50, y)
        //     .lineTo(570, y)
        //     .stroke();
        doc.fontSize(12).text(totalText, totalRowStartX, doc.y + 10, { align: 'right' });
        y += 200;
        doc.moveTo(50, y)
            .lineTo(570, y)
            .stroke();

        // Convert amount to words function
        const numberToWords = (num) => {
            const ones = [
                '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
                'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
                'Seventeen', 'Eighteen', 'Nineteen'
            ];

            const tens = [
                '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
            ];

            const scales = ['', 'Thousand', 'Lakh', 'Crore'];

            function convertHundreds(num) {
                let words = '';

                if (num > 99) {
                    words += ones[Math.floor(num / 100)] + ' Hundred ';
                    num %= 100;
                }

                if (num > 19) {
                    words += tens[Math.floor(num / 10)] + ' ';
                    num %= 10;
                }

                if (num > 0) {
                    words += ones[num] + ' ';
                }

                return words.trim();
            }

            function convertSection(num) {
                let words = '';
                if (num > 0) {
                    words = convertHundreds(num) + ' ';
                }
                return words;
            }

            if (num === 0) return 'Zero Rupees and Zero Paisa Only';

            if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

            let rupees = Math.floor(num);
            let paise = Math.round((num - rupees) * 100);

            // Rounding off logic
            if (paise > 50) {
                rupees += 1;
                paise = 0;
            }

            let words = '';

            for (let i = scales.length - 1; i >= 0; i--) {
                let unit = Math.pow(100, i + 1);
                if (rupees >= unit) {
                    words += convertSection(Math.floor(rupees / unit)) + scales[i] + ' ';
                    rupees %= unit;
                }
            }
            words += convertSection(rupees) + ' Rupees';

            if (paise > 0) {
                words += ' and ' + convertSection(paise) + ' Paisa';
            } else {
                words += ' and Zero Paisa';
            }

            words += ' Only';

            return words.trim();
        };

        doc.moveDown();
        doc.text(`In Words: ${numberToWords(bill.totalAmount)}`, 50, doc.y, { align: 'left' });

        // Finalize the PDF and end the stream
        doc.end();

    } catch (error) {
        console.error("Error generating PDF:", error);
        req.flash('error', 'Error generating PDF');
        res.redirect('/bills');
    }
});
// GET route to fetch statement
router.get('/statement', ensureCompanySelected, async (req, res) => {
    try {
        const companyId = req.session.currentCompany;
        const accounts = await Account.find({ company: companyId });
        const selectedCompany = req.query.account || '';
        const fromDate = req.query.fromDate ? new Date(req.query.fromDate) : null;
        const toDate = req.query.toDate ? new Date(req.query.toDate) : null;
        const paymentMode = req.query.paymentMode || 'all'; // New parameter for payment mode
        const currentCompanyName = req.session.currentCompanyName;

        if (!selectedCompany) {
            return res.render('statements/statement', { statement: [], accounts, selectedCompany: null, fromDate: '', toDate: '', paymentMode });
        }

        // Fetch company details including opening balance and opening balance date
        const account = await Account.findById(selectedCompany);

        if (!account) {
            return res.status(404).json({ error: 'Company not found' });
        }

        let query = { account: selectedCompany };

        // Filter by payment mode
        if (paymentMode !== 'all') {
            query.paymentMode = paymentMode;
        }

        // Fetch all transactions for the company to calculate the final balance
        const allTransactions = await Transaction.find(query).sort({ transactionDate: 1 });

        // Calculate the final balance based on all transactions
        let finalBalance = paymentMode !== 'cash' && account.openingBalance.type === 'Dr' ? account.openingBalance.amount : -account.openingBalance.amount;
        allTransactions.forEach(tx => {
            finalBalance += (tx.debit || 0) - (tx.credit || 0);
        });

        // Build the query to filter transactions within the date range
        if (fromDate && toDate) {
            query.transactionDate = { $gte: fromDate, $lte: toDate };
        } else if (fromDate) {
            query.transactionDate = { $gte: fromDate };
        } else if (toDate) {
            query.transactionDate = { $lte: toDate };
        }

        // Fetch filtered transactions within the date range
        const filteredTransactions = await Transaction.find(query).sort({ transactionDate: 1 });

        // Calculate the opening balance based on opening balance date and filtered transactions
        const openingBalance = paymentMode !== 'cash' ? calculateOpeningBalance(account, allTransactions, fromDate) : 0;

        // Prepare statement with opening balance row and calculate totals for filtered transactions
        const { statement, totalDebit, totalCredit } = prepareStatementWithOpeningBalanceAndTotals(openingBalance, filteredTransactions, fromDate, paymentMode);

        res.render('statements/statement', {
            statement, accounts, selectedCompany, account, fromDate: req.query.fromDate, toDate: req.query.toDate, paymentMode,
            company: companyId, totalDebit, totalCredit, finalBalance, currentCompanyName
        });
    } catch (error) {
        console.error("Error fetching statement:", error);
        res.status(500).json({ error: 'Error fetching statement' });
    }
});

// Function to calculate opening balance based on opening balance date
function calculateOpeningBalance(account, transactions, fromDate) {
    const openingBalanceDate = fromDate || account.openingBalanceDate || new Date('July 17, 2023'); // Use fromDate if available
    let openingBalance = account.openingBalance.type === 'Dr' ? account.openingBalance.amount : -account.openingBalance.amount;

    transactions.forEach(tx => {
        if (tx.transactionDate < openingBalanceDate) {
            openingBalance += (tx.debit || 0) - (tx.credit || 0);
        }
    });

    return openingBalance;
}

// Function to prepare statement with opening balance row and calculate totals
function prepareStatementWithOpeningBalanceAndTotals(openingBalance, transactions, fromDate, toDate, paymentMode) {
    let balance = openingBalance;
    let totalDebit = paymentMode !== 'cash' && openingBalance > 0 ? openingBalance : 0;
    let totalCredit = paymentMode !== 'cash' && openingBalance < 0 ? -openingBalance : 0;

    const statement = paymentMode !== 'cash' ? [
        {
            date: fromDate ? fromDate.toISOString().split('T')[0] : 'July 17, 2023', // Use fromDate if available
            type: '',
            billNumber: '',
            paymentMode: '',
            accountType: 'Opening Balance',
            debit: openingBalance > 0 ? openingBalance : null,
            credit: openingBalance < 0 ? -openingBalance : null,
            balance: formatBalance(openingBalance)
        }
    ] : [];
    transactions.forEach(tx => {
        balance += (tx.debit || 0) - (tx.credit || 0);
        totalDebit += tx.debit || 0;
        totalCredit += tx.credit || 0;
        statement.push({
            date: tx.transactionDate.toISOString().split('T')[0],
            type: tx.type,
            billId: tx.billId, // Ensure this is set correctly
            billNumber: tx.billNumber,
            paymentMode: tx.paymentMode,
            accountType: tx.accountType,
            debit: tx.debit,
            credit: tx.credit,
            balance: formatBalance(balance)
        });
    });

    statement.push({
        date: Date.now(),
        type: '',
        billNumber: '',
        accountType: 'Total',
        debit: totalDebit,
        credit: totalCredit,
        balance: formatBalance(balance)
    });

    return { statement, totalDebit, totalCredit, finalBalance: balance };
}

function formatBalance(amount) {
    return amount > 0 ? `${amount.toFixed(2)} Dr` : `${(-amount).toFixed(2)} Cr`;
}


// GET route to generate PDF statement
router.get('/statement/pdf', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    try {
        const companyId = req.session.currentCompany;
        const selectedCompany = req.query.account;
        const fromDate = req.query.fromDate ? new Date(req.query.fromDate) : null;
        const toDate = req.query.toDate ? new Date(req.query.toDate) : null;
        const paymentMode = req.query.paymentMode || 'all'; // New parameter for payment mode
        const currentCompanyName = req.session.currentCompanyName;

        if (!selectedCompany) {
            req.flash('error', 'No company selected');
            return res.redirect('/statement');
        }

        let query = { account: selectedCompany };

        // Filter by payment mode
        if (paymentMode !== 'all') {
            query.paymentMode = paymentMode;
        }

        const transactions = await Transaction.find(query).sort({ transactionDate: 1 });

        // Fetch company details including opening balance and opening balance date
        const account = await Account.findById(selectedCompany);

        if (!account) {
            req.flash('error', 'Company not found');
            return res.redirect('/statement');
        }

        // Calculate the opening balance based on opening balance date
        const openingBalance = paymentMode !== 'cash' ? calculateOpeningBalance(account, transactions, fromDate) : 0;

        // Filter transactions within the date range
        if (fromDate && toDate) {
            query.transactionDate = { $gte: fromDate, $lte: toDate };
        } else if (fromDate) {
            query.transactionDate = { $gte: fromDate };
        } else if (toDate) {
            query.transactionDate = { $lte: toDate };
        }

        const filteredTransactions = await Transaction.find(query).sort({ transactionDate: 1 });

        const doc = new PDFDocument({ margin: 40, size: 'A4' });
        const filename = `statement_${account.name.replace(/ /g, '_')}.pdf`;

        res.setHeader('Content-disposition', `attachment; filename=${filename}`);
        res.setHeader('Content-type', 'application/pdf');

        doc.pipe(res);

        doc.fontSize(25).text('Financial Statement', { align: 'center' }).moveDown(0.5);
        doc.fontSize(20).text(`${currentCompanyName}`, { align: 'center' }).moveDown(0.5);

        doc.fontSize(10).text(`A/c : ${account.name}       Payment Mode: ${paymentMode.charAt(0).toUpperCase() + paymentMode.slice(1)}       From: ${fromDate ? fromDate.toLocaleDateString() : 'N/A'} to ${toDate ? toDate.toLocaleDateString() : 'N/A'}`);

        doc.moveDown();

        // Table Header
        const tableTop = 150;
        const rowHeight = 20;
        const marginLeft = 10;

        doc.fontSize(12).text('Date', marginLeft, tableTop);
        doc.text('Type', marginLeft + 80, tableTop);
        doc.text('Vch/Bill', marginLeft + 125, tableTop);
        doc.text('Mode', marginLeft + 175, tableTop);
        doc.text('Account', marginLeft + 250, tableTop);
        doc.text('Debit (Rs.)', marginLeft + 325, tableTop);
        doc.text('Credit (Rs.)', marginLeft + 400, tableTop);
        doc.text('Balance (Rs.)', marginLeft + 465, tableTop);

        // Draw horizontal line after header
        doc.moveTo(marginLeft, tableTop + 15)
            .lineTo(590, tableTop + 15)
            .stroke();

        let balance = openingBalance;
        let totalDebit = paymentMode !== 'cash' && openingBalance > 0 ? openingBalance : 0;
        let totalCredit = paymentMode !== 'cash' && openingBalance < 0 ? -openingBalance : 0;
        let rowIndex = 1;

        // Add opening balance as the first row
        if (paymentMode !== 'cash') {
            doc.fontSize(12).text('Opening Balance', marginLeft + 200, tableTop + rowIndex * rowHeight);
            doc.text('', marginLeft + 75, tableTop + rowIndex * rowHeight);
            doc.text('', marginLeft + 160, tableTop + rowIndex * rowHeight);
            doc.text(balance > 0 ? balance.toFixed(2) : '', marginLeft + 325, tableTop + rowIndex * rowHeight);
            doc.text(balance < 0 ? (-balance).toFixed(2) : '', marginLeft + 400, tableTop + rowIndex * rowHeight);
            doc.text(`${formatBalance(balance)}`, marginLeft + 475, tableTop + rowIndex * rowHeight);
            rowIndex++;
        } else {
            balance = 0;
        }

        filteredTransactions.forEach(tx => {
            const y = tableTop + rowIndex * rowHeight;
            const debit = tx.debit || 0;
            const credit = tx.credit || 0;
            balance += (debit - credit);
            totalDebit += debit;
            totalCredit += credit;

            doc.text(tx.transactionDate.toLocaleDateString(), marginLeft, y);
            doc.text(tx.type, marginLeft + 80, y);
            doc.text(tx.billNumber, marginLeft + 135, y);
            doc.text(tx.paymentMode, marginLeft + 175, y);
            doc.text(tx.accountType, marginLeft + 250, y);
            doc.text(debit ? `${debit.toFixed(2)}` : '', marginLeft + 325, y);
            doc.text(credit ? `${credit.toFixed(2)}` : '', marginLeft + 400, y);
            doc.text(`${formatBalance(balance)}`, marginLeft + 475, y);

            // Draw horizontal line after each row
            doc.moveTo(marginLeft, y + 15)
                .lineTo(590, y + 15)
                .stroke();

            rowIndex++;
        });

        // Final totals row
        doc.fontSize(12).text('Total', marginLeft + 200, tableTop + rowIndex * rowHeight);
        doc.text('', marginLeft + 75, tableTop + rowIndex * rowHeight);
        doc.text('', marginLeft + 160, tableTop + rowIndex * rowHeight);
        doc.text(totalDebit.toFixed(2), marginLeft + 325, tableTop + rowIndex * rowHeight);
        doc.text(totalCredit.toFixed(2), marginLeft + 400, tableTop + rowIndex * rowHeight);
        doc.text(`${formatBalance(balance)}`, marginLeft + 475, tableTop + rowIndex * rowHeight);

        // Draw horizontal line after totals row
        doc.moveTo(marginLeft, tableTop + (rowIndex + 1) * rowHeight)
            .lineTo(590, tableTop + (rowIndex + 1) * rowHeight)
            .stroke();

        doc.end();
    } catch (error) {
        console.error("Error generating PDF:", error);
        req.flash('error', 'Error generating PDF');
        res.redirect('/statement');
    }
});

// Function to calculate opening balance based on opening balance date
function calculateOpeningBalance(account, transactions, fromDate) {
    const openingBalanceDate = fromDate || account.openingBalanceDate || new Date('July 17, 2023'); // Use fromDate if available
    let openingBalance = account.openingBalance.type === 'Dr' ? account.openingBalance.amount : -account.openingBalance.amount;

    transactions.forEach(tx => {
        if (tx.transactionDate < openingBalanceDate) {
            openingBalance += (tx.debit || 0) - (tx.credit || 0);
        }
    });

    return openingBalance;
}

// Function to format balance with Dr/Cr
function formatBalance(amount) {
    return amount > 0 ? `${amount.toFixed(2)} Dr` : `${(-amount).toFixed(2)} Cr`;
}





// router.get('/bills/:id/print', async (req, res) => {
//     try {
//         const bill = await SalesBill.findById(req.params.id).populate('company').populate('items.item');
//         if (!bill) {
//             req.flash('error', 'Bill not found');
//             return res.redirect('/statement');
//         }
//         res.render('statements/print', { bill });
//     } catch (error) {
//         console.error("Error fetching bill for printing:", error);
//         req.flash('error', 'Error fetching bill for printing');
//         res.redirect('/statement');
//     }
// });



module.exports = router;
