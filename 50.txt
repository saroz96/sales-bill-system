// salesbill.ejs (or wherever the fetchLastTransactions function is used)
async function fetchLastTransactions(itemId) {
    const accountId = document.getElementById('account').value;
    const transactionList = document.getElementById('transactionList');
    const companyId = /* Retrieve the current company ID somehow */;
    const userId = /* Retrieve the current user ID somehow */;

    try {
        // Check if the setting to display transactions is enabled
        const settingResponse = await fetch(`/api/settings/displayTransactions/${companyId}/${userId}`);
        const displayTransactions = await settingResponse.json();

        if (!displayTransactions.value) {
            transactionList.innerHTML = '';  // Clear the transaction list if disabled
            return;
        }

        const response = await fetch(`/api/transactions/${itemId}/${accountId}`);
        const transactions = await response.json();

        // Create table header
        let tableHtml = `
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Trans. Id</th>
                        <th>Date</th>
                        <th>Bill No.</th>
                        <th>Type</th>
                        <th>Pay.Mode</th>
                        <th>Qty.</th>
                        <th>Unit</th>
                        <th>s.price</th>
                    </tr>
                </thead>
                <tbody>
        `;

        // Add table rows for each transaction
        tableHtml += transactions.map(transaction => `
            <tr onclick="window.location.href='/bills/${transaction.billId._id}/print'" style="cursor: pointer;">
                <td>${transaction._id}</td>
                <td>${new Date(transaction.transactionDate).toLocaleDateString()}</td>
                <td>${transaction.billNumber}</td>
                <td>${transaction.type}</td>
                <td>${transaction.paymentMode}</td>
                <td>${transaction.quantity}</td>
                <td>${transaction.unit ? transaction.unit.name : ''}</td>
                <td>Rs.${transaction.price}</td>
            </tr>
        `).join('');

        // Close table
        tableHtml += `
                </tbody>
            </table>
        `;

        // Set the innerHTML of the transaction list container
        transactionList.innerHTML = tableHtml;

        // Show the modal
        $('#transactionModal').modal('show');
    } catch (error) {
        console.error('Error fetching transactions:', error);
    }
}
