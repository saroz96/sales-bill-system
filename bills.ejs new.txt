<%- include('../layouts/boilerplate') %>

    <style>
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            max-height: 200px;
            overflow-y: auto;
            background-color: white;
            z-index: 1000;
        }

        .autocomplete-table {
            /* width: 100%; */
            table-layout: fixed;
            width: 1300px;
            font: larger monospace;
            border-collapse: collapse;

            /* Ensure columns are of fixed width */
        }

        .autocomplete-table th,
        .autocomplete-table td {
            padding: 5px;
            border: 1px solid #d4d4d4;
            background-color: #f1f1f1;
            cursor: pointer;

        }

        .autocomplete-table th {
            background-color: #e9e9e9;
        }

        .autocomplete-table tr:hover td,
        .autocomplete-active td {
            background-color: skyblue;
        }

        .autocomplete-table .col-stock,
        .autocomplete-table .col-unit,
        .autocomplete-table .col-sprice,
        .autocomplete-table .col-vatStatus {
            width: 100px;
            /* Adjust width for smaller columns */
        }

        .autocomplete-table .col-itemname {
            width: auto;
            /* Let item name column take remaining space */
        }
    </style>

    <!-- <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css"> -->


    <div class="container">
        <div class="card mt-4">
            <div class="card-header">
                Create New Bill
                </h1>
            </div>
            <div class="card-body">
                <form id="salesBillForm">
                    <div class="form-group row">
                        <div class="col">
                            <p id="billNumber">
                                <label for="billNumber">Bill No:</label>
                                <input type="number" value="<%= nextBillNumber %>" class="form-control">
                                <input type="hidden" name="billNumber" value="<%= nextBillNumber %>" readonly>
                            </p>
                        </div>
                        <div class="col">
                            <label for="dateInput">Date:</label>
                            <input type="date" name="billDate" class="form-control" id="dateInput"
                                value="<%= new Date().toISOString().split('T')[0] %>" required>
                        </div>
                        <div class="col">
                            <label for="paymentMode">Payment Mode:</label>
                            <select class="form-control" id="paymentMode" name="paymentMode" required>
                                <option value="cash">Cash</option>
                                <option value="credit">Credit</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="companySelect">Company/Party:</label>
                            <select class="form-control" id="companySelect" name="account" required>
                                <!-- Options will be dynamically loaded -->
                            </select>
                        </div>
                        <div class="col">
                            <label for="vatInput">VAT:</label>
                            <select class="form-control" id="vatInput" name="isVatExempt" required>
                                <option value="all">All</option>
                                <option value="false">13%</option>
                                <option value="true">VAT Exempt</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-4">
                            <label for="itemInput">Item:</label>
                            <input type="text" class="form-control" id="itemInput" placeholder="Type to search items..."
                                autocomplete="off">
                            <div id="itemDropdown" class="autocomplete-items"></div>
                        </div>
                        <div class="col">
                            <label for="quantityInput">Quantity:</label>
                            <input type="number" class="form-control" id="quantity-input"
                                placeholder="Enter quantity...">
                        </div>
                        <div class="col">
                            <label for="unitInput">Unit:</label>
                            <input type="text" class="form-control" id="unit-input" readonly>
                        </div>
                        <div class="col">
                            <label for="rateInput">Rate:</label>
                            <input type="number" class="form-control" id="price-input" placeholder="Enter rate...">
                        </div>
                        <div class="col">
                            <label for="totalInput">Total:</label>
                            <input type="text" class="form-control" id="total-input" placeholder="Total" readonly>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-primary" id="addItemBtn">Add Item</button>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success">Submit Sales Bill</button>
                </form>
                <hr>
                <h3>Items List</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Quantity</th>
                            <th>Unit</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="itemsTableBody">
                        <!-- Items will be dynamically added here -->
                    </tbody>
                </table>
                <hr>
                <div class="row">
                    <div class="col">
                        <label for="subTotalInput">SubTotal:</label>
                        <input type="text" name="subTotal" class="form-control" id="subTotalInput" readonly>
                    </div>
                    <div class="col">
                        <label for="discountPercentageInput">Discount Percentage:</label>
                        <input type="number" step="any" name="discountPercentage" class="form-control"
                            id="discountPercentageInput" placeholder="Enter discount percentage...">
                    </div>
                    <div class="col">
                        <label for="discountAmountInput">Discount Amount:</label>
                        <input type="number" step="any" name="discountAmount" class="form-control"
                            id="discountAmountInput" value="0">
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label for="taxableAmountInput">Taxable Amount:</label>
                        <input type="text" name="taxableAmount" class="form-control" id="taxableAmountInput" readonly>
                    </div>
                    <div class="col" id="vatCalculations">
                        <label for="vatAmountInput">VAT (13%):</label>
                        <input type="hidden" name="vatPercentage" id="vatPercentage">
                        <input type="text" class="form-control" name="vatAmount" id="vatAmountInput" readonly>
                    </div>
                    <div class="col">
                        <label for="netTotalInput">Net Total:</label>
                        <input type="text" name="totalAmount" class="form-control" id="netTotalInput" readonly>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label for="roundOffInput">Round Off:</label>
                        <input type="checkbox" id="roundOffInput" name="roundOffAmount">
                    </div>
                </div>
                <hr>
                <h3>Last Transaction</h3>
                <div id="lastTransaction">
                    <!-- Last transaction will be displayed here -->
                </div>
            </div>
        </div>
    </div>

    <!-- jQuery and Bootstrap JS -->
    <!-- <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>


    <!-- Custom script for autocomplete and handling form -->
    <script>
        $(document).ready(function () {
            let items = [];
            let debounceTimer;
            let currentFocus = -1;

            // Fetch items from the backend
            function fetchItems(query = '', vatStatus = 'all') {
                return $.ajax({
                    url: '/items/get',
                    method: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        items = response;  // Store the fetched items
                    }
                });
            }

            // Fetch items when the document is ready
            fetchItems();

            // Fetch item details by ID
            function fetchItemById(id) {
                return $.ajax({
                    url: `/items/get/${id}`,
                    method: 'GET',
                    dataType: 'json',
                });
            }

            // Fetch companies/parties from the backend
            function fetchCompanies() {
                return $.ajax({
                    url: '/companies/get',
                    method: 'GET',
                    dataType: 'json'
                });
            }

            // Populate companies/parties select
            function populateCompanies() {
                fetchCompanies().then(response => {
                    const companySelect = $('#companySelect');
                    response.accounts.forEach(account => {
                        const optionHtml = `<option value="${account._id}">${account.name}</option>`;
                        companySelect.append(optionHtml);
                    });
                });
            }

            // Initialize the companies/parties select on page load
            populateCompanies();

            // Autocomplete functionality for item input
            $('#itemInput').on('input', function () {
                clearTimeout(debounceTimer);
                const inputVal = $(this).val().toLowerCase();
                const dropdown = $('#itemDropdown');
                dropdown.empty();
                currentFocus = -1;

                debounceTimer = setTimeout(() => {
                    if (inputVal.length > 0) {
                        const vatStatus = $('#vatInput').val() === 'true' ? 'vatExempt' : $('#vatInput').val() === 'false' ? 'vatable' : 'all';
                        const tableHtml = `
                    <table class="autocomplete-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th class="col-itemname">Item Name</th>
                                <th class="col-stock">Stock</th>
                                <th class="col-unit">Unit</th>
                                <th class="col-sprice">S.Price</th>
                                <th class="col-vatStatus">Vat</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                `;
                        dropdown.append(tableHtml);
                        const tbody = dropdown.find('tbody');
                        items.forEach(item => {
                            if (item.name.toLowerCase().includes(inputVal) && (vatStatus === 'all' || item.vatStatus === vatStatus)) {
                                const rowHtml = `
                            <tr class="autocomplete-item" data-item-id="${item._id}" data-item-name="${item.name}" data-item-unit-name="${item.unit.name}" data-item-price="${item.price}">
                                <td>${item._id}</td>
                                <td>${item.name}</td>
                                <td>${item.stock}</td>
                                <td>${item.unit.name}</td>
                                <td>${item.price}</td>
                                <td>${item.vatStatus}</td>
                            </tr>
                        `;
                                tbody.append(rowHtml);
                            }
                        });
                        dropdown.show(); // Show dropdown when items are available
                    } else {
                        $('#itemDropdown').hide(); // Hide dropdown if input is empty
                    }
                }, 300); // Delay the request by 300ms
            });

            // Show dropdown when the item input field is clicked
            $('#itemInput').on('focus', function () {
                const dropdown = $('#itemDropdown');
                if (dropdown.find('.autocomplete-item').length > 0) { // Show only if there are items to display
                    dropdown.show();
                }
            });

            // Hide dropdown when clicking outside
            $(document).on('click', function (e) {
                if (!$(e.target).closest('#itemInput').length && !$(e.target).closest('#itemDropdown').length) {
                    $('#itemDropdown').hide();
                }
            });

            // Handle item selection from autocomplete dropdown
            $('#itemDropdown').on('click', '.autocomplete-item', function () {
                const itemId = $(this).data('item-id');
                const itemName = $(this).data('item-name');
                const itemUnit = $(this).data('item-unit-name');
                const itemPrice = $(this).data('item-price');
                $('#itemInput').val(itemName);
                $('#unit-input').val(itemUnit);
                $('#price-input').val(itemPrice);
                $('#itemDropdown').empty().hide(); // Clear and hide dropdown after selection
            });

            // Live calculation of total
            $('#itemInput, #quantity-input, #price-input').on('input', function () {
                const quantity = parseFloat($('#quantity-input').val()) || 0;
                const price = parseFloat($('#price-input').val()) || 0;
                const total = quantity * price;
                $('#total-input').val(total.toFixed(2));
            });

            function updateDiscountFromPercentage() {
                const subTotal = parseFloat($('#subTotalInput').val()) || 0;
                const discountPercentage = parseFloat($('#discountPercentageInput').val()) || 0;
                const discountAmount = (subTotal * discountPercentage) / 100;
                $('#discountAmountInput').val(discountAmount.toFixed(2));
                updateTotals();
            }

            function updateDiscountFromAmount() {
                const subTotal = parseFloat($('#subTotalInput').val()) || 0;
                const discountAmount = parseFloat($('#discountAmountInput').val()) || 0;
                const discountPercentage = (discountAmount / subTotal) * 100;
                $('#discountPercentageInput').val(discountPercentage.toFixed(2));
                updateTotals();
            }

            function calculateSubTotal() {
                let subTotal = 0;
                $('#itemsTableBody tr').each(function () {
                    const rowTotal = parseFloat($(this).find('td').eq(4).text());
                    subTotal += rowTotal;
                });
                return subTotal;
            }

            // Update totals based on the items added
            function updateTotals() {
                let subTotal = calculateSubTotal();

                const discountPercentage = parseFloat($('#discountPercentageInput').val()) || 0;
                const discountAmount = parseFloat($('#discountAmountInput').val()) || 0;
                const taxableAmount = subTotal - discountAmount;

                const isVatExempt = $('#vatInput').val() === 'true';
                const vatPercentage = isVatExempt ? 0 : 13; // Assuming 13% VAT
                const vatAmount = taxableAmount * (vatPercentage / 100);
                let netTotal = taxableAmount + vatAmount;

                if ($('#roundOffInput').is(':checked')) {
                    netTotal = Math.round(netTotal);
                }

                $('#subTotalInput').val(subTotal.toFixed(2));
                $('#discountAmountInput').val(discountAmount.toFixed(2));
                $('#taxableAmountInput').val(taxableAmount.toFixed(2));
                $('#vatAmountInput').val(isVatExempt ? 0 : vatAmount.toFixed(2));
                $('#netTotalInput').val(netTotal.toFixed(2));

                $('#vatCalculations').toggle(!isVatExempt);
            }

            // Event listeners for discount fields
            $('#discountPercentageInput').on('input', function () {
                updateDiscountFromPercentage();
            });

            $('#discountAmountInput').on('input', function () {
                updateDiscountFromAmount();
            });

            // Handle removal of items from the list
            $('#itemsTableBody').on('click', '.remove-item-btn', function () {
                $(this).closest('tr').remove();
                updateTotals(); // Update totals after item removal
            });

            // Handle item addition to the list
            $('#addItemBtn').on('click', function () {
                const itemName = $('#itemInput').val().trim();
                const quantity = parseFloat($('#quantity-input').val().trim()) || 0;
                const unit = $('#unit-input').val().trim();
                const price = parseFloat($('#price-input').val().trim()) || 0;

                // Check if all fields are filled
                if (itemName === '' || quantity <= 0 || unit === '') {
                    alert('Please fill in all fields correctly.');
                    return; // Prevent adding the item if any field is invalid
                }

                const total = quantity * price;

                const itemRowHtml = `
            <tr>
                <td>${itemName}</td>
                <td>${quantity}</td>
                <td>${unit}</td>
                <td>${price}</td>
                <td>${total.toFixed(2)}</td>
                <td>
                <button type="button" class="btn btn-danger btn-sm remove-item-btn"><i class="bi bi-trash"></i></button>
                </td>            
            </tr>
        `;
                $('#itemsTableBody').append(itemRowHtml);

                // Clear the input fields after adding the item
                $('#itemInput').val('');
                $('#quantity-input').val('');
                $('#unit-input').val('');
                $('#price-input').val('');
                $('#total-input').val('');

                updateTotals();
            });

            // Handle key navigation for autocomplete items
            $('#itemInput').on('keydown', function (e) {
                const items = $('#itemDropdown .autocomplete-item');
                if (e.key === 'ArrowDown') {
                    currentFocus++;
                    if (currentFocus >= items.length) currentFocus = 0;
                    addActive(items);
                } else if (e.key === 'ArrowUp') {
                    currentFocus--;
                    if (currentFocus < 0) currentFocus = items.length - 1;
                    addActive(items);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        items.eq(currentFocus).click();
                    }
                }
            });

            function addActive(items) {
                if (!items) return false;
                removeActive(items);
                if (currentFocus >= items.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = items.length - 1;
                items.eq(currentFocus).addClass('autocomplete-active');
            }

            function removeActive(items) {
                items.removeClass('autocomplete-active');
            }

            // Handle form submission
            $('#salesBillForm').on('submit', function (e) {
                e.preventDefault();

                // Check if there are items in the items table
                if ($('#itemsTableBody tr').length === 0) {
                    alert('Please add at least one item to the list before submitting.');
                    return; // Prevent form submission if there are no items
                }

                const isVatExempt = $('#vatInput').val() === 'true';
                const vatPercentage = isVatExempt ? 0 : 13; // Set VAT percentage to 0 if exempt

                const formData = {
                    billNumber: $('input[name="billNumber"]').val(),
                    billDate: $('#dateInput').val(),
                    paymentMode: $('#paymentMode').val(),
                    account: $('#companySelect').val(),
                    isVatExempt,
                    items: [],
                    subTotal: parseFloat($('#subTotalInput').val()),
                    discountPercentage: parseFloat($('#discountPercentageInput').val()),
                    discountAmount: parseFloat($('#discountAmountInput').val()),
                    taxableAmount: parseFloat($('#taxableAmountInput').val()),
                    vatPercentage,
                    vatAmount: isVatExempt ? 0 : parseFloat($('#vatAmountInput').val()),
                    totalAmount: parseFloat($('#netTotalInput').val()),
                    roundOffAmount: $('#roundOffInput').is(':checked')
                };

                $('#itemsTableBody tr').each(function () {
                    const itemName = $(this).find('td').eq(0).text();
                    const quantity = $(this).find('td').eq(1).text();
                    const unit = $(this).find('td').eq(2).text();
                    const price = $(this).find('td').eq(3).text();
                    const total = $(this).find('td').eq(4).text();

                    formData.items.push({
                        itemName,
                        quantity,
                        price,
                        total,
                        vatStatus: isVatExempt ? 'vatExempt' : 'vatable', // Use correctly defined vatStatus
                    });
                });

                $.ajax({
                    url: '/bills',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function (response) {
                        location.reload(); // Reload the page after successful form submission
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error creating bill:', textStatus, errorThrown);
                    }
                });
            });

            // Handle VAT status change to show/hide VAT calculations
            $('#vatInput').on('change', function () {
                updateTotals();
            });
        });

    </script>