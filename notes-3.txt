// GET route to fetch statement
router.get('/statement', async (req, res) => {
    try {
        const companies = await Company.find();
        const selectedCompany = req.query.company || '';
        const fromDate = req.query.fromDate ? new Date(req.query.fromDate) : null;
        const toDate = req.query.toDate ? new Date(req.query.toDate) : null;

        if (!selectedCompany) {
            return res.render('statements/statement', { statement: [], companies, selectedCompany: null, fromDate: '', toDate: '' });
        }

        // Fetch company details including opening balance and opening balance date
        const company = await Company.findById(selectedCompany);

        if (!company) {
            return res.status(404).json({ error: 'Company not found' });
        }

        let query = { company: selectedCompany };

        if (fromDate && toDate) {
            query.transactionDate = { $gte: fromDate, $lte: toDate };
        } else if (fromDate) {
            query.transactionDate = { $gte: fromDate };
        } else if (toDate) {
            query.transactionDate = { $lte: toDate };
        }

        // Fetch transactions within the date range
        const transactions = await Transaction.find(query).sort({ transactionDate: 1 });

        // Calculate opening balance based on opening balance date
        const openingBalance = calculateOpeningBalance(company, transactions, fromDate);

        // Prepare statement with opening balance row
        const statement = prepareStatementWithOpeningBalance(openingBalance, transactions);

        res.render('statements/statement', { statement, companies, selectedCompany, company, fromDate: req.query.fromDate, toDate: req.query.toDate });
    } catch (error) {
        console.error("Error fetching statement:", error);
        res.status(500).json({ error: 'Error fetching statement' });
    }
});

// Function to calculate opening balance based on opening balance date
function calculateOpeningBalance(company, transactions, fromDate) {
    const openingBalanceDate = company.openingBalanceDate || new Date('July 17, 2024'); // Default to July 17
    let openingBalance = company.openingBalance || 0;

    transactions.forEach(tx => {
        if (tx.transactionDate < openingBalanceDate && (!fromDate || tx.transactionDate >= fromDate)) {
            openingBalance;
        }
    });

    return openingBalance;
}

// Function to prepare statement with opening balance row
function prepareStatementWithOpeningBalance(openingBalance, transactions) {
    let balance = openingBalance;
    const statement = [
        { date: 'Opening Balance', type: '', billNumber: '', account: 'Opening Balance', debit: null, credit: null, balance: openingBalance }
    ];
    transactions.forEach(tx => {
        balance += (tx.debit || 0) - (tx.credit || 0);
        statement.push({
            date: tx.transactionDate,
            type: tx.type,
            billNumber: tx.billNumber,
            account: tx.account,
            debit: tx.debit,
            credit: tx.credit,
            balance: balance
        });
    });
    return statement;
}
