const mongoose = require('mongoose');

// Middleware to validate SalesBill entry date against company's createdAt date (1 month limit)
const checkDemoPeriod = async (req, res, next) => {
    try {
        const companyId = req.session.currentCompany; // Assuming session stores the current company ID
        const { billDate, nepaliDate } = req.body; // Extract both billDate (English) and nepaliDate from the request body

        // Fetch the company
        const Company = mongoose.model('Company');
        const company = await Company.findById(companyId);

        if (!company) {
            return res.status(404).json({ error: 'Company not found' });
        }

        const { dateFormat, createdAt } = company; // Fetch company's date format and createdAt

        // Parse the billDate based on the company's date format (Nepali or English)
        let salesBillDate;

        if (dateFormat === 'nepali') {
            // If the company's date format is Nepali, directly use nepaliDate for comparison (string comparison)
            salesBillDate = nepaliDate;
        } else if (dateFormat === 'english') {
            // If the company's date format is English, use billDate from req.body (JavaScript Date object)
            salesBillDate = new Date(billDate);
        } else {
            return res.status(400).json({ error: 'Invalid date format' });
        }

        console.log('Company createdAt:', createdAt); // Debugging log
        console.log('SalesBill billDate:', salesBillDate); // Debugging log

        // Calculate one month after the company's createdAt date
        const oneMonthLater = new Date(createdAt);
        oneMonthLater.setMonth(oneMonthLater.getMonth() + 1);
        console.log('One month later:', oneMonthLater); // Debugging log

        // Validate the billDate based on the date format
        if (dateFormat === 'nepali') {
            // Simple string comparison for nepaliDate (assuming it's in a valid string format)
            if (salesBillDate > oneMonthLater.toISOString().split('T')[0]) {
                return res.status(403).json({
                    error: 'Demo period has expired. Please upgrade to the full version to continue using the software.',
                });
            }
        } else if (dateFormat === 'english') {
            // Validate if the English date is beyond the one-month limit
            if (salesBillDate > oneMonthLater) {
                return res.status(403).json({
                    error: 'Demo period has expired. Please upgrade to the full version to continue using the software.',
                });
            }
        }

        // If the date is valid, allow the request to proceed
        next();
    } catch (err) {
        console.error('Error in validateSalesBillDate middleware:', err);
        return res.status(500).json({ error: 'Server error' });
    }
};

module.exports = checkDemoPeriod;
