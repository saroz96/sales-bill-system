<%- include('../layouts/boilerplate', { title: '' , body: '' }) %>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.5.0/font/bootstrap-icons.min.css"
        rel="stylesheet">

    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
        }

        th,
        td {
            padding: 8px;
            text-align: left;
            border: 1px solid black;
            white-space: nowrap;
        }

        th {
            background-color: #f2f2f2;
        }

        @media print {
            @page {
                size: A4 landscape;
                margin: 10mm;
            }

            body {
                font-size: 12px;
                margin: 10mm;
            }

            #printHeader {
                display: block;
            }

            th,
            td {
                white-space: nowrap;
            }

            #filterForm,
            #searchInput,
            #itemsList .searchClass td:last-child {
                display: none;
            }

            #mainContainer {
                width: 100%;
            }
        }

        @media screen {
            #printHeader {
                display: none;
            }
        }


        /* Custom styles to resize the form */
        .expanded-container {
            max-width: 90%;
            /* Expand the container to 90% of the viewport width */
        }

        .expanded-card {
            width: 100%;
            /* Ensure the card takes full width of the container */
        }

        @media (min-width: 768px) {
            .expanded-container {
                max-width: 90%;
                /* Adjust width for medium and larger screens */
            }
        }

        /* Compact table styles */
        .compact-table {
            font-size: 0.85rem;
            /* Reduce font size (12px) */
        }

        .compact-table th,
        .compact-table td {
            padding: 0.4rem 0.6rem;
            /* Decrease padding for compact appearance */
        }

        .compact-table input.form-control {
            font-size: 0.85rem;
            /* Smaller text size for input fields */
            padding: 0.3rem 0.5rem;
            /* Adjust input padding */
            height: auto;
            /* Reduce input height */
        }

        .compact-table .btn-danger {
            font-size: 0.85rem;
            /* Reduce button text size */
            padding: 0.3rem 0.5rem;
            /* Compact button padding */
        }

        .compact-table input[type="date"] {
            font-size: 0.85rem;
            padding: 0.3rem;
            height: auto;
        }
    </style>

    <div class="container wow-form expanded-container">
        <div class="card mt-4 shadow-lg p-4 animate__animated animate__fadeInUp expanded-card">
            <h2 class="mb-4" style="text-align: center; text-decoration: underline;">Stock Reorder Levels</h2>

            <!--print buttons-->
            <div>
                <button class="btn btn-primary" onclick="printItems()"><i class="bi bi-printer"></i></button>
            </div>
            <div class="row">
                <div class="col-9">
                    <form id="filterForm">
                        <div class="form-group">
                            <label for="reorderLevelFilter">Filter by Type:</label>
                            <select class="form-control" id="reorderLevelFilter" onchange="filterItems()">
                                <option value="reorderLevel">Reorder Level</option>
                                <option value="maxStock">Over Stock</option>
                            </select>
                        </div>
                    </form>

                </div>
            </div>

            <table class="table table-bordered compact-table" id="itemsTable">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Item Name</th>
                        <th>Unit</th>
                        <th>Current Stock</th>
                        <th id="dynamicHeader">Reorder Level</th>
                        <th id="neededStockHeader">Needed Stock</th>
                    </tr>
                </thead>
                <tbody>
                    <% items.forEach((item, index)=> { %>
                        <tr>
                            <td>
                                <%= index + 1 %>
                            </td> <!-- Serial Number for Printing -->
                            <td>
                                <%= item.name %>
                            </td>
                            <td>
                                <%= item.unit%>
                            </td>
                            <td>
                                <%= item.currentStock %>
                            </td>
                            <td>
                                <%= item.reorderLevel %>
                            </td>
                            <td class="<%= item.neededStock > 0 ? 'text-danger' : 'text-success' %>">
                                <%= item.neededStock %>
                            </td>

                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <script>

        // Function to filter items based on selected type
        function filterItems() {
            const filterValue = document.getElementById('reorderLevelFilter').value;
            const itemsTable = document.getElementById('itemsTable');
            const dynamicHeader = document.getElementById('dynamicHeader');
            const neededStockHeader = document.getElementById('neededStockHeader');

            // Update table header and contents based on filter
            if (filterValue === 'maxStock') {
                dynamicHeader.textContent = 'Max Stock';
                neededStockHeader.textContent = 'Over Stock';

                // Update items in the table
                const rows = itemsTable.querySelectorAll('tbody tr');
                rows.forEach((row, index) => {
                    const itemMaxStock = <%= JSON.stringify(items.map(item => item.maxStock)) %> [index];
                    const itemCurrentStock = <%= JSON.stringify(items.map(item => item.currentStock)) %> [index];
                    const overStock = itemCurrentStock - itemMaxStock;

                    row.cells[4].textContent = itemMaxStock; // Set Max Stock
                    row.cells[5].textContent = overStock; // Set Over Stock
                    row.cells[5].className = (overStock > 0 ? 'text-danger' : 'text-success'); // Set color based on stock status
                });
            } else {
                dynamicHeader.textContent = 'Reorder Level';
                neededStockHeader.textContent = 'Needed Stock';

                // Revert back to original values
                const rows = itemsTable.querySelectorAll('tbody tr');
                rows.forEach((row, index) => {
                    const itemReorderLevel = <%= JSON.stringify(items.map(item => item.reorderLevel)) %> [index];
                    const neededStock = <%= JSON.stringify(items.map(item => item.neededStock)) %> [index];

                    row.cells[4].textContent = itemReorderLevel; // Set Reorder Level
                    row.cells[5].textContent = neededStock; // Set Needed Stock
                    row.cells[5].className = (neededStock > 0 ? 'text-danger' : 'text-success'); // Set color based on stock status
                });
            }
        }
        // Function to print only the items table
        function printItems() {
            // Get the table content
            const itemsTable = document.getElementById('itemsTable').outerHTML;

            // Open a new window for the print content
            const printWindow = window.open('', '', 'width=1200, height=600');

            // Define the table content within basic HTML structure
            printWindow.document.write(`
            <html>
                <head>
                    <title>Print Items</title>
                    <style>
                        table {
                            width: 100%;
                        border-collapse: collapse;
                        }
                        th, td {
                            padding: 8px;
                        text-align: left;
                        border: 1px solid #ddd;
                        }
                    </style>
                </head>
                <body>
                    <h2>Stock Reorder Levels</h2>
                    ${itemsTable}
                </body>
            </html>
        `);

            // Close the document for printing and trigger print
            printWindow.document.close();
            printWindow.print();
        }
    </script>