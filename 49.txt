const mongoose = require('mongoose');
// const stockAdjustmentSchema = new mongoose.Schema({
//     date: { type: Date, default: Date.now },
//     type: { type: String, enum: ['excess', 'short'], required: true },
//     quantity: { type: Number, required: true },
//     reason: { type: String, required: true }
// });

const itemSchema = new mongoose.Schema({
    name: String,
    hscode: Number,
    category: {
        type: mongoose.Schema.Types.ObjectId, ref: 'Category'
    },
    price: Number,

    unit: {
        type: mongoose.Schema.Types.ObjectId, ref: 'Unit',
    },

    vatStatus: {
        type: String,
        required: true,
        enum: ['all', 'vatable', 'vatExempt']
    },
    stock: { type: Number, default: 0 }, // New field for stock management
    openingStock: { type: Number, default: 0 },
    minStock: { type: Number, default: 0 }, // Minimum stock level
    maxStock: { type: Number, default: 100 }, // Maximum stock level
    sales: [{ type: mongoose.Schema.Types.ObjectId, ref: 'SalesBill' }],
    stockAdjustments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'StockAdjustment' }], // Stock adjustments log
    company: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Company',
        required: true
    }
});
//This means each company can have accounts with the same name, but account names must be unique within a company.
itemSchema.index({ name: 1, company: 1 }, { unique: true });
//---------------------------------------------------------------------------------------------------------------

module.exports = mongoose.model('Item', itemSchema);