{"version":3,"file":"nepali-date-converter.es5.js","sources":["../src/nepali-date-helper.ts","../src/nepali-date-converter.ts"],"sourcesContent":["export enum Language {\n  np = 'np',\n  en = 'en'\n}\nexport interface IYearMonthDate {\n  year: number\n  month: number\n  date: number\n  day?: number\n}\n\nexport interface IAdBs {\n  AD: IYearMonthDate\n  BS: IYearMonthDate\n}\n\n/**\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\n */\nconst yearMonthDaysMapping: number[][] = [\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], // 2081 BS\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n  [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]\n]\n\n/**\n * Memoizing the days passed for each month in year for faster calculation\n */\nconst monthDaysMappings: number[][][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  let daySum = 0\n  return yearMappings.map((monthDays: number) => {\n    const monthPassedDays = [monthDays, daySum]\n    daySum += monthDays\n    return monthPassedDays\n  })\n}, [])\n\n/**\n * Ignore\n */\nlet daysPassed = 0\n/**\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\n */\nconst yearDaysMapping: number[][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  const daysInYear = yearMappings.reduce((acc, x) => acc + x, 0)\n  const yearDaysPassed = [daysInYear, daysPassed]\n  daysPassed += daysInYear\n  return yearDaysPassed\n})\n\n/**\n * Max possible Day\n */\nconst MAX_DAY = 33238\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.')\n}\n\n/**\n * Min possible Day\n */\nconst MIN_DAY = 1\n/**\n * @ignore\n */\nexport function getYearIndex(year: number) {\n  return year - EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport function getYearFromIndex(yearIndex: number) {\n  return yearIndex + EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport const KTM_TIMEZONE_OFFSET = 20700000\n/**\n * @ignore\n */\nexport const EPOCH_YEAR = 2000\n/**\n * @ignore\n */\nexport const COMPLETED_DAYS = 1\n/**\n * @ignore\n */\nexport const TOTAL_DAYS = 0\n\n/**\n * @ignore\n */\nfunction mod(m: number, val: number) {\n  while (val < 0) {\n    val += m\n  }\n  return val % m\n}\n/**\n * Format Object\n */\nexport const formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: [\n        'Baisakh',\n        'Jestha',\n        'Asar',\n        'Shrawan',\n        'Bhadra',\n        'Aswin',\n        'Kartik',\n        'Mangsir',\n        'Poush',\n        'Magh',\n        'Falgun',\n        'Chaitra'\n      ]\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: [\n        'बैशाख',\n        'जेठ',\n        'असार',\n        'श्रावण',\n        'भाद्र',\n        'आश्विन',\n        'कार्तिक',\n        'मंसिर',\n        'पौष',\n        'माघ',\n        'फाल्गुण',\n        'चैत्र'\n      ]\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n}\n\n/**\n * Epoch in english date\n */\nconst beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n}\n\n/**\n * `findPassedDays` calculates the days passed from the epoch time.\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param year Year between 2000-2009 of nepali date\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @returns Number of days passed since epoch time from the given date,month and year.\n */\nexport function findPassedDays(year: number, month: number, date: number) {\n  try {\n    const yearIndex = getYearIndex(year)\n    const pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS]\n    const extraMonth = mod(12, month)\n    const extraYear = Math.floor(month / 12)\n\n    const pastMonthDays =\n      yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] -\n      pastYearDays +\n      monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS]\n\n    const daysPassed = pastYearDays + pastMonthDays + date\n    if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n      throw new Error()\n    }\n    return daysPassed\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport { monthDaysMappings, yearDaysMapping }\n\n/**\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param daysPassed The number of days passed since nepali date epoch time\n * @returns date values in object implementing IYearMonthDate interface\n */\nexport function mapDaysToDate(daysPassed: number): IYearMonthDate {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(`The epoch difference is not within the boundaries ${MIN_DAY} - ${MAX_DAY}`)\n  }\n\n  const yearIndex = yearDaysMapping.findIndex(\n    year =>\n      daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS]\n  )\n  const monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS]\n  const monthIndex = monthDaysMappings[yearIndex].findIndex(\n    month =>\n      monthRemainder > month[COMPLETED_DAYS] &&\n      monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS]\n  )\n  const date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS]\n\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  }\n}\n\nexport function findPassedDaysAD(year: number, month: number, date: number) {\n  const timeDiff = Math.abs(\n    Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date)\n  )\n  const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24))\n  return diffDays\n}\n\nexport function mapDaysToDateAD(daysPassed: number) {\n  const mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed))\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  }\n}\n\nexport function convertToAD(bsDateObject: IYearMonthDate): IAdBs {\n  try {\n    const daysPassed = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date)\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport function convertToBS(adDateObject: Date): IAdBs {\n  try {\n    const daysPassed = findPassedDaysAD(\n      adDateObject.getFullYear(),\n      adDateObject.getMonth(),\n      adDateObject.getDate()\n    )\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nfunction mapLanguageNumber(dateNumber: string, language: 'en' | 'np'): string {\n  return dateNumber\n    .split('')\n    .map(num => formatObj[language].date[parseInt(num, 10)])\n    .join('')\n}\n\nexport function format(\n  bsDate: IYearMonthDate,\n  stringFormat: string,\n  language: 'en' | 'np'\n): string {\n  return stringFormat\n    .replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, (match, _, matchedString) => {\n      switch (match) {\n        case 'D':\n          return mapLanguageNumber(bsDate.date.toString(), language)\n        case 'DD':\n          return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language)\n        case 'M':\n          return mapLanguageNumber((bsDate.month + 1).toString(), language)\n        case 'MM':\n          return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language)\n        case 'MMM':\n          return formatObj[language].month.short[bsDate.month]\n        case 'MMMM':\n          return formatObj[language].month.long[bsDate.month]\n        case 'YY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-2), language)\n        case 'YYY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-3), language)\n        case 'YYYY':\n          return mapLanguageNumber(bsDate.year.toString(), language)\n        case 'd':\n          return mapLanguageNumber(bsDate.day?.toString() || '0', language)\n        case 'dd':\n          return formatObj[language].day.short[bsDate.day || 0]\n        case 'ddd':\n          return formatObj[language].day.long[bsDate.day || 0]\n        default:\n          return matchedString.replace('/', '')\n      }\n    })\n    .replace(/\\\\/g, '')\n}\n\nexport function parse(dateString: string): IYearMonthDate {\n  const OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/\n  const GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/\n  let match: RegExpMatchArray | null\n  match = dateString.match(OFFICIAL_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    }\n  }\n  match = dateString.match(GEORGIAN_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    }\n  }\n  throw new Error('Invalid date format')\n}\n","import {\n  convertToAD,\n  convertToBS,\n  IYearMonthDate,\n  IAdBs,\n  format,\n  Language,\n  parse\n} from './nepali-date-helper'\n\nconst dateSymbol = Symbol('Date')\nconst daySymbol = Symbol('Day')\nconst yearSymbol = Symbol('Year')\nconst monthSymbol = Symbol('MonthIndex')\nconst jsDateSymbol = Symbol('JsDate')\nconst convertToBSMethod = Symbol('convertToBS()')\nconst convertToADMethod = Symbol('convertToAD()')\nconst setAdBs = Symbol('setADBS()')\nconst setDayYearMonth = Symbol('setDayYearMonth()')\nexport default class NepaliDate {\n  private [jsDateSymbol]: Date\n  private [yearSymbol]: number\n  private [dateSymbol]: number\n  private [daySymbol]: number\n  private [monthSymbol]: number\n  /**\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\n   */\n  static language: 'np' | 'en' = Language.en\n  /**\n   * **String**\n   *\n   * Provide a valid Nepali date string. The current supported formats are:\n   *\n   * ```\n   * YYYY/MM/DD\n   * YYYY-MM-DD\n   * YYYY MM DD\n   * DD/MM/YYYY\n   * DD-MM-YYYY\n   * DD MM YYYY\n   * ```\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate('2051/02/01') // YYYY/MM/DD\n   * new NepaliDate('2051-02-01')\n   * new NepaliDate('2051 02 01')\n   * new NepaliDate('01/02/2051') // DD/MM/YYYY\n   * new NepaliDate('01-02-2051')\n   * new NepaliDate('01 02 2051')\n   * ```\n   *\n   * **Number**\n   *\n   * The number value represents the UTC timestamp that will be converted to Nepali date.\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(1589638162879)\n   * ```\n   *\n   * **Date**\n   *\n   * Javascript Date object\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(new Date(2020, 10, 10))\n   * ```\n   *\n   * **Empty constructor**\n   *\n   * If no values are provided, the current day date will be converted to Nepali date.\n   *\n   * ```js\n   * new NepaliDate()\n   * ```\n   * @param value\n   */\n  constructor(value?: string | number | Date)\n  /**\n   * This constructor takes year, monthIndex i.e 0-11, and date.\n   *\n   * Example:\n   *\n   * ```js\n   * new Date(2051, 0, 1) // Baisakh 1, 2051\n   * ```\n   * @param year\n   * @param monthIndex\n   * @param date\n   */\n  constructor(year: number, monthIndex: number, date: number)\n  constructor() {\n    const constructorError = new Error('Invalid constructor arguments')\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date())\n    } else if (arguments.length === 1) {\n      const argument = arguments[0]\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument))\n          break\n        case 'string':\n          const { date, year, month } = parse(argument)\n          this[setDayYearMonth](year, month, date)\n          this[convertToADMethod]()\n          break\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument)\n          } else {\n            throw constructorError\n          }\n          break\n        default:\n          throw constructorError\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2])\n      this[convertToADMethod]()\n    } else {\n      throw constructorError\n    }\n  }\n\n  private [setDayYearMonth](year: number, month: number = 0, date: number = 1, day: number = 0) {\n    this[yearSymbol] = year\n    this[monthSymbol] = month\n    this[dateSymbol] = date\n    this[daySymbol] = day\n  }\n\n  /**\n   * Returns Javascript Date converted from nepali date.\n   */\n  toJsDate(): Date {\n    return this[jsDateSymbol]\n  }\n  /**\n   * Get Nepali date for the month\n   */\n  getDate(): number {\n    return this[dateSymbol]\n  }\n  /**\n   * Get Nepali date year.\n   */\n  getYear(): number {\n    return this[yearSymbol]\n  }\n\n  /**\n   * Get Week day index for the date.\n   */\n  getDay(): number {\n    return this[daySymbol]\n  }\n\n  /**\n   * Get Nepali month index.\n   *\n   * ```\n   * Baisakh => 0\n   * Jestha => 1\n   * Asar => 2\n   * Shrawan => 3\n   * Bhadra => 4\n   * Aswin => 5\n   * Kartik => 6\n   * Mangsir => 7\n   * Poush => 8\n   * Magh => 9\n   * Falgun => 10\n   * Chaitra => 11\n   * ```\n   */\n  getMonth(): number {\n    return this[monthSymbol]\n  }\n\n  /**\n   * Returns an object with AD and BS object implementing IYearMonthDate\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *     BS: {\n   *         year: 2052,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *     AD: {\n   *         year: 2019,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *\n   * }\n   * ```\n   */\n  getDateObject(): IAdBs {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    }\n  }\n  /**\n   * Returns Nepali date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2052,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getBS(): IYearMonthDate {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    }\n  }\n  /**\n   * Returns AD date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2019,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getAD(): IYearMonthDate {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    }\n  }\n\n  /**\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\n   * ```\n   * @param date positive or negative integer value to set date\n   */\n  setDate(date: number) {\n    const oldDate = this[dateSymbol]\n    try {\n      this[dateSymbol] = date\n      this[convertToADMethod]()\n    } catch (e) {\n      this[dateSymbol] = oldDate\n      throw e\n    }\n  }\n\n  /**\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\n   * ```\n   * @param date positive or negative integer value to set month\n   */\n  setMonth(month: number) {\n    const oldMonth = this[monthSymbol]\n    try {\n      this[monthSymbol] = month\n      this[convertToADMethod]()\n    } catch (e) {\n      this[monthSymbol] = oldMonth\n      throw e\n    }\n  }\n\n  /**\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\n   * ```\n   * @param date positive integer value to set year\n   */\n  setYear(year: number) {\n    const oldYear = this[yearSymbol]\n    try {\n      this[yearSymbol] = year\n      this[convertToADMethod]()\n    } catch (e) {\n      this[yearSymbol] = oldYear\n      throw e\n    }\n  }\n\n  /**\n   * Format Nepali date string based on format string.\n   * ```\n   * YYYY - 4 digit of year (2077)\n   * YYY  - 3 digit of year (077)\n   * YY   - 2 digit of year (77)\n   * M    - month number (1 - 12)\n   * MM   - month number with 0 padding (01 - 12)\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\n   * D    - Day of Month (1, 2, ... 31, 32)\n   * DD   - Day of Month with zero padding (01, 02, ...)\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\n   * dd   - Week day in short format (Sun, Mon, ..)\n   * ddd  - Week day in long format (Sunday, Monday, ...)\n   * ```\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.format('YYYY/MM/DD') // '2054/11/10'\n   * a.format('YYYY MM DD') // '2054 11 10'\n   * a.format('YYYY') // '2054'\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\n   * a.format('dd', 'np') // 'आइतबार'\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\n   * // Set static variable to 'np' for default Nepali language\n   * NepaliDate.language = 'np'\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\n   * ```\n   * @param formatString\n   * @param language en | np\n   */\n  format(formatString: string, language: 'en' | 'np' = NepaliDate.language): string {\n    return format(this.getBS(), formatString, language)\n  }\n\n  /**\n   * Returns new Nepali Date from the string date format\n   * Similar to calling constructor with string parameter\n   * @param dateString\n   */\n  static parse(dateString: string): NepaliDate {\n    const { date, year, month } = parse(dateString)\n    return new NepaliDate(year, month, date)\n  }\n\n  /**\n   * Returns new Nepali Date converted form current day date.\n   * Similar to calling empty constructor\n   */\n  static now(): NepaliDate {\n    return new NepaliDate()\n  }\n\n  /**\n   * Returns new converted Nepali Date from the provided Javascript Date.\n   * It is similar to passing string as constructor\n   * @param date\n   */\n  static fromAD(date: Date): NepaliDate {\n    return new NepaliDate(date)\n  }\n\n  private [convertToBSMethod](date: Date) {\n    const { AD, BS } = convertToBS(date)\n    this[setAdBs](AD, BS)\n  }\n\n  private [setAdBs](AD: IYearMonthDate, BS: IYearMonthDate) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day)\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date)\n  }\n\n  private [convertToADMethod]() {\n    const { AD, BS } = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    })\n    this[setAdBs](AD, BS)\n  }\n\n  valueOf() {\n    return this[jsDateSymbol].getTime()\n  }\n\n  toString() {\n    return this.format('ddd DD, MMMM YYYY')\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAY,QAGX,CAAA;AAHD,CAAA,UAAY,QAAQ,EAAA;AAClB,IAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACT,IAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACX,CAAC,EAHW,QAAQ,KAAR,QAAQ,GAGnB,EAAA,CAAA,CAAA,CAAA;AAaD;;AAEG;AACH,IAAM,oBAAoB,GAAe;IACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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"}