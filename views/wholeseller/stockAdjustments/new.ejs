<%- include('../layouts/boilerplate', { title: '' , body: '' }) %>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <!-- Nepali Datepicker -->
    <link href="https://nepalidatepicker.sajanmaharjan.com.np/nepali.datepicker/css/nepali.datepicker.v4.0.7.min.css"
        rel="stylesheet" type="text/css" />

    <style>
        .vatable-item {
            background-color: lightgreen;
        }

        .non-vatable-item {
            background-color: lightyellow;
        }

        .dropdown-menu {
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }

        .dropdown-item {
            cursor: pointer;
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        .dropdown-item:focus,
        .dropdown-item:hover {
            background-color: #f1f1f1;
        }

        .item {
            margin-bottom: 10px;
        }

        .last-transactions {
            list-style-type: none;
            padding-left: 0;
        }

        .credit-party {
            display: none;
            /* Hide credit party options by default */
        }

        .dropdown-menu {
            display: none;
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-header {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            font-weight: bold;
        }

        .dropdown-item {
            display: flex;
            justify-content: space-around;
            padding: 8px;
            border-bottom: 1px solid #dee2e6;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        /* Styling for Select2 dropdown */
        .select2-container .select2-selection--single {
            height: 40px;
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            display: flex;
            align-items: center;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 100%;
            right: 10px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            color: #495057;
            font-size: 16px;
        }

        /* Focus state for the Select2 dropdown */
        .select2-container--default .select2-selection--single:focus {
            outline: none;
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }


        /* Keep the header fixed at the top */
        .dropdown-header {
            display: grid;
            grid-template-columns: 2fr 2fr 5fr 2fr 2fr 2fr 1fr;
            padding: 5px;
            border-bottom: 1px solid #ccc;
            top: 0;
            /* Stick to the top of the dropdown */
            background-color: #f0f0f0;
            /* Optional: ensure background color to avoid transparency */
            z-index: 1;
            /* Ensure the header stays on top of other items */
        }

        /* Ensure the dropdown container is scrollable */
        #dropdownMenu {
            /* Set a fixed height for the dropdown */
            overflow-y: auto;
            /* Enable vertical scrolling */
            width: 100%;
            /* Ensure the dropdown takes up full width */
        }

        /* Optional: style for the dropdown items */
        .dropdown-item {
            display: grid;
            grid-template-columns: 2fr 2fr 5fr 2fr 2fr 2fr 1fr;
            padding: 5px;
        }

        /*Excel-style table*/
        #itemsTable {
            width: 100%;
            border-collapse: collapse;
            font-family: Arial, sans-serif;
        }

        #itemsTable th,
        #itemsTable td {
            padding: 8px 12px;
            text-align: left;
            border: 1px solid #ddd;
        }

        #itemsTable th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        /* Hover effect for rows */
        #itemsTable tr:hover {
            background-color: #f1f1f1;
        }

        /* Custom styles to resize the form */
        .expanded-container {
            max-width: 90%;
            /* Expand the container to 90% of the viewport width */
        }

        .expanded-card {
            width: 100%;
            /* Ensure the card takes full width of the container */
        }

        @media (min-width: 768px) {
            .expanded-container {
                max-width: 90%;
                /* Adjust width for medium and larger screens */
            }
        }

        /* Compact table styles */
        .compact-table {
            font-size: 0.85rem;
            /* Reduce font size (12px) */
        }

        .compact-table th,
        .compact-table td {
            padding: 0.4rem 0.6rem;
            /* Decrease padding for compact appearance */
        }

        .compact-table input.form-control {
            font-size: 0.85rem;
            /* Smaller text size for input fields */
            padding: 0.3rem 0.5rem;
            /* Adjust input padding */
            height: auto;
            /* Reduce input height */
        }

        .compact-table .btn-danger {
            font-size: 0.85rem;
            /* Reduce button text size */
            padding: 0.3rem 0.5rem;
            /* Compact button padding */
        }

        .compact-table input[type="date"] {
            font-size: 0.85rem;
            padding: 0.3rem;
            height: auto;
        }
    </style>

    <div class="container wow-form expanded-container">
        <div class="card mt-4 shadow-lg p-4 animate__animated animate__fadeInUp">
            <div class="card-header">
                Create Adjustment
                <span id="nepaliDateError" style="color: red; display: none;">Invalid date!</span>

            </div>
            <div class="card-body">
                <form action="/stockAdjustments" method="post" id="billForm">
                    <div class="form-group row">

                        <% if (companyDateFormat==='nepali' ) { %>
                            <div class="col">
                                <label for="nepaliDate">Date:</label>
                                <input type="text" name="nepaliDate" id="nepaliDate" class="form-control" required
                                    value="<%= nepaliDate || '' %>" autofocus>
                            </div>
                            <% } else { %>
                                <div class="col">
                                    <label for="billDate">Date:</label>
                                    <input type="date" name="billDate" id="billDate" class="form-control" required
                                        value="<%= new Date().toISOString().split('T')[0] %>" autofocus>
                                </div>
                                <% } %>
                                    <div class="col">
                                        <label for="adjustmentType">Type:</label>
                                        <select id="adjustmentType" name="adjustmentType" class="form-control"
                                            onchange="toggleReasonDropdowns()">
                                            <option value="xcess">Xcess</option>
                                            <option value="short">Short</option>
                                        </select>
                                    </div>
                                    <div class="col">
                                        <label for="billNumber">Vch. No:</label>
                                        <input type="number" name="billNumber" id="billNumber" class="form-control"
                                            value="<%=nextBillNumber %>" oninput="this.value='<%=nextBillNumber%>'"
                                            onfocus="selectValue(this)">
                                    </div>

                                    <div class="col">
                                        <label for="isVatExempt">VAT</label>
                                        <select name="isVatExempt" id="isVatExempt" class="form-control"
                                            onchange="toggleVatInputs()"
                                            onchange="filterItems(document.getElementById('itemSearch'))">
                                            <% if (vatEnabled) {%>
                                                <option value="all">All</option>
                                                <option value="false">13%</option>
                                                <%}%>
                                                    <option value="true">Exempt</option>
                                        </select>
                                    </div>
                    </div>
                    <hr style="border: 1px solid gray;">
                    <!-- <div class="form-group row">
                        <div class="col">
                            <div class="form-group row">
                                <div class="col">
                                    <label for="itemSearch">Search Item</label>
                                    <input type="text" id="itemSearch" class="form-control"
                                        placeholder="Search for an item" autocomplete="off"
                                        onkeydown="handleItemSearchKeydown(event)">
                                    <div id="dropdownMenu" class="dropdown-menu"></div>
                                </div>
                            </div>
                        </div>
                    </div> -->

                    <div class="form-group row">
                        <div class="col">
                            <label for="itemSearch">Search Item</label>
                            <input type="text" id="itemSearch" class="form-control" placeholder="Search for an item"
                                autocomplete="off" onkeydown="handleItemSearchKeydown(event)">
                            <div id="dropdownMenu" class="dropdown-menu"></div>
                        </div>
                    </div>

                    <table class="table table-bordered compact-table" id="itemsTable">
                        <thead>
                            <tr>
                                <th>S.No.</th>
                                <th>#</th>
                                <th>Description of Goods</th>
                                <th>HSN</th>
                                <th>Qty</th>
                                <th>Unit</th>
                                <th>Batch</th>
                                <th>Expiry</th>
                                <th>Rate</th>
                                <th>Amount</th>
                                <th>Reason</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="items">
                            <!-- Item rows will be dynamically added here -->
                        </tbody>
                    </table>

                    <hr style="border: 1px solid gray;">
                    <div class="form-group">
                        <label for="note">Description:</label>
                        <input type="text" class="form-control" id="note" name="note" placeholder="add note"
                            onkeydown="handleAddNoteKeydown(event)">
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th colspan="4" class="text-center bg-light">Bill Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><label for="subTotal">Sub Total:</label></td>
                                    <td colspan="2" class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="subTotal">0.00</span></p>
                                    </td>
                                </tr>

                                <tr>
                                    <td><label for="discountPercentage">Discount %:</label></td>
                                    <td>
                                        <input type="number" step="any" name="discountPercentage"
                                            id="discountPercentage" class="form-control" value="0.00"
                                            oninput="calculateTotal()">
                                    </td>
                                    <td><label for="discountAmount">Discount (Rs.):</label></td>
                                    <td>
                                        <input type="number" step="any" name="discountAmount" id="discountAmount"
                                            value="0.00" class="form-control" oninput="calculateTotal()">
                                    </td>
                                </tr>

                                <tr id="taxableAmountRow">
                                    <td><label for="taxableAmount">Taxable Amount:</label></td>
                                    <td colspan="2" class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="taxableAmount">0.00</span>
                                        </p>
                                    </td>
                                </tr>
                                <tr id="vatPercentageRow">
                                    <td><label for="vatPercentage">VAT (13%):</label></td>
                                    <td>
                                        <input type="number" name="vatPercentage" id="vatPercentage"
                                            class="form-control" value="13.00" readonly>
                                    </td>
                                    <td><label for="vatAmount">VAT Amount:</label></td>
                                    <td class="text-right">
                                        <p class="form-control-plaintext">Rs. <span id="vatAmount">0.00</span></p>
                                    </td>
                                </tr>

                                <tr class="hidden">
                                    <td><label for="roundOffAmount">Round Off:</label></td>
                                    <td colspan="2">
                                        <input type="number" class="form-control" step="any" id="roundOffAmount"
                                            name="roundOffAmount" value="0.00" oninput="calculateTotal()">
                                    </td>
                                </tr>

                                <tr>
                                    <td><label for="totalAmount">Total Amount:</label></td>
                                    <td>
                                        <p class="form-control-plaintext">Rs. <span id="totalAmount">0.00</span></p>
                                    </td>
                                    <td><label for="amountInWords">In Words:</label></td>
                                    <td class="text-right">
                                        <p class="form-control-plaintext" id="amountInWords">Zero Only.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-primary mr-2 p-3" id="saveBill"
                            onclick="submitBillForm(false)">
                            <i class="bi bi-save"></i>
                        </button>
                        <button type="button" class="btn btn-secondary p-3" onclick="submitBillForm(true)">
                            <i class="bi bi-printer"></i>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Batch and Expiry Modal -->
    <div class="modal fade" id="batchModal" tabindex="-1" aria-labelledby="batchModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="batchModalLabel">Batch Information</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="batchModalBody">
                    <!-- Batch information will be populated here dynamically -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Sales Price Modal -->
    <div class="modal fade" id="setSalesPriceModal" tabindex="-1" aria-labelledby="setSalesPriceModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="setSalesPriceModalLabel">Set Sales Price for New Batch</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="puPrice" class="form-label">Purchase Price</label>
                        <input type="number" class="form-control" id="puPrice" step="any" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="marginPercentage" class="form-label">Margin Percentage (%)</label>
                        <input type="number" class="form-control" id="marginPercentage" min="0" step="any"
                            placeholder="Enter margin percentage">
                    </div>
                    <div class="mb-3">
                        <label for="currency" class="form-label">Currency</label>
                        <select class="form-select" id="currency">
                            <option value="NPR">NPR</option>
                            <option value="INR">INR</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="mrp" class="form-label">MRP</label>
                        <input type="number" class="form-control" id="mrp" step="any" placeholder="Enter MRP">
                    </div>
                    <div class="mb-3">
                        <label for="salesPrice" class="form-label">Sales Price</label>
                        <input type="number" class="form-control" id="salesPrice" step="any" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveSalesPrice">Save Sales Price</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://nepalidatepicker.sajanmaharjan.com.np/nepali.datepicker/js/nepali.datepicker.v4.0.7.min.js"
        type="text/javascript"></script>
    <script>
        let itemIndex = 0;
        let currentFocus = 0;
        let isFirstLoad = true;

        window.onload = function () {
            var nepaliDate = document.getElementById("nepaliDate");

            nepaliDate.nepaliDatePicker();

            // Add validation for Invoice Date
            nepaliDate.addEventListener("blur", function (event) {
                validateNepaliDate(this, "nepaliDateError", event);
            });
        };

        // Function to validate Nepali date
        function validateNepaliDate(inputField, errorSpanId, event) {
            var errorSpan = document.getElementById(errorSpanId);
            var dateString = inputField.value.trim();

            // Check if the date is blank
            if (!dateString) {
                errorSpan.textContent = "Date cannot be blank!"; // Set error message
                errorSpan.style.display = "inline"; // Show error message
                event.preventDefault(); // Prevent moving to the next field
                inputField.focus(); // Keep focus on the current input field
                return;
            }

            // Check if the date is valid
            if (!isValidNepaliDate(dateString)) {
                errorSpan.textContent = "Invalid date!"; // Set error message
                errorSpan.style.display = "inline"; // Show error message
                event.preventDefault(); // Prevent moving to the next field
                inputField.focus(); // Keep focus on the current input field
            } else {
                errorSpan.style.display = "none"; // Hide error message
            }
        }

        // Function to check if the Nepali date is valid
        function isValidNepaliDate(dateString) {
            // Regular expression to match the Nepali date format (YYYY-MM-DD)
            var datePattern = /^(\d{4})-(\d{1,2})-(\d{1,2})$/;
            if (!datePattern.test(dateString)) return false;

            // Split the date string into year, month, and day
            var parts = dateString.split("-");
            var year = parseInt(parts[0], 10);
            var month = parseInt(parts[1], 10);
            var day = parseInt(parts[2], 10);

            // Check if the month and day are valid
            if (isNaN(year) || isNaN(month) || isNaN(day)) return false;
            if (month < 1 || month > 12 || day < 1 || day > 32) return false;

            // Manually validate the number of days in the month
            var maxDays = getMaxDaysInNepaliMonth(year, month);
            if (day > maxDays) return false;

            return true;
        }

        // Function to get the maximum number of days in a Nepali month
        function getMaxDaysInNepaliMonth(year, month) {
            // Define the number of days in each month for a given year
            // This is a simplified example and may not cover all edge cases
            var nepaliMonths = [
                31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30 // Example for year 2080
            ];

            // Adjust for leap years if necessary
            if (year % 4 === 0 && month === 1) { // Check if it's a leap year and the month is Baisakh
                nepaliMonths[0] = 31; // Baisakh has 31 days in a leap year
            }

            return nepaliMonths[month - 1]; // Return the number of days for the given month
        }

        //for english date validation
        function validateDate(input) {
            const errorMessage = input.nextElementSibling; // Get the error message span
            const dateValue = input.value;

            // Check if the date is valid
            if (!dateValue || isNaN(new Date(dateValue).getTime())) {
                errorMessage.textContent = "Invalid date!";
                errorMessage.style.display = "block";
                input.focus(); // Prevent moving to the next field
            } else {
                errorMessage.style.display = "none"; // Hide error if valid
            }
        }


        async function fetchItems(query, vatStatus, existingItemIds) {
            try {
                const response = await fetch(`/items/search?q=${query}&isVatExempt=${vatStatus}`);
                const data = await response.json();

                console.log('Fetched items:', data);

                if (!Array.isArray(data)) {
                    throw new Error('Invalid response format');
                }

                return data;
            } catch (error) {
                console.error('Error fetching items:', error);
                return [];
            }
        }


        document.getElementById('itemSearch').addEventListener('keydown', function (event) {
            const inputField = this;
            const dropdownMenu = document.getElementById('dropdownMenu');
            const items = dropdownMenu.getElementsByClassName('dropdown-item');

            if (event.key === 'ArrowDown') {
                // Navigate down the list
                currentFocus++;
                addActive(items);
                scrollToItem(items);
                updateInputWithHighlightedItem(items);
            } else if (event.key === 'ArrowUp') {
                // Navigate up the list
                currentFocus--;
                addActive(items);
                scrollToItem(items);
                updateInputWithHighlightedItem(items);
            } else if (event.key === 'Enter') {
                // Select the item
                event.preventDefault();

                if (currentFocus > -1) {
                    if (items[currentFocus]) {
                        items[currentFocus].click();


                        // Clear the input field after selection
                        inputField.value = '';
                    }
                }
            }
        });

        function addActive(items) {
            if (!items) return false;
            removeActive(items);
            if (currentFocus >= items.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = items.length - 1;
            items[currentFocus].classList.add('active');
        }

        function removeActive(items) {
            for (let i = 0; i < items.length; i++) {
                items[i].classList.remove('active');
            }
        }

        function scrollToItem(items) {
            if (currentFocus >= 0 && currentFocus < items.length) {
                const item = items[currentFocus];
                item.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest' // Ensures the item is in view without scrolling too far
                });
            }
        }

        function updateInputWithHighlightedItem(items) {
            const inputField = document.getElementById('itemSearch');
            if (currentFocus > -1 && items[currentFocus]) {
                const itemName = items[currentFocus].querySelector('div:nth-child(3)').textContent;
                inputField.value = itemName; // Update the input field with the highlighted item's name
            }
        }


        async function showAllItems(input) {
            const dropdownMenu = input.nextElementSibling;
            const vatStatus = document.getElementById('isVatExempt').value;
            const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
                .filter(input => input.name.includes('[item]'))
                .map(input => input.value);

            // Fetch all items with an empty query
            const items = await fetchItems('', vatStatus, existingItemIds);
            console.log('All items:', items);

            // Clear existing dropdown items
            dropdownMenu.innerHTML = '';

            if (items.length === 0) {
                const noItemsMessage = document.createElement('div');
                noItemsMessage.classList.add('dropdown-item');
                noItemsMessage.textContent = 'No items found';
                noItemsMessage.style.textAlign = 'center';
                noItemsMessage.style.color = 'white';
                noItemsMessage.style.backgroundColor = 'blue';
                dropdownMenu.appendChild(noItemsMessage);
                dropdownMenu.classList.add('show');
            } else {
                // Add header row
                const headerRow = document.createElement('div');
                headerRow.classList.add('dropdown-header');
                headerRow.innerHTML = `
            <div><strong>Item Code</strong></div>
            <div><strong>HS Code</strong></div>
            <div><strong>Name</strong></div>
            <div><strong>Stock</strong></div>
            <div><strong>Unit</strong></div>
            <div><strong>C.Rate</strong></div>
        `;
                headerRow.style.backgroundColor = '#f0f0f0';
                headerRow.style.fontWeight = 'bold';
                dropdownMenu.appendChild(headerRow);

                // Add item rows
                items.forEach(item => {
                    const dropdownItem = document.createElement('div');
                    dropdownItem.classList.add('dropdown-item');
                    dropdownItem.tabIndex = 0;

                    if (item.vatStatus === 'vatable') {
                        dropdownItem.classList.add('vatable-item');
                    } else {
                        dropdownItem.classList.add('non-vatable-item');
                    }

                    // Calculate total stock and fetch price from stock entries
                    const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);
                    const latestStockEntry = item.stockEntries[item.stockEntries.length - 1];
                    const puPrice = latestStockEntry ? latestStockEntry.puPrice : 0;

                    dropdownItem.innerHTML = `
                <div>${item.uniqueNumber || 'N/A'}</div>
                <div>${item.hscode || 'N/A'}</div>
                <div>${item.name}</div>
                <div>${totalStock}</div>
                <div>${item.unit ? item.unit.name : ''}</div>
                <div>Rs.${puPrice.toFixed(2)}</div>
            `;

                    dropdownItem.addEventListener('click', () => {
                        addItemToBill(item, dropdownMenu);
                        input.value = item.name;
                        dropdownMenu.classList.remove('show');
                    });
                    dropdownMenu.appendChild(dropdownItem);
                });

                dropdownMenu.classList.add('show');
                currentFocus = 0;
                addActive(dropdownMenu.getElementsByClassName('dropdown-item'));

                // Auto-fill and auto-select the input field with the first item name on the first load
                if (isFirstLoad && items.length > 0) {
                    input.value = items[0].name;
                    input.select(); // Auto-select the input text
                    isFirstLoad = false; // Set the flag to false after the first time
                }
            }
        }




        // Add event listener for focus to show all items
        document.getElementById('itemSearch').addEventListener('focus', function () {
            showAllItems(this);
        });


        // Add event listener for input to fetch items dynamically
        document.getElementById('itemSearch').addEventListener('input', function () {
            const query = this.value.trim().toLowerCase();
            const vatStatus = document.getElementById('isVatExempt').value;
            const dropdownMenu = this.nextElementSibling;

            if (query.length === 0) {
                showAllItems(this);
                return;
            }

            const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
                .filter(input => input.name.includes('[item]'))
                .map(input => input.value);

            fetchItems(query, vatStatus, existingItemIds).then(items => {
                dropdownMenu.innerHTML = '';

                if (items.length === 0) {
                    const noItemsMessage = document.createElement('div');
                    noItemsMessage.classList.add('dropdown-item');
                    noItemsMessage.textContent = 'No items found';
                    noItemsMessage.style.textAlign = 'center';
                    noItemsMessage.style.color = 'white';
                    noItemsMessage.style.backgroundColor = 'blue';
                    dropdownMenu.appendChild(noItemsMessage);
                    dropdownMenu.classList.add('show');
                } else {
                    items.forEach(item => {
                        const dropdownItem = document.createElement('div');
                        dropdownItem.classList.add('dropdown-item');
                        dropdownItem.tabIndex = 0;

                        if (item.vatStatus === 'vatable') {
                            dropdownItem.classList.add('vatable-item');
                        } else {
                            dropdownItem.classList.add('non-vatable-item');
                        }

                        const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);

                        dropdownItem.innerHTML = `
                    <div>${item.uniqueNumber || 'N/A'}</div>
                    <div>${item.hscode || 'N/A'}</div>
                    <div>${item.name}</div>
                    <div>${item.category ? item.category.name : 'No Category'}</div>
                    <div>${totalStock}</div>
                    <div>${item.unit ? item.unit.name : ''}</div>
                    <div>Rs.${item.puPrice}</div>
                `;

                        dropdownItem.addEventListener('click', () => {
                            addItemToBill(item, dropdownMenu);
                            this.value = item.name;
                            dropdownMenu.classList.remove('show'); // Close the dropdown after selection
                        });
                        dropdownMenu.appendChild(dropdownItem);
                    });

                    dropdownMenu.classList.add('show');
                    currentFocus = 0;
                    addActive(dropdownMenu.getElementsByClassName('dropdown-item'));
                }
            });
        });

        // Close dropdown when user clicks outside
        document.addEventListener('click', function (event) {
            const itemSearch = document.getElementById('itemSearch');
            const dropdownMenu = itemSearch.nextElementSibling;

            if (!itemSearch.contains(event.target) && !dropdownMenu.contains(event.target)) {
                dropdownMenu.classList.remove('show'); // Close the dropdown if clicked outside
            }
        });

        let selectedBatch = {}; // Store the selected batch information

        function addItemToBill(item, dropdownMenu) {
            const tbody = document.getElementById('items');
            const inputField = document.getElementById('itemSearch');
            const adjustmentType = document.getElementById('adjustmentType').value;

            if (!inputField.value.trim()) {
                return; // Do not add an item if the search field is blank
            }

            // Sort stock entries by date (FIFO: First In First Out)
            const sortedStockEntries = item.stockEntries.sort((a, b) => new Date(a.date) - new Date(b.date));

            // Get the first stock entry (FIFO)
            const firstStockEntry = sortedStockEntries[0] || {}; // Defaults to an empty object if no stock entry exists


            // Show the batch modal only if adjustmentType is 'short'
            if (adjustmentType === 'short') {
                showBatchModal(item, (batchInfo) => {
                    selectedBatch = batchInfo;
                    createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType);
                });

                // Clear the item search field after adding the item
                inputField.value = '';
            } else {
                // For 'xcess', directly allow input without showing batch modal
                selectedBatch = { batchNumber: '', expiryDate: '', puPrice: firstStockEntry.puPrice || 0 };
                createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType);

                // Clear the item search field after adding the item
                inputField.value = '';
            }
        }

        function createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType) {
            const tr = document.createElement('tr');
            tr.classList.add('item', item.vatStatus ? 'vatable-item' : 'non-vatable-item');

            const serialNumber = tbody.rows.length + 1;

            tr.innerHTML = `
        <td>${serialNumber}</td>
        <td>${item.uniqueNumber || 'N/A'}</td>
        <td class="col-3">
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.name}
        </td>
        <td>
            <input type="hidden" name="items[${itemIndex}][hscode]" value="${item.hscode || 'N/A'}">
            ${item.hscode || 'N/A'}
        </td>
        <td>
            <input type="number" name="items[${itemIndex}][quantity]" value="0" class="form-control item-quantity" id="quantity-${itemIndex}" min="1" step="any" oninput="updateItemTotal(this)" onkeydown="handleQuantityKeydown(event,${itemIndex})" onfocus="selectValue(this)">
        </td>
        <td>
            ${item.unit ? item.unit.name : ''}
            <input type="hidden" name="items[${itemIndex}][unit]" value="${item.unit ? item.unit._id : ''}">
        </td>
        <!-- Add fields for batch number and expiry date, these will remain editable -->
        <td>
            <input type="text" name="items[${itemIndex}][batchNumber]" value="${selectedBatch.batchNumber || "XXX"}" class="form-control item-batchNumber" id="batchNumber-${itemIndex}" onkeydown="handleBatchKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
        </td>
         <td>
            <input type="date" name="items[${itemIndex}][expiryDate]" value="${selectedBatch.expiryDate || getDefaultExpiryDate()}" class="form-control item-expiryDate" id="expiryDate-${itemIndex}" onkeydown="handleExpDateKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
        </td>
        <td><input type="number" name="items[${itemIndex}][puPrice]" value="${selectedBatch.puPrice}" class="form-control item-puPrice" id="puPrice-${itemIndex}" step="any" oninput="updateItemTotal(this)" onkeydown="handlePriceKeydown(event, ${itemIndex})" onfocus="selectValue(this)"></td>
        <td class="item-amount">0.00</td>
        <td>
            <select name="items[${itemIndex}][reason]" class="form-control reason-dropdown short-reason" style="${adjustmentType === 'short' ? 'display: block;' : 'display: none;'}" id="shortReason-${itemIndex}" onkeydown="handleReasonKeydown(event,${itemIndex})" onfocus="selectValue(this)">
                <option value="">None</option>
                <option value="Exp.">Exp.</option>
                <option value="Damage">Damage</option>
                <option value="Donate">Donate</option>
            </select>
            <select name="items[${itemIndex}][reason]" class="form-control reason-dropdown xcess-reason" style="${adjustmentType === 'xcess' ? 'display: block;' : 'display: none;'}" id="xcessReason-${itemIndex}" onkeydown="handleReasonKeydown(event,${itemIndex})" onfocus="selectValue(this)">
                <option value="">None</option>
                <option value="Bonus">Bonus</option>
            </select>
        </td>
        <td>
            <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="removeItem(this)">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
        <input type="hidden" name="items[${itemIndex}][vatStatus]" value="${item.vatStatus}">
    `;
            tbody.appendChild(tr);
            itemIndex++;
            calculateTotal();

            // Hide the dropdown menu after selecting an item
            dropdownMenu.classList.remove('show');

            // Focus on the newly added row's quantity input
            document.getElementById(`quantity-${itemIndex - 1}`).focus();
        }

        function showBatchModal(item, callback) {
            const modal = document.getElementById('batchModal');
            const modalBody = document.getElementById('batchModalBody');

            const outOfStock = item.stockEntries.every((entry) => entry.quantity === 0);
            let modalContent = `<h5>Batch Information for ${item.name}</h5>`;

            if (outOfStock) {
                modalContent += `<div class="alert alert-warning" role="alert">Out of Stock</div>`;
            } else {
                modalContent += `
        <table class="table" id="batchTable">
            <thead>
                <tr>
                    <th>Batch Number</th>
                    <th>Expiry Date</th>
                    <th>Quantity</th>
                    <th>S.P</th>
                    <th>C.P</th>
                    <th>%</th>
                    <th>Mrp</th>

                </tr>
            </thead>
            <tbody>
        `;

                item.stockEntries.forEach((entry) => {
                    if (entry.quantity > 0) {
                        modalContent += `
                <tr tabindex="0">
                    <td>${entry.batchNumber || 'N/A'}</td>
                    <td>${entry.expiryDate || 'N/A'}</td>
                    <td>${entry.quantity}</td>
                    <td>${entry.price}</td>
                    <td>${entry.puPrice}</td>
                    <td>${entry.marginPercentage}</td>
                    <td>${entry.mrp}</td>

                </tr>
            `;
                    }
                });

                modalContent += '</tbody></table>';
            }

            modalBody.innerHTML = modalContent;
            $(modal).modal('show');

            $(modal).on('shown.bs.modal', function () {
                const firstRow = modalBody.querySelector('tbody tr');
                if (firstRow) {
                    firstRow.focus();
                }
            });

            const rows = modalBody.querySelectorAll('tbody tr');
            let selectedIndex = 0;

            rows.forEach((row, index) => {
                row.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowDown') {
                        selectedIndex = (index + 1) % rows.length;
                        rows[selectedIndex].focus();
                    } else if (event.key === 'ArrowUp') {
                        selectedIndex = (index - 1 + rows.length) % rows.length;
                        rows[selectedIndex].focus();
                    } else if (event.key === 'Enter') {
                        const batchNumber = row.cells[0].textContent;
                        const expiryDate = row.cells[1].textContent;
                        const puPrice = row.cells[4].textContent;
                        callback({ batchNumber, expiryDate, puPrice });
                        $(modal).modal('hide');
                    }
                });
            });

            modal.addEventListener('hidden.bs.modal', function () {
                modalBody.innerHTML = '';
            });
        }

        function getDefaultExpiryDate() {
            const today = new Date();
            today.setFullYear(today.getFullYear() + 2); // Add 2 years to the current year
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-indexed
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function removeItem(button) {
            const row = button.closest('tr');
            row.remove();
            calculateTotal();
        }

        function toggleReasonDropdowns() {
            const adjustmentType = document.getElementById('adjustmentType').value;
            const rows = document.querySelectorAll('#items tr');

            rows.forEach(row => {
                const shortReasonDropdown = row.querySelector('.short-reason');
                const xcessReasonDropdown = row.querySelector('.xcess-reason');

                if (adjustmentType === 'short') {
                    shortReasonDropdown.style.display = 'block';
                    xcessReasonDropdown.style.display = 'none';
                } else if (adjustmentType === 'xcess') {
                    shortReasonDropdown.style.display = 'none';
                    xcessReasonDropdown.style.display = 'block';
                } else {
                    shortReasonDropdown.style.display = 'none';
                    xcessReasonDropdown.style.display = 'none';
                }
            });
        }

        // Initial setup for reason dropdowns on page load
        document.addEventListener('DOMContentLoaded', function () {
            toggleReasonDropdowns();
        });

        // Update dropdowns when adjustment type changes
        document.getElementById('adjustmentType').addEventListener('change', toggleReasonDropdowns);



        function updateItemTotal(input) {
            const row = input.closest('tr');
            const quantity = parseFloat(row.querySelector('input.item-quantity').value) || 0;
            const puPrice = parseFloat(row.querySelector('input.item-puPrice').value) || 0;
            const amount = quantity * puPrice;
            row.querySelector('.item-amount').textContent = amount.toFixed(2);
            calculateTotal();
        }

        function updateDiscountFromPercentage() {
            const subTotal = calculateSubTotal();
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountAmount = (subTotal * discountPercentage) / 100;
            document.getElementById('discountAmount').value = discountAmount.toFixed(2);
        }

        function updateDiscountFromAmount() {
            const subTotal = calculateSubTotal();
            const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
            const discountPercentage = (discountAmount / subTotal) * 100;
            document.getElementById('discountPercentage').value = discountPercentage.toFixed(2);
        }

        function calculateSubTotal() {
            const rows = document.querySelectorAll('#items tr.item');
            let subTotal = 0;

            rows.forEach(row => {
                const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
                const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value === 'true';

                subTotal += amount;
                if (vatStatus) {
                    taxableAmount += amount;
                    vatAmount += amount * 0.13; // VAT is 13%
                }
            });

            return subTotal;
        }
        function calculateTotal() {
            const rows = document.querySelectorAll('#items tr.item');
            let subTotal = 0;
            let totalTaxableAmount = 0;
            let totalNonTaxableAmount = 0;

            // Calculate Subtotal and separate taxable/non-taxable amounts
            rows.forEach(row => {
                const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
                const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value;

                subTotal += amount;
                if (vatStatus === 'vatable') {
                    totalTaxableAmount += amount;
                } else {
                    totalNonTaxableAmount += amount;
                }
            });

            // Get discount values
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;

            const totalDiscount = discountAmount + (subTotal * discountPercentage / 100);

            // Calculate final taxable amounts after discount
            const finalTaxableAmount = totalTaxableAmount - (totalTaxableAmount * discountPercentage / 100);
            const finalNonTaxableAmount = totalNonTaxableAmount - (totalNonTaxableAmount * discountPercentage / 100);

            // Calculate VAT (13% on taxable items)
            const vatPercentage = parseFloat(document.getElementById('vatPercentage').value) || 13;
            const vatAmount = finalTaxableAmount * (vatPercentage / 100);

            // Calculate Round Off and Total
            const roundOffAmount = parseFloat(document.getElementById('roundOffAmount').value) || 0;
            const totalAmount = finalTaxableAmount + finalNonTaxableAmount + vatAmount + roundOffAmount;

            // Update DOM elements with calculated values
            document.getElementById('subTotal').textContent = subTotal.toFixed(2);
            document.getElementById('taxableAmount').textContent = finalTaxableAmount.toFixed(2);
            document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
            document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);

            // Convert total amount to words
            const amountInWords = numberToWords(totalAmount) + ' Only.';
            document.getElementById('amountInWords').textContent = amountInWords;
        }


        function toggleVatInputs() {
            const isVatExempt = document.getElementById('isVatExempt').value === 'true';

            // VAT-related fields
            const vatInputs = document.getElementById('vatInputs'); // Group for VAT-related inputs
            const taxableAmountRow = document.getElementById('taxableAmountRow');
            const vatPercentageRow = document.getElementById('vatPercentageRow');
            // const vatAmountRow = document.getElementById('vatAmountRow');

            // Toggle display based on VAT exemption
            if (isVatExempt) {
                taxableAmountRow.style.display = 'none';
                vatPercentageRow.style.display = 'none';
                // vatAmountRow.style.display = 'none';
                moveToNextVisibleInput(document.getElementById('isVatExempt'));
            } else {
                taxableAmountRow.style.display = 'table-row'; // Show taxable amount row
                vatPercentageRow.style.display = 'table-row'; // Show VAT 13% row
                // vatAmountRow.style.display = 'table-row'; // Show VAT amount row
            }

            // Recalculate total when toggling VAT
            calculateTotal();
        }

        function moveToNextVisibleInput(currentElement) {
            const formElements = Array.from(document.querySelectorAll('input, select, textarea, button'));

            // Find the current element's index in the form
            const currentIndex = formElements.indexOf(currentElement);

            // Iterate through the remaining elements to find the next visible one
            for (let i = currentIndex + 1; i < formElements.length; i++) {
                if (formElements[i].offsetParent !== null) { // Check if the element is visible
                    formElements[i].focus();
                    break;
                }
            }
        }

        function showPrintModal() {
            $('#printModal').modal('show');
        }

        function submitBillForm(print) {
            shouldPrint = print;
            const billForm = document.getElementById('billForm');
            const saveButton = document.getElementById('saveBill');

            // Change button text and disable it
            saveButton.innerText = 'Saving...';
            saveButton.disabled = true;

            if (print) {
                const url = new URL(billForm.action);
                url.searchParams.append('print', 'true');
                billForm.action = url.toString();
            }

            // Simulate form submission (replace this with actual form submission logic)
            setTimeout(() => {
                billForm.submit();

                // Reset button text and enable it after submission
                saveButton.innerText = 'Save Bill';
                saveButton.disabled = false;
            }, 2000); // Simulating a delay; adjust or remove as needed
        }


        document.getElementById('billForm').addEventListener('submit', function (event) {
            if (!shouldPrint && event.submitter && event.submitter.innerText === 'Save & Print Bill') {
                event.preventDefault();
                showPrintModal();
            }
        });
        function numberToWords(num) {
            const ones = [
                '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
                'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
                'Seventeen', 'Eighteen', 'Nineteen'
            ];

            const tens = [
                '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
            ];

            const scales = ['', 'Thousand', 'Million', 'Billion'];

            function convertHundreds(num) {
                let words = '';

                if (num > 99) {
                    words += ones[Math.floor(num / 100)] + ' Hundred ';
                    num %= 100;
                }

                if (num > 19) {
                    words += tens[Math.floor(num / 10)] + ' ';
                    num %= 10;
                }

                if (num > 0) {
                    words += ones[num] + ' ';
                }

                return words.trim();
            }

            if (num === 0) return 'Zero';

            if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

            let words = '';

            for (let i = 0; i < scales.length; i++) {
                let unit = Math.pow(1000, scales.length - i - 1);
                let currentNum = Math.floor(num / unit);

                if (currentNum > 0) {
                    words += convertHundreds(currentNum) + ' ' + scales[scales.length - i - 1] + ' ';
                }

                num %= unit;
            }

            return words.trim();
        }
        window.addEventListener('DOMContentLoaded', () => {
            toggleVatInputs();
        });

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('discountPercentage').addEventListener('input', function () {
                updateDiscountFromPercentage();
                calculateTotal();
            });

            document.getElementById('discountAmount').addEventListener('input', function () {
                updateDiscountFromAmount();
                calculateTotal();
            });

            // document.querySelectorAll('.price-input, .quantity-input, .item-select').forEach(element => {
            //     element.addEventListener('input', calculateTotal);
            // });

            document.getElementById('roundOffAmount').addEventListener('input', function () {
                calculateTotal();
            });

            calculateTotal();
        });

        // Assuming you have a batch modal with an ID 'batchModal' and an input field inside it
        const batchModal = document.getElementById('batchModal');

        // Add keydown event listener to the batch modal to detect "Enter" press
        batchModal.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent form submission or modal close

                // Focus on the quantity field of the last added row after pressing "Enter"
                focusOnLastQuantityField();
            }
        });

        // Function to focus on the quantity field of the last added item
        function focusOnLastQuantityField() {
            const tbody = document.getElementById('items');

            // Get the last row's quantity field
            const lastRow = tbody.querySelector('tr.item:last-child');

            if (lastRow) {
                const lastQuantityField = lastRow.querySelector('.item-quantity');

                if (lastQuantityField) {
                    lastQuantityField.focus();
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const itemSearchInput = document.getElementById('itemSearch'); // Initial focus on item search input
        });

        async function handleItemSearchKeydown(event) {
            const itemSearchInput = document.getElementById('itemSearch');
            const itemsTable = document.getElementById('itemsTable');
            const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

            if (itemSearchInput.value.length > 0) {
                if (event.key === 'Enter') {

                    focusOnLastRow('item-quantity');
                }
            } else if (itemSearchInput.value.length < 0 || itemsAvailable) {
                if (event.key === 'Enter') {
                    const addNoteInput = document.getElementById('note')
                    addNoteInput.focus();
                }
            }
        }

        function handleAddNoteKeydown(event) {
            if (event.key === 'Enter') {
                const submitBillForm = document.getElementById('saveBill');
                const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

                if (itemsAvailable) {
                    event.preventDefault();
                    submitBillForm.focus();
                }
            }
        }

        function handleQuantityKeydown(event) {
            if (event.key === 'Enter') {
                const batchNumberInput = document.getElementById(`batchNumber-${itemIndex - 1}`);
                batchNumberInput.focus();
                batchNumberInput.select();

            }
        }

        function handleBatchKeydown(event) {
            if (event.key === 'Enter') {
                const expDateInput = document.getElementById(`expiryDate-${itemIndex - 1}`);
                expDateInput.focus();
                expDateInput.select();
            }
        }

        function handleExpDateKeydown(event) {
            if (event.key === 'Enter') {
                const priceInput = document.getElementById(`puPrice-${itemIndex - 1}`);
                priceInput.focus();
                priceInput.select();
            }
        }

        function handlePriceKeydown(event, itemIndex) {
            if (event.key === 'Enter') {
                const puPriceInput = document.getElementById(`puPrice-${itemIndex}`);
                const adjustmentType = document.getElementById('adjustmentType').value;

                if (puPriceInput.value) {
                    // Only show the modal if adjustment type is 'xcess'
                    if (adjustmentType === 'xcess') {
                        // Set the PU Price in the modal
                        document.getElementById('puPrice').value = puPriceInput.value;

                        // Show the sales price modal
                        $('#setSalesPriceModal').modal('show');

                        // Handle modal shown event to focus on the margin percentage input
                        $('#setSalesPriceModal').on('shown.bs.modal', function () {
                            document.getElementById('marginPercentage').focus();
                        });

                        // Handle margin percentage input
                        const marginPercentageInput = document.getElementById('marginPercentage');
                        marginPercentageInput.oninput = function () {
                            updateSalesPriceFromMargin(puPriceInput.value);
                        };

                        // Handle MRP input
                        const mrpInput = document.getElementById('mrp');
                        mrpInput.oninput = function () {
                            updateSalesPriceFromMRP(mrpInput.value);
                            updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
                        };

                        // Handle sales price input
                        const salesPriceInput = document.getElementById('salesPrice');
                        salesPriceInput.oninput = function () {
                            updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
                        };

                        // Handle currency change
                        const currencySelect = document.getElementById('currency');
                        currencySelect.onchange = function () {
                            updateSalesPriceFromMRP(mrpInput.value);
                        };

                        // Handle sales price save action
                        const saveSalesPriceButton = document.getElementById('saveSalesPrice');
                        saveSalesPriceButton.onclick = function () {
                            const salesPrice = document.getElementById('salesPrice').value;
                            const mrpValue = document.getElementById('mrp').value;
                            const marginPercentage = document.getElementById('marginPercentage').value;

                            if (salesPrice) {
                                // Store sales price in a hidden input within the current row
                                const tr = puPriceInput.closest('tr');
                                const salesPriceInput = document.createElement('input');
                                salesPriceInput.type = 'hidden';
                                salesPriceInput.name = `items[${itemIndex}][price]`;
                                salesPriceInput.value = salesPrice;
                                tr.appendChild(salesPriceInput);

                                // Store MRP in a hidden input within the current row
                                const mrpInputHidden = document.createElement('input');
                                mrpInputHidden.type = 'hidden';
                                mrpInputHidden.name = `items[${itemIndex}][mrp]`;
                                mrpInputHidden.value = mrpValue;
                                tr.appendChild(mrpInputHidden);

                                // Store marginPercentage in a hidden input within the current row
                                const marginPercentageInputHidden = document.createElement('input');
                                marginPercentageInputHidden.type = 'hidden';
                                marginPercentageInputHidden.name = `items[${itemIndex}][marginPercentage]`;
                                marginPercentageInputHidden.value = marginPercentage;
                                tr.appendChild(marginPercentageInputHidden);

                                // Close the modal
                                $('#setSalesPriceModal').modal('hide');

                                // Now focus on the reason input field based on the adjustment type
                                const shortReasonInput = document.getElementById(`shortReason-${itemIndex}`);
                                const xcessReasonInput = document.getElementById(`xcessReason-${itemIndex}`);

                                if (adjustmentType === 'short' && shortReasonInput) {
                                    shortReasonInput.focus();
                                    shortReasonInput.select();
                                } else if (adjustmentType === 'xcess' && xcessReasonInput) {
                                    xcessReasonInput.focus();
                                    xcessReasonInput.select();
                                }
                            } else {
                                alert('Please enter a valid sales price.');
                            }
                        };
                    } else {
                        // If adjustment type is 'short', directly move to reason input
                        const shortReasonInput = document.getElementById(`shortReason-${itemIndex}`);
                        if (shortReasonInput) {
                            shortReasonInput.focus();
                            // shortReasonInput.select();
                        }
                    }
                }
            }
        }


        // Function to update sales price based on margin percentage
        function updateSalesPriceFromMargin(puPrice) {
            const marginPercentage = parseFloat(document.getElementById('marginPercentage').value) || 0;
            const salesPriceFromMargin = parseFloat(puPrice) + (parseFloat(puPrice) * marginPercentage / 100);
            document.getElementById('salesPrice').value = salesPriceFromMargin.toFixed(2); // Set calculated sales price from margin
        }

        // Add event listener for Enter key on marginPercentage input
        document.getElementById('marginPercentage').addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                const puPrice = document.getElementById('puPrice').value; // Get the purchase price
                updateSalesPriceFromMargin(puPrice); // Update sales price based on margin
            }
        });

        function updateSalesPriceFromMRP(mrpValue) {
            const currency = document.getElementById('currency').value;
            let salesPriceFromMRP;
            if (currency === 'INR') {
                salesPriceFromMRP = parseFloat(mrpValue) * 1.60; // Convert MRP to sales price for INR
            } else {
                salesPriceFromMRP = parseFloat(mrpValue); // Use MRP directly for NPR
            }
            document.getElementById('salesPrice').value = salesPriceFromMRP.toFixed(2); // Set calculated sales price from MRP
        }

        function updateMarginFromMRPAndSalesPrice(mrpValue, puPriceValue) {
            const salesPrice = parseFloat(document.getElementById('salesPrice').value) || 0;
            const puPrice = parseFloat(puPriceValue) || 0;
            const marginPercentageInput = document.getElementById('marginPercentage');

            // Calculate margin percentage based on (Sales Price - PU Price) / PU Price * 100
            const marginPercentage = ((salesPrice - puPrice) / puPrice) * 100;

            if (!isNaN(marginPercentage) && puPrice > 0) {
                marginPercentageInput.value = marginPercentage.toFixed(2); // Update margin percentage
            } else {
                marginPercentageInput.value = ''; // Reset if the calculation fails or PU Price is 0
            }
        }


        function selectValue(input) {
            input.select(); // Select the value of the input field when it is focused
        }

        function handleReasonKeydown(event) {
            if (event.key === 'Enter') {
                const itemSearchInput = document.getElementById('itemSearch');
                itemSearchInput.focus();
                itemSearchInput.select();
            }
        }

        // function selectValue(input) {
        //     input.select(); // Select the value of the input field when it is focused
        // }

        function focusOnLastRow(fieldClass) {
            const rows = document.querySelectorAll('.item');
            if (rows.length > 0) {
                const lastRow = rows[rows.length - 1];
                const inputField = lastRow.querySelector(`.${fieldClass}`);
                if (inputField) {
                    inputField.focus();
                    inputField.select();
                }
            }
        }


        function moveToNextInput(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent form submission

                // Move to the next visible input
                moveToNextVisibleInput(event.target);
            }
        }


        // Get all the input elements within the form
        const inputs = document.querySelectorAll('form input, form select form group');

        // Attach the moveToNextInput function to the keydown event for each input field
        inputs.forEach(input => {
            input.addEventListener('keydown', moveToNextInput);
        });


        // Function to handle Enter key press for moving to the next input field for setSalesPrice model
        function moveToNextField(event, nextFieldId) {
            if (event.key === 'Enter') {
                // Prevent the default Enter key action (e.g., form submission)
                event.preventDefault();

                // Focus on the next input field or element by id
                const nextField = document.getElementById(nextFieldId);
                if (nextField) {
                    nextField.focus();
                }
            }
        }

        // Add event listeners for each input field (except the read-only ones and select elements)
        document.getElementById('marginPercentage').addEventListener('keypress', function (event) {
            moveToNextField(event, 'currency'); // Focus on 'currency' select when Enter is pressed
        });

        document.getElementById('currency').addEventListener('keypress', function (event) {
            moveToNextField(event, 'mrp'); // Focus on 'mrp' input when Enter is pressed
        });

        document.getElementById('mrp').addEventListener('keypress', function (event) {
            moveToNextField(event, 'salesPrice'); // Focus on 'salesPrice' input when Enter is pressed
        });

        document.getElementById('salesPrice').addEventListener('keypress', function (event) {
            moveToNextField(event, 'saveSalesPrice'); // Focus on 'saveSalesPrice' button when Enter is pressed
        });

        // Add an event listener to the paymentMode select element
        document.getElementById('adjustmentType').addEventListener('keydown', function (event) {
            // Check if the Enter key is pressed (key code 13)
            if (event.key === 'Enter') {
                // Prevent the default form submission behavior
                event.preventDefault();

                // Move focus to the next input field
                document.getElementById('billNumber').focus();
            }
        });
        // Add an event listener to the paymentMode select element
        document.getElementById('isVatExempt').addEventListener('keydown', function (event) {
            // Check if the Enter key is pressed (key code 13)
            if (event.key === 'Enter') {
                // Prevent the default form submission behavior
                event.preventDefault();

                // Move focus to the next input field
                document.getElementById('itemSearch').focus();
            }
        });
    </script>