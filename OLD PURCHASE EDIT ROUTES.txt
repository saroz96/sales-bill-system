
//router.put logic should be here
router.put('/purchase-bills/edit/:id', isLoggedIn, ensureAuthenticated, ensureCompanySelected, ensureTradeType, ensureFiscalYear, checkFiscalYearDateRange, checkDemoPeriod, async (req, res) => {
    if (req.tradeType === 'retailer') {
        const billId = req.params.id;
        const {
            accountId,
            items,
            vatPercentage,
            transactionDateRoman,
            transactionDateNepali,
            partyBillNumber,
            billDate,
            nepaliDate,
            isVatExempt,
            discountPercentage,
            paymentMode,
            roundOffAmount: manualRoundOffAmount,
        } = req.body;

        const companyId = req.session.currentCompany;
        const currentFiscalYear = req.session.currentFiscalYear.id;
        const userId = req.user._id;

        if (!companyId) {
            return res.status(400).json({ error: 'Company ID is required.' });
        }
        if (!isVatExempt) {
            return res.status(400).json({ error: 'Invalid vat selection.' });
        }
        if (!paymentMode) {
            return res.status(400).json({ error: 'Invalid payment mode.' });
        }

        const accounts = await Account.findOne({ _id: accountId, company: companyId });
        if (!accounts) {
            return res.status(400).json({ error: 'Invalid account for this company' });
        }

        try {
            // Check if the purchase bill can be edited
            const isEditable = await PurchaseBill.isEditable(billId);

            if (!isEditable) {
                req.flash('error', 'Could not edit, Stock is used!');
                return res.redirect(`/purchase-bills/edit/${billId}`);
            }

            const existingBill = await PurchaseBill.findOne({ _id: billId, company: companyId });
            if (!existingBill) {
                req.flash('error', 'Purchase not found');
                return res.redirect('/purchase-bills-list');
            }

            // for (const existingItem of existingBill.items) {
            //     const product = await Item.findById(existingItem.item);

            //     if (!product) continue; // Skip if product not found

            //     // Find the exact stock entry that matches the batch number and was added in this voucher
            //     const stockEntryIndex = product.stockEntries.findIndex(entry =>
            //         entry.batchNumber === existingItem.batchNumber &&
            //         entry.date.toISOString() === existingBill.date.toISOString()
            //     );

            //     if (stockEntryIndex !== -1) {
            //         const stockEntry = product.stockEntries[stockEntryIndex];

            //         // Reduce only the quantity that was associated with this voucher
            //         stockEntry.quantity -= existingItem.quantity;

            //         // If the quantity reaches zero, remove the entry
            //         if (stockEntry.quantity <= 0) {
            //             product.stockEntries.splice(stockEntryIndex, 1);
            //         }

            //         // Recalculate total stock after modification
            //         product.stock = product.stockEntries.reduce((total, entry) => total + entry.quantity, 0);

            //         await product.save();
            //     }
            // }

            for (const existingItem of existingBill.items) {
                const product = await Item.findById(existingItem.item);

                if (!product) continue; // Skip if product not found

                // Find the exact stock entry matching the batch number and date
                const stockEntryIndex = product.stockEntries.findIndex(entry =>
                    entry.batchNumber === existingItem.batchNumber &&
                    new Date(entry.date).toDateString() === new Date(existingBill.date).toDateString()
                );

                if (stockEntryIndex !== -1) {
                    const stockEntry = product.stockEntries[stockEntryIndex];

                    // Convert quantity to pieces using WSUnit
                    const convertedQuantity = existingItem.quantity * (existingItem.WSUnit || 1);

                    // Reduce only the quantity associated with this voucher
                    stockEntry.quantity -= convertedQuantity;

                    // If quantity reaches zero or below, remove the entry
                    if (stockEntry.quantity <= 0) {
                        product.stockEntries.splice(stockEntryIndex, 1);
                    }

                    // **Recalculate total stock correctly**
                    product.stock = product.stockEntries.reduce((total, entry) => total + entry.quantity, 0);

                    await product.save();
                }
            }


            // Delete all associated transactions
            await Transaction.deleteMany({ purchaseBillId: billId });
            console.log('Existing transactions deleted successfully');

            // Calculate amounts based on the updated POST route logic
            const isVatExemptBool = isVatExempt === 'true' || isVatExempt === true;
            const isVatAll = isVatExempt === 'all';
            const discount = parseFloat(discountPercentage) || 0;

            let totalTaxableAmount = 0;
            let totalNonTaxableAmount = 0;

            for (const item of items) {
                const product = await Item.findById(item.item);
                if (product.vatStatus) {
                    totalTaxableAmount += item.quantity * item.puPrice;
                } else {
                    totalNonTaxableAmount += item.quantity * item.puPrice;
                }
            }

            const discountForTaxable = (totalTaxableAmount * discount) / 100;
            const discountForNonTaxable = (totalNonTaxableAmount * discount) / 100;

            const finalTaxableAmount = totalTaxableAmount - discountForTaxable;
            const finalNonTaxableAmount = totalNonTaxableAmount - discountForNonTaxable;

            let vatAmount = 0;
            if (!isVatExemptBool || isVatExempt === 'all') {
                vatAmount = (finalTaxableAmount * vatPercentage) / 100;
            }

            const totalAmount = finalTaxableAmount + finalNonTaxableAmount + vatAmount;

            let finalAmount = totalAmount;
            let roundOffAmount = 0;

            const roundOffForPurchase = await Settings.findOne({ companyId, userId, fiscalYear: currentFiscalYear, }) || { roundOffPurchase: false };

            if (roundOffForPurchase.roundOffPurchase) {
                finalAmount = Math.round(finalAmount.toFixed(2));
                roundOffAmount = finalAmount - totalAmount;
            } else if (manualRoundOffAmount && !roundOffForPurchase.roundOffPurchase) {
                roundOffAmount = parseFloat(manualRoundOffAmount);
                finalAmount = totalAmount + roundOffAmount;
            }

            // Update existing bill
            existingBill.account = accountId;
            existingBill.isVatExempt = isVatExemptBool;
            existingBill.vatPercentage = isVatExemptBool ? 0 : vatPercentage;
            existingBill.partyBillNumber = partyBillNumber;
            existingBill.subTotal = totalTaxableAmount + totalNonTaxableAmount;
            existingBill.discountPercentage = discount;
            existingBill.discountAmount = discountForTaxable + discountForNonTaxable;
            existingBill.nonVatSales = finalNonTaxableAmount;
            existingBill.taxableAmount = finalTaxableAmount;
            existingBill.vatAmount = vatAmount;
            existingBill.isVatAll = isVatAll;
            existingBill.totalAmount = finalAmount;
            existingBill.roundOffAmount = roundOffAmount;
            existingBill.paymentMode = paymentMode;
            existingBill.date = nepaliDate || new Date(billDate);
            existingBill.transactionDate = transactionDateNepali || new Date(transactionDateRoman);

            async function addStock(
                product,
                batchNumber,
                expiryDate,
                WSUnit,
                quantity,
                price,
                puPrice,
                marginPercentage,
                mrp,
                isUpdate = false
            ) {
                // Ensure numeric values
                const quantityNumber = Number(quantity);
                const WSUnitNumber = WSUnit !== undefined && WSUnit !== "" && WSUnit !== null ? Number(WSUnit) : 1;
                const parsedPrice = price !== undefined && price !== "" ? parseFloat(price) : 0;
                const parsedPuPrice = puPrice !== undefined && puPrice !== "" ? parseFloat(puPrice) : 0;
                const parsedMrp = mrp !== undefined && mrp !== "" ? parseFloat(mrp) : 0;

                // Convert quantity to pieces
                const convertedQuantity = quantityNumber * WSUnitNumber;

                const stockEntry = {
                    date: nepaliDate ? nepaliDate : new Date(billDate),
                    WSUnit: WSUnitNumber,
                    quantity: convertedQuantity, // Store in pieces
                    batchNumber: batchNumber,
                    expiryDate: expiryDate,
                    price: parsedPrice / WSUnitNumber, // Per piece price
                    puPrice: parsedPuPrice / WSUnitNumber, // Per piece puPrice
                    mainUnitPuPrice: parsedPuPrice, // Keeps original value before division
                    mrp: parsedMrp / WSUnitNumber, // Per piece MRP
                    marginPercentage: marginPercentage,
                };

                console.log("Stock Entry:", stockEntry);

                if (isUpdate) {
                    // Find existing stock entry
                    const stockEntryIndex = product.stockEntries.findIndex(
                        (entry) => entry.batchNumber === batchNumber && entry.expiryDate === expiryDate
                    );

                    // if (stockEntryIndex !== -1) {
                    //     // If stock entry exists, update it correctly
                    //     product.stockEntries[stockEntryIndex].quantity = convertedQuantity; // Replace instead of adding
                    //     product.stockEntries[stockEntryIndex].price = parsedPrice / WSUnitNumber;
                    //     product.stockEntries[stockEntryIndex].puPrice = parsedPuPrice / WSUnitNumber;
                    //     product.stockEntries[stockEntryIndex].mrp = parsedMrp / WSUnitNumber;
                    // } else {
                    //     // If no stock entry for this batch, add a new entry
                    //     product.stockEntries.push(stockEntry);
                    // }
                    if (stockEntryIndex !== -1) {
                        // Update existing stock entry (even if batch changed)
                        product.stockEntries[stockEntryIndex] = {
                            ...product.stockEntries[stockEntryIndex], // Retain existing properties
                            batchNumber: batchNumber, // Update batch number
                            expiryDate: expiryDate,
                            quantity: convertedQuantity, // Update stock correctly
                            price: parsedPrice / WSUnitNumber,
                            puPrice: parsedPuPrice / WSUnitNumber,
                            mrp: parsedMrp / WSUnitNumber,
                            marginPercentage: marginPercentage
                        };
                    } else {
                        // If no stock entry for this batch, add a new entry
                        product.stockEntries.push(stockEntry);
                    }

                } else {
                    // Add new stock entry for a new item
                    product.stockEntries.push(stockEntry);
                }

                // **Ensure total stock is correctly updated**
                product.stock = product.stockEntries.reduce((total, entry) => total + entry.quantity, 0);

                // Also update WSUnit in the product schema
                product.WSUnit = WSUnitNumber;

                await product.save();
            }


            // **Updated processing for billItems to allow multiple entries of the same item**
            const billItems = [...existingBill.items]; // Retain existing items
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const product = await Item.findById(item.item);

                if (!product) {
                    req.flash('error', `Item with id ${item.item} not found`);
                    return res.redirect('/purchase-bills');
                }

                // const existingBillItemIndex = billItems.findIndex(billItem => billItem.item.toString() === item.item);
                const existingBillItemIndex = billItems.findIndex(billItem =>
                    billItem.item.toString() === item.item &&
                    billItem.batchNumber === item.batchNumber
                );

                // const existingBillItemIndex = billItems.findIndex(billItem => billItem.item.toString() === item.item);
                // const existingBillItemIndex = billItems.findIndex(billItem => 
                //     billItem.item && billItem.item.toString() === item.item
                // );
                
                if (existingBillItemIndex !== -1) {
                    // If item already exists, update its quantity & price
                    billItems[existingBillItemIndex].quantity = Number(item.quantity);
                    billItems[existingBillItemIndex].price = item.price; // Update price if needed
                    billItems[existingBillItemIndex].puPrice = item.puPrice; // Update price if needed
                    billItems[existingBillItemIndex].Altquantity = Number(item.quantity);; // Update price if needed
                    billItems[existingBillItemIndex].Altprice = item.price; // Update price if needed
                    billItems[existingBillItemIndex].AltpuPrice = item.puPrice; // Update price if needed
                } else {
                // if (existingBillItemIndex !== -1) {
                //     // If item exists, update ALL fields, including batch number change
                //     billItems[existingBillItemIndex] = {
                //         ...billItems[existingBillItemIndex], // Retain existing properties
                //         batchNumber: item.batchNumber, // Update to new batch number
                //         expiryDate: item.expiryDate,
                //         WSUnit: item.WSUnit,
                //         quantity: Number(item.quantity),
                //         price: item.price,
                //         puPrice: item.puPrice,
                //         Altquantity: Number(item.quantity),
                //         Altprice: item.price,
                //         AltpuPrice: item.puPrice,
                //         mainUnitPuPrice: item.puPrice,
                //         mrp: item.mrp,
                //         marginPercentage: item.marginPercentage,
                //         unit: item.unit,
                //         vatStatus: product.vatStatus
                //     };
                // } else {
                    // Add new item to the bill
                    billItems.push({
                        item: product._id,
                        batchNumber: item.batchNumber,
                        expiryDate: item.expiryDate,
                        WSUnit: item.WSUnit,
                        quantity: item.quantity,
                        price: item.price,
                        puPrice: item.puPrice,
                        Altquantity: item.quantity,
                        Altprice: item.price,
                        AltpuPrice: item.puPrice,
                        mainUnitPuPrice: item.puPrice,
                        mrp: item.mrp,
                        marginPercentage: item.marginPercentage,
                        unit: item.unit,
                        vatStatus: product.vatStatus
                    });
                }

                // Create a transaction for the added or updated item
                const transaction = new Transaction({
                    item: product._id,
                    account: accountId,
                    billNumber: existingBill.billNumber,
                    partyBillNumber: existingBill.partyBillNumber,
                    quantity: item.quantity,
                    puPrice: item.puPrice,
                    unit: item.unit,
                    isType: 'Purc',
                    type: 'Purc',
                    purchaseBillId: existingBill._id,
                    purchaseSalesType: 'Purchase',
                    debit: 0,  // Adjust as per your logic
                    credit: finalAmount, // Since it's a sale
                    paymentMode: paymentMode,
                    balance: 0, // Adjust with balance logic if needed
                    date: nepaliDate ? nepaliDate : new Date(billDate),
                    company: companyId,
                    user: userId,
                    fiscalYear: currentFiscalYear
                });

                await transaction.save();
                console.log('Transaction created:', transaction);

                // const existingTransaction = await Transaction.findOne({
                //     item: product._id,
                //     purchaseBillId: existingBill._id,
                // });

                // if (existingTransaction) {
                //     // If transaction exists, update it instead of adding a new row
                //     existingTransaction.batchNumber = item.batchNumber; // Update batch number
                //     existingTransaction.quantity = item.quantity;
                //     existingTransaction.puPrice = item.puPrice;
                //     existingTransaction.unit = item.unit;
                //     existingTransaction.credit = finalAmount;
                //     existingTransaction.paymentMode = paymentMode;
                //     existingTransaction.date = nepaliDate ? nepaliDate : new Date(billDate);

                //     await existingTransaction.save();
                // } else {
                //     // If no existing transaction, create a new one
                //     const transaction = new Transaction({
                //         item: product._id,
                //         batchNumber: item.batchNumber, // Add batch number field
                //         account: accountId,
                //         billNumber: existingBill.billNumber,
                //         partyBillNumber: existingBill.partyBillNumber,
                //         quantity: item.quantity,
                //         puPrice: item.puPrice,
                //         unit: item.unit,
                //         isType: 'Purc',
                //         type: 'Purc',
                //         purchaseBillId: existingBill._id,
                //         purchaseSalesType: 'Purchase',
                //         debit: 0,
                //         credit: finalAmount,
                //         paymentMode: paymentMode,
                //         balance: 0,
                //         date: nepaliDate ? nepaliDate : new Date(billDate),
                //         company: companyId,
                //         user: userId,
                //         fiscalYear: currentFiscalYear
                //     });

                //     await transaction.save();
                // }


                // Increment stock quantity using FIFO
                await addStock(product, item.batchNumber, item.expiryDate, item.WSUnit, item.quantity, item.price, item.puPrice, item.marginPercentage, item.mrp);
            }


            existingBill.items = billItems;

            // Create a transaction for the default Purchase Account
            const purchaseAmount = finalTaxableAmount + finalNonTaxableAmount;
            if (purchaseAmount > 0) {
                const purchaseAccount = await Account.findOne({ name: 'Purchase', company: companyId });
                if (purchaseAccount) {
                    const partyAccount = await Account.findById(accountId); // Find the party account (from where the purchase is made)
                    if (!partyAccount) {
                        return res.status(400).json({ error: 'Party account not found.' });
                    }
                    const purchaseTransaction = new Transaction({
                        account: purchaseAccount._id,
                        billNumber: existingBill.billNumber,
                        partyBillNumber: existingBill.partyBillNumber,
                        type: 'Purc',
                        purchaseBillId: existingBill._id,
                        purchaseSalesType: partyAccount.name,  // Save the party account name in purchaseSalesType,
                        debit: purchaseAmount,  // Debit the VAT account
                        credit: 0,// Credit is 0 for VAT transactions
                        paymentMode: paymentMode,
                        balance: 0, // Update the balance
                        date: nepaliDate ? nepaliDate : new Date(billDate),
                        company: companyId,
                        user: userId,
                        fiscalYear: currentFiscalYear
                    });
                    await purchaseTransaction.save();
                    console.log('Purchase Transaction: ', purchaseTransaction);
                }
            }

            // Create a transaction for the VAT amount
            if (vatAmount > 0) {
                const vatAccount = await Account.findOne({ name: 'VAT', company: companyId });
                if (vatAccount) {
                    const partyAccount = await Account.findById(existingBill.account); // Find the party account (from where the purchase is made)
                    if (!partyAccount) {
                        return res.status(400).json({ error: 'Party account not found.' });
                    }
                    const vatTransaction = new Transaction({
                        account: vatAccount._id,
                        billNumber: existingBill.billNumber,
                        partyBillNumber: existingBill.partyBillNumber,
                        isType: 'VAT',
                        type: 'Purc',
                        purchaseBillId: existingBill._id,
                        purchaseSalesType: partyAccount.name,  // Save the party account name in purchaseSalesType,
                        debit: vatAmount,  // Debit the VAT account
                        credit: 0,         // Credit is 0 for VAT transactions
                        paymentMode: paymentMode,
                        balance: 0, // Update the balance
                        date: nepaliDate ? nepaliDate : new Date(billDate),
                        company: companyId,
                        user: userId,
                        fiscalYear: currentFiscalYear
                    });
                    await vatTransaction.save();
                    console.log('Vat Transaction: ', vatTransaction);
                }
            }


            // Create a transaction for the round-off amount
            if (roundOffAmount > 0) {
                const roundOffAccount = await Account.findOne({ name: 'Rounded Off', company: companyId });
                if (roundOffAccount) {
                    const partyAccount = await Account.findById(accountId); // Find the party account (from where the purchase is made)
                    if (!partyAccount) {
                        return res.status(400).json({ error: 'Party account not found.' });
                    }
                    const roundOffTransaction = new Transaction({
                        account: roundOffAccount._id,
                        billNumber: existingBill.billNumber,
                        partyBillNumber: existingBill.partyBillNumber,
                        isType: 'RoundOff',
                        type: 'Purc',
                        purchaseBillId: existingBill._id,
                        purchaseSalesType: partyAccount.name,  // Save the party account name in purchaseSalesType,
                        debit: roundOffAmount,  // Debit the VAT account
                        credit: 0,         // Credit is 0 for VAT transactions
                        paymentMode: paymentMode,
                        balance: 0, // Update the balance
                        date: nepaliDate ? nepaliDate : new Date(billDate),
                        company: companyId,
                        user: userId,
                        fiscalYear: currentFiscalYear
                    });
                    await roundOffTransaction.save();
                    console.log('Round-off Transaction: ', roundOffTransaction);
                }
            }

            if (roundOffAmount < 0) {
                const roundOffAccount = await Account.findOne({ name: 'Rounded Off', company: companyId });
                if (roundOffAccount) {
                    const partyAccount = await Account.findById(accountId); // Find the party account (from where the purchase is made)
                    if (!partyAccount) {
                        return res.status(400).json({ error: 'Party account not found.' });
                    }
                    const roundOffTransaction = new Transaction({
                        account: roundOffAccount._id,
                        billNumber: existingBill.billNumber,
                        partyBillNumber: existingBill.partyBillNumber,
                        isType: 'RoundOff',
                        type: 'Purc',
                        purchaseBillId: existingBill._id,
                        purchaseSalesType: partyAccount.name,  // Save the party account name in purchaseSalesType,
                        debit: 0,  // Debit the VAT account
                        credit: Math.abs(roundOffAmount), // Ensure roundOffAmount is not saved as a negative value
                        paymentMode: paymentMode,
                        balance: 0, // Update the balance
                        date: nepaliDate ? nepaliDate : new Date(billDate),
                        company: companyId,
                        user: userId,
                        fiscalYear: currentFiscalYear
                    });
                    await roundOffTransaction.save();
                    console.log('Round-off Transaction: ', roundOffTransaction);
                }
            }

            console.log('All transactions successfully created for updated bill.');

            await existingBill.save();
            if (paymentMode === 'cash') {
                const cashAccount = await Account.findOne({ name: 'Cash in Hand', company: companyId });

                if (cashAccount) {
                    const cashTransaction = new Transaction({
                        item: product._id,
                        account: cashAccount._id,
                        billNumber: existingBill.billNumber,
                        partyBillNumber: existingBill.partyBillNumber,
                        isType: 'Purc',
                        type: 'Purc',
                        purchaseBillId: existingBill._id,
                        partyBillNumber: existingBill.partyBillNumber,
                        purchaseSalesType: 'Purchase',
                        debit: finalAmount, // The cash amount received
                        credit: 0,
                        paymentMode: paymentMode,
                        balance: 0, // Adjust with the correct balance logic
                        date: nepaliDate ? nepaliDate : new Date(billDate),
                        company: companyId,
                        user: userId,
                        fiscalYear: currentFiscalYear
                    });
                    await cashTransaction.save();
                    console.log('Cash transaction created:', cashTransaction);
                }
            }

            // req.flash('success', 'Purchase updated successfully');
            // res.redirect(`/purchase-bills/edit/${billId}`);

            if (req.query.print === 'true') {
                // Redirect to the print route
                res.redirect(`/purchase-bills/${existingBill._id}/edit/direct-print`);
            } else {
                // Redirect to the bills list or another appropriate page
                req.flash('success', 'Purchase updated successfully.');
                res.redirect(`/purchase-bills/edit/${billId}`);
            }

        } catch (error) {
            console.error('Error during purchase bill update:', error.message);
            req.flash('error', 'An error occurred while updating the purchase bill.');
            res.redirect(`/purchase-bills/edit/${billId}`);
        }
    }
});
