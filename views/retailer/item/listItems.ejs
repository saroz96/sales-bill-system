<%- include('../layouts/boilerplate', { title: 'Items Management' , body: '' }) %>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.5.0/font/bootstrap-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        :root {
            --vatable-color: #d4edda;
            --non-vatable-color: #fff3cd;
            --hover-color: #f8f9fa;
        }

        .vatable-item {
            background-color: var(--vatable-color);
            transition: background-color 0.3s ease;
        }

        .non-vatable-item {
            background-color: var(--non-vatable-color);
            transition: background-color 0.3s ease;
        }

        .list-group-item:hover {
            background-color: var(--hover-color);
            transform: translateX(5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .expanded-container {
            max-width: 95%;
            margin: 0 auto;
        }

        .expanded-card {
            width: 100%;
            border-radius: 15px;
            overflow: hidden;
        }

        .search-highlight {
            background-color: #ffeb3b;
            padding: 0 2px;
            border-radius: 3px;
        }

        .item-stock {
            font-weight: bold;
        }
        .item-stock.low {
            color: #dc3545;
        }
        .item-stock.medium {
            color: #ffc107;
        }
        .item-stock.high {
            color: #28a745;
        }

        .action-buttons .btn {
            margin-left: 5px;
            transition: transform 0.2s;
        }
        .action-buttons .btn:hover {
            transform: scale(1.1);
        }

        #searchInput {
            border-radius: 20px;
            padding: 12px 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        #clearSearch {
            border-radius: 0 20px 20px 0;
        }

        .badge-category {
            background-color: #6c757d;
            color: white;
            font-size: 0.8em;
        }

        .badge-unit {
            background-color: #17a2b8;
            color: white;
            font-size: 0.8em;
        }

        @media (max-width: 768px) {
            .header-actions {
                flex-direction: column;
                gap: 10px;
            }
            .header-actions .col {
                width: 100%;
            }
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }
    </style>

    <div class="container wow-form expanded-container">
        <div class="card mt-4 shadow-lg p-4 animate__animated animate__fadeInUp expanded-card">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mt-2 text-primary"><i class="bi bi-box-seam"></i> Items Management</h1>
                <a href="/items/new" class="btn btn-success">
                    <i class="bi bi-plus-lg"></i> Add New Item
                </a>
            </div>

            <div class="row header-actions mb-4">
                <div class="col-md-8 col-12">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" id="searchInput" 
                               placeholder="Search items by name, category, or VAT status..." 
                               aria-label="Search" autofocus>
                        <button class="btn btn-outline-danger" type="button" id="clearSearch">
                            <i class="bi bi-x-lg"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="col-md-4 col-12 d-flex justify-content-end">
                    <div class="btn-group" role="group">
                        <a href="/items" class="btn btn-primary" data-bs-toggle="tooltip" title="Refresh list">
                            <i class="bi bi-arrow-clockwise"></i>
                        </a>
                        <button id="printAllBills" class="btn btn-secondary" data-bs-toggle="tooltip" title="Print all items">
                            <i class="bi bi-printer"></i> All
                        </button>
                        <button id="printFilteredBills" class="btn btn-secondary" data-bs-toggle="tooltip" title="Print filtered items">
                            <i class="bi bi-printer"></i> Filtered
                        </button>
                    </div>
                </div>
            </div>

            <div class="loading-spinner" id="loadingSpinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading items...</p>
            </div>

            <!-- Items List -->
            <div id="itemsContainer">
                <h2 class="mt-3 mb-3 text-muted">Item Inventory</h2>
                <div class="list-group mt-3" id="itemsList">
                    <% if (items && items.length> 0) { %>
                        <% items.forEach(item=> { %>
                            <div class="searchClass">
                                <% let vatClass='' ; %>
                                    <% if (item.vatStatus==='vatExempt' ) { %>
                                        <% vatClass='non-vatable-item' ; %>
                                            <% } else if (item.vatStatus==='vatable' ) { %>
                                                <% vatClass='vatable-item' ; %>
                                                    <% } %>
                                                    
                                                    <% const totalStock = item.stockEntries ? item.stockEntries.reduce((acc, entry)=> acc + entry.quantity, 0) : 0;
                                                       let stockClass = '';
                                                       if (totalStock <= 10) stockClass = 'low';
                                                       else if (totalStock <= 50) stockClass = 'medium';
                                                       else stockClass = 'high'; %>

                                                    <div class="list-group-item d-flex justify-content-between align-items-center <%= vatClass %>">
                                                        <div class="d-flex flex-column w-75">
                                                            <div class="d-flex align-items-center mb-2">
                                                                <strong class="me-2 item-name"><%= item.name %></strong>
                                                                <span class="badge badge-category me-2"><%= item.category.name %></span>
                                                                <span class="badge badge-unit"><%= item.unit.name %></span>
                                                            </div>
                                                            <div class="d-flex">
                                                                <small class="me-3">
                                                                    <i class="bi bi-box-seam"></i> 
                                                                    <span class="item-stock <%= stockClass %>"><%= totalStock %> in stock</span>
                                                                </small>
                                                                <small class="text-muted">
                                                                    <i class="bi bi-tag"></i> 
                                                                    VAT: <%= item.vatStatus === 'vatable' ? 'Vatable' : 'Exempt' %>
                                                                </small>
                                                            </div>
                                                        </div>
                                                        <div class="action-buttons">
                                                            <a href="/items-ledger/<%= item._id %>" 
                                                               class="btn btn-sm btn-outline-primary" 
                                                               data-bs-toggle="tooltip" title="View ledger">
                                                                <i class="bi bi-journal-text"></i>
                                                            </a>
                                                            <a href="/items/edit/<%= item._id %>" 
                                                               class="btn btn-sm btn-outline-warning" 
                                                               data-bs-toggle="tooltip" title="Edit item">
                                                                <i class="bi bi-pencil-square"></i>
                                                            </a>
                                                        </div>
                                                    </div>
                            </div>
                            <% }); %>
                                <% } else { %>
                                    <div class="list-group-item text-center py-5">
                                        <i class="bi bi-box text-muted" style="font-size: 3rem;"></i>
                                        <h4 class="mt-3 text-muted">No items found</h4>
                                        <p class="text-muted">Click the "Add New Item" button to create your first item</p>
                                        <a href="/items/new" class="btn btn-primary mt-2">
                                            <i class="bi bi-plus-lg"></i> Add Item
                                        </a>
                                    </div>
                                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/mark.js@8.11.1/dist/mark.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Search functionality with highlighting
            const searchInput = document.getElementById('searchInput');
            const itemsList = document.getElementById('itemsList');
            const clearSearch = document.getElementById('clearSearch');
            const instance = new Mark(itemsList);

            function performSearch() {
                const searchQuery = searchInput.value.trim();
                
                if (searchQuery) {
                    instance.unmark();
                    instance.mark(searchQuery, {
                        element: 'span',
                        className: 'search-highlight',
                        separateWordSearch: true,
                        accuracy: 'partially',
                        acrossElements: true,
                        done: function() {
                            // Hide non-matching items
                            const items = itemsList.querySelectorAll('.searchClass');
                            items.forEach(item => {
                                const hasHighlight = item.querySelector('.search-highlight');
                                item.style.display = hasHighlight ? 'block' : 'none';
                            });
                        }
                    });
                } else {
                    instance.unmark();
                    const items = itemsList.querySelectorAll('.searchClass');
                    items.forEach(item => {
                        item.style.display = 'block';
                    });
                }
            }

            // Debounce search input
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 300);
            });

            // Clear search
            clearSearch.addEventListener('click', function() {
                searchInput.value = '';
                performSearch();
                searchInput.focus();
            });

            // Print functionality
            function printItems(itemRows) {
                const printWindow = window.open('', '_blank');
                const now = new Date();
                const dateString = now.toLocaleDateString() + ' ' + now.toLocaleTimeString();

                // Basic HTML and styling for the print view
                const headerHTML = `
                    <html>
                        <head>
                            <title>Items List - ${dateString}</title>
                            <style>
                                @page { size: A4 landscape; margin: 10mm; }
                                body { font-family: Arial, sans-serif; }
                                .print-header { display: flex; justify-content: space-between; margin-bottom: 20px; }
                                .print-title { font-size: 24px; font-weight: bold; }
                                .print-date { font-size: 14px; color: #666; }
                                table { width: 100%; border-collapse: collapse; margin-top: 15px; }
                                th, td { padding: 10px; text-align: left; border: 1px solid #ddd; }
                                th { background-color: #f5f5f5; font-weight: bold; }
                                .vatable-row { background-color: ${getComputedStyle(document.documentElement).getPropertyValue('--vatable-color')}; }
                                .non-vatable-row { background-color: ${getComputedStyle(document.documentElement).getPropertyValue('--non-vatable-color')}; }
                                .low-stock { color: #dc3545; font-weight: bold; }
                                .medium-stock { color: #ffc107; }
                                .high-stock { color: #28a745; }
                            </style>
                        </head>
                        <body>
                            <div class="print-header">
                                <div class="print-title">Items Inventory</div>
                                <div class="print-date">Generated on: ${dateString}</div>
                            </div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Item Name</th>
                                        <th>Category</th>
                                        <th>Unit</th>
                                        <th>Stock</th>
                                        <th>VAT Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                `;

                // Construct table rows
                let tableRowsHTML = '';
                itemRows.forEach(row => {
                    const itemName = row.querySelector('.item-name')?.textContent || '';
                    const category = row.querySelector('.badge-category')?.textContent || '';
                    const unit = row.querySelector('.badge-unit')?.textContent || '';
                    const stockElement = row.querySelector('.item-stock');
                    const stock = stockElement?.textContent || '';
                    const stockClass = stockElement?.className.includes('low') ? 'low-stock' : 
                                      stockElement?.className.includes('medium') ? 'medium-stock' : 'high-stock';
                    const vatStatus = row.textContent.includes('VAT: Vatable') ? 'Vatable' : 'Exempt';
                    const rowClass = vatStatus === 'Vatable' ? 'vatable-row' : 'non-vatable-row';

                    tableRowsHTML += `
                        <tr class="${rowClass}">
                            <td>${itemName}</td>
                            <td>${category}</td>
                            <td>${unit}</td>
                            <td class="${stockClass}">${stock}</td>
                            <td>${vatStatus}</td>
                        </tr>
                    `;
                });

                // Closing the table and HTML content
                const finalHTML = `
                    ${headerHTML}
                    ${tableRowsHTML}
                    </tbody></table>
                    <div style="margin-top: 20px; font-size: 12px; text-align: right;">
                        Total Items: ${itemRows.length}
                    </div>
                    </body></html>
                `;

                // Write to the print window and initiate print
                printWindow.document.write(finalHTML);
                printWindow.document.close();
                printWindow.focus();
                setTimeout(() => {
                    printWindow.print();
                }, 500);
            }

            // Add event listeners for the print buttons
            document.getElementById('printAllBills').addEventListener('click', function() {
                const allItemRows = document.querySelectorAll('#itemsList .searchClass > .list-group-item');
                printItems(allItemRows);
            });

            document.getElementById('printFilteredBills').addEventListener('click', function() {
                const filteredItemRows = Array.from(document.querySelectorAll('#itemsList .searchClass'))
                    .filter(row => row.style.display !== 'none')
                    .map(row => row.querySelector('.list-group-item'));
                printItems(filteredItemRows);
            });

            // Focus search input on page load
            searchInput.focus();
        });
    </script>