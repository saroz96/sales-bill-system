{"version":3,"file":"nepali-date-converter.umd.js","sources":["../src/nepali-date-helper.ts","../src/nepali-date-converter.ts"],"sourcesContent":["export enum Language {\n  np = 'np',\n  en = 'en'\n}\nexport interface IYearMonthDate {\n  year: number\n  month: number\n  date: number\n  day?: number\n}\n\nexport interface IAdBs {\n  AD: IYearMonthDate\n  BS: IYearMonthDate\n}\n\n/**\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\n */\nconst yearMonthDaysMapping: number[][] = [\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], // 2081 BS\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n  [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]\n]\n\n/**\n * Memoizing the days passed for each month in year for faster calculation\n */\nconst monthDaysMappings: number[][][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  let daySum = 0\n  return yearMappings.map((monthDays: number) => {\n    const monthPassedDays = [monthDays, daySum]\n    daySum += monthDays\n    return monthPassedDays\n  })\n}, [])\n\n/**\n * Ignore\n */\nlet daysPassed = 0\n/**\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\n */\nconst yearDaysMapping: number[][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  const daysInYear = yearMappings.reduce((acc, x) => acc + x, 0)\n  const yearDaysPassed = [daysInYear, daysPassed]\n  daysPassed += daysInYear\n  return yearDaysPassed\n})\n\n/**\n * Max possible Day\n */\nconst MAX_DAY = 33238\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.')\n}\n\n/**\n * Min possible Day\n */\nconst MIN_DAY = 1\n/**\n * @ignore\n */\nexport function getYearIndex(year: number) {\n  return year - EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport function getYearFromIndex(yearIndex: number) {\n  return yearIndex + EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport const KTM_TIMEZONE_OFFSET = 20700000\n/**\n * @ignore\n */\nexport const EPOCH_YEAR = 2000\n/**\n * @ignore\n */\nexport const COMPLETED_DAYS = 1\n/**\n * @ignore\n */\nexport const TOTAL_DAYS = 0\n\n/**\n * @ignore\n */\nfunction mod(m: number, val: number) {\n  while (val < 0) {\n    val += m\n  }\n  return val % m\n}\n/**\n * Format Object\n */\nexport const formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: [\n        'Baisakh',\n        'Jestha',\n        'Asar',\n        'Shrawan',\n        'Bhadra',\n        'Aswin',\n        'Kartik',\n        'Mangsir',\n        'Poush',\n        'Magh',\n        'Falgun',\n        'Chaitra'\n      ]\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: [\n        'बैशाख',\n        'जेठ',\n        'असार',\n        'श्रावण',\n        'भाद्र',\n        'आश्विन',\n        'कार्तिक',\n        'मंसिर',\n        'पौष',\n        'माघ',\n        'फाल्गुण',\n        'चैत्र'\n      ]\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n}\n\n/**\n * Epoch in english date\n */\nconst beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n}\n\n/**\n * `findPassedDays` calculates the days passed from the epoch time.\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param year Year between 2000-2009 of nepali date\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @returns Number of days passed since epoch time from the given date,month and year.\n */\nexport function findPassedDays(year: number, month: number, date: number) {\n  try {\n    const yearIndex = getYearIndex(year)\n    const pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS]\n    const extraMonth = mod(12, month)\n    const extraYear = Math.floor(month / 12)\n\n    const pastMonthDays =\n      yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] -\n      pastYearDays +\n      monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS]\n\n    const daysPassed = pastYearDays + pastMonthDays + date\n    if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n      throw new Error()\n    }\n    return daysPassed\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport { monthDaysMappings, yearDaysMapping }\n\n/**\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param daysPassed The number of days passed since nepali date epoch time\n * @returns date values in object implementing IYearMonthDate interface\n */\nexport function mapDaysToDate(daysPassed: number): IYearMonthDate {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(`The epoch difference is not within the boundaries ${MIN_DAY} - ${MAX_DAY}`)\n  }\n\n  const yearIndex = yearDaysMapping.findIndex(\n    year =>\n      daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS]\n  )\n  const monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS]\n  const monthIndex = monthDaysMappings[yearIndex].findIndex(\n    month =>\n      monthRemainder > month[COMPLETED_DAYS] &&\n      monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS]\n  )\n  const date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS]\n\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  }\n}\n\nexport function findPassedDaysAD(year: number, month: number, date: number) {\n  const timeDiff = Math.abs(\n    Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date)\n  )\n  const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24))\n  return diffDays\n}\n\nexport function mapDaysToDateAD(daysPassed: number) {\n  const mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed))\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  }\n}\n\nexport function convertToAD(bsDateObject: IYearMonthDate): IAdBs {\n  try {\n    const daysPassed = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date)\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport function convertToBS(adDateObject: Date): IAdBs {\n  try {\n    const daysPassed = findPassedDaysAD(\n      adDateObject.getFullYear(),\n      adDateObject.getMonth(),\n      adDateObject.getDate()\n    )\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nfunction mapLanguageNumber(dateNumber: string, language: 'en' | 'np'): string {\n  return dateNumber\n    .split('')\n    .map(num => formatObj[language].date[parseInt(num, 10)])\n    .join('')\n}\n\nexport function format(\n  bsDate: IYearMonthDate,\n  stringFormat: string,\n  language: 'en' | 'np'\n): string {\n  return stringFormat\n    .replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, (match, _, matchedString) => {\n      switch (match) {\n        case 'D':\n          return mapLanguageNumber(bsDate.date.toString(), language)\n        case 'DD':\n          return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language)\n        case 'M':\n          return mapLanguageNumber((bsDate.month + 1).toString(), language)\n        case 'MM':\n          return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language)\n        case 'MMM':\n          return formatObj[language].month.short[bsDate.month]\n        case 'MMMM':\n          return formatObj[language].month.long[bsDate.month]\n        case 'YY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-2), language)\n        case 'YYY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-3), language)\n        case 'YYYY':\n          return mapLanguageNumber(bsDate.year.toString(), language)\n        case 'd':\n          return mapLanguageNumber(bsDate.day?.toString() || '0', language)\n        case 'dd':\n          return formatObj[language].day.short[bsDate.day || 0]\n        case 'ddd':\n          return formatObj[language].day.long[bsDate.day || 0]\n        default:\n          return matchedString.replace('/', '')\n      }\n    })\n    .replace(/\\\\/g, '')\n}\n\nexport function parse(dateString: string): IYearMonthDate {\n  const OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/\n  const GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/\n  let match: RegExpMatchArray | null\n  match = dateString.match(OFFICIAL_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    }\n  }\n  match = dateString.match(GEORGIAN_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    }\n  }\n  throw new Error('Invalid date format')\n}\n","import {\n  convertToAD,\n  convertToBS,\n  IYearMonthDate,\n  IAdBs,\n  format,\n  Language,\n  parse\n} from './nepali-date-helper'\n\nconst dateSymbol = Symbol('Date')\nconst daySymbol = Symbol('Day')\nconst yearSymbol = Symbol('Year')\nconst monthSymbol = Symbol('MonthIndex')\nconst jsDateSymbol = Symbol('JsDate')\nconst convertToBSMethod = Symbol('convertToBS()')\nconst convertToADMethod = Symbol('convertToAD()')\nconst setAdBs = Symbol('setADBS()')\nconst setDayYearMonth = Symbol('setDayYearMonth()')\nexport default class NepaliDate {\n  private [jsDateSymbol]: Date\n  private [yearSymbol]: number\n  private [dateSymbol]: number\n  private [daySymbol]: number\n  private [monthSymbol]: number\n  /**\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\n   */\n  static language: 'np' | 'en' = Language.en\n  /**\n   * **String**\n   *\n   * Provide a valid Nepali date string. The current supported formats are:\n   *\n   * ```\n   * YYYY/MM/DD\n   * YYYY-MM-DD\n   * YYYY MM DD\n   * DD/MM/YYYY\n   * DD-MM-YYYY\n   * DD MM YYYY\n   * ```\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate('2051/02/01') // YYYY/MM/DD\n   * new NepaliDate('2051-02-01')\n   * new NepaliDate('2051 02 01')\n   * new NepaliDate('01/02/2051') // DD/MM/YYYY\n   * new NepaliDate('01-02-2051')\n   * new NepaliDate('01 02 2051')\n   * ```\n   *\n   * **Number**\n   *\n   * The number value represents the UTC timestamp that will be converted to Nepali date.\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(1589638162879)\n   * ```\n   *\n   * **Date**\n   *\n   * Javascript Date object\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(new Date(2020, 10, 10))\n   * ```\n   *\n   * **Empty constructor**\n   *\n   * If no values are provided, the current day date will be converted to Nepali date.\n   *\n   * ```js\n   * new NepaliDate()\n   * ```\n   * @param value\n   */\n  constructor(value?: string | number | Date)\n  /**\n   * This constructor takes year, monthIndex i.e 0-11, and date.\n   *\n   * Example:\n   *\n   * ```js\n   * new Date(2051, 0, 1) // Baisakh 1, 2051\n   * ```\n   * @param year\n   * @param monthIndex\n   * @param date\n   */\n  constructor(year: number, monthIndex: number, date: number)\n  constructor() {\n    const constructorError = new Error('Invalid constructor arguments')\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date())\n    } else if (arguments.length === 1) {\n      const argument = arguments[0]\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument))\n          break\n        case 'string':\n          const { date, year, month } = parse(argument)\n          this[setDayYearMonth](year, month, date)\n          this[convertToADMethod]()\n          break\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument)\n          } else {\n            throw constructorError\n          }\n          break\n        default:\n          throw constructorError\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2])\n      this[convertToADMethod]()\n    } else {\n      throw constructorError\n    }\n  }\n\n  private [setDayYearMonth](year: number, month: number = 0, date: number = 1, day: number = 0) {\n    this[yearSymbol] = year\n    this[monthSymbol] = month\n    this[dateSymbol] = date\n    this[daySymbol] = day\n  }\n\n  /**\n   * Returns Javascript Date converted from nepali date.\n   */\n  toJsDate(): Date {\n    return this[jsDateSymbol]\n  }\n  /**\n   * Get Nepali date for the month\n   */\n  getDate(): number {\n    return this[dateSymbol]\n  }\n  /**\n   * Get Nepali date year.\n   */\n  getYear(): number {\n    return this[yearSymbol]\n  }\n\n  /**\n   * Get Week day index for the date.\n   */\n  getDay(): number {\n    return this[daySymbol]\n  }\n\n  /**\n   * Get Nepali month index.\n   *\n   * ```\n   * Baisakh => 0\n   * Jestha => 1\n   * Asar => 2\n   * Shrawan => 3\n   * Bhadra => 4\n   * Aswin => 5\n   * Kartik => 6\n   * Mangsir => 7\n   * Poush => 8\n   * Magh => 9\n   * Falgun => 10\n   * Chaitra => 11\n   * ```\n   */\n  getMonth(): number {\n    return this[monthSymbol]\n  }\n\n  /**\n   * Returns an object with AD and BS object implementing IYearMonthDate\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *     BS: {\n   *         year: 2052,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *     AD: {\n   *         year: 2019,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *\n   * }\n   * ```\n   */\n  getDateObject(): IAdBs {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    }\n  }\n  /**\n   * Returns Nepali date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2052,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getBS(): IYearMonthDate {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    }\n  }\n  /**\n   * Returns AD date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2019,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getAD(): IYearMonthDate {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    }\n  }\n\n  /**\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\n   * ```\n   * @param date positive or negative integer value to set date\n   */\n  setDate(date: number) {\n    const oldDate = this[dateSymbol]\n    try {\n      this[dateSymbol] = date\n      this[convertToADMethod]()\n    } catch (e) {\n      this[dateSymbol] = oldDate\n      throw e\n    }\n  }\n\n  /**\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\n   * ```\n   * @param date positive or negative integer value to set month\n   */\n  setMonth(month: number) {\n    const oldMonth = this[monthSymbol]\n    try {\n      this[monthSymbol] = month\n      this[convertToADMethod]()\n    } catch (e) {\n      this[monthSymbol] = oldMonth\n      throw e\n    }\n  }\n\n  /**\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\n   * ```\n   * @param date positive integer value to set year\n   */\n  setYear(year: number) {\n    const oldYear = this[yearSymbol]\n    try {\n      this[yearSymbol] = year\n      this[convertToADMethod]()\n    } catch (e) {\n      this[yearSymbol] = oldYear\n      throw e\n    }\n  }\n\n  /**\n   * Format Nepali date string based on format string.\n   * ```\n   * YYYY - 4 digit of year (2077)\n   * YYY  - 3 digit of year (077)\n   * YY   - 2 digit of year (77)\n   * M    - month number (1 - 12)\n   * MM   - month number with 0 padding (01 - 12)\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\n   * D    - Day of Month (1, 2, ... 31, 32)\n   * DD   - Day of Month with zero padding (01, 02, ...)\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\n   * dd   - Week day in short format (Sun, Mon, ..)\n   * ddd  - Week day in long format (Sunday, Monday, ...)\n   * ```\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.format('YYYY/MM/DD') // '2054/11/10'\n   * a.format('YYYY MM DD') // '2054 11 10'\n   * a.format('YYYY') // '2054'\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\n   * a.format('dd', 'np') // 'आइतबार'\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\n   * // Set static variable to 'np' for default Nepali language\n   * NepaliDate.language = 'np'\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\n   * ```\n   * @param formatString\n   * @param language en | np\n   */\n  format(formatString: string, language: 'en' | 'np' = NepaliDate.language): string {\n    return format(this.getBS(), formatString, language)\n  }\n\n  /**\n   * Returns new Nepali Date from the string date format\n   * Similar to calling constructor with string parameter\n   * @param dateString\n   */\n  static parse(dateString: string): NepaliDate {\n    const { date, year, month } = parse(dateString)\n    return new NepaliDate(year, month, date)\n  }\n\n  /**\n   * Returns new Nepali Date converted form current day date.\n   * Similar to calling empty constructor\n   */\n  static now(): NepaliDate {\n    return new NepaliDate()\n  }\n\n  /**\n   * Returns new converted Nepali Date from the provided Javascript Date.\n   * It is similar to passing string as constructor\n   * @param date\n   */\n  static fromAD(date: Date): NepaliDate {\n    return new NepaliDate(date)\n  }\n\n  private [convertToBSMethod](date: Date) {\n    const { AD, BS } = convertToBS(date)\n    this[setAdBs](AD, BS)\n  }\n\n  private [setAdBs](AD: IYearMonthDate, BS: IYearMonthDate) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day)\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date)\n  }\n\n  private [convertToADMethod]() {\n    const { AD, BS } = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    })\n    this[setAdBs](AD, BS)\n  }\n\n  valueOf() {\n    return this[jsDateSymbol].getTime()\n  }\n\n  toString() {\n    return this.format('ddd DD, MMMM YYYY')\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAY,QAGX,CAAA;IAHD,CAAA,UAAY,QAAQ,EAAA;IAClB,IAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;IACT,IAAA,QAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;IACX,CAAC,EAHW,QAAQ,KAAR,QAAQ,GAGnB,EAAA,CAAA,CAAA,CAAA;IAaD;;IAEG;IACH,IAAM,oBAAoB,GAAe;QACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAA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"}