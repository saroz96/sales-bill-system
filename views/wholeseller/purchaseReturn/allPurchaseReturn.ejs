<%- include('../layouts/boilerplate', { title: '' , body: '' }) %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<style>
  /* Main Layout */
  .expanded-container {
    width: 95%;
    max-width: 100%;
    margin: 20px auto;
  }

  .expanded-card {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    padding: 20px;
  }

  /* Table Styling */
  .table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .table {
    width: 100%;
    margin-bottom: 1rem;
    color: #212529;
    border-collapse: collapse;
    font-size: 0.9rem;
  }

  .table thead th {
    vertical-align: bottom;
    border-bottom: 2px solid #dee2e6;
    background-color: #f8f9fa;
    font-weight: 600;
    padding: 12px;
    white-space: nowrap;
  }

  .table tbody tr {
    transition: all 0.2s;
  }

  .table tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.02);
  }

  .table td {
    padding: 10px;
    vertical-align: middle;
    border-top: 1px solid #dee2e6;
    white-space: nowrap;
  }

  /* Action Buttons */
  .action-buttons .btn {
    margin-right: 5px;
    margin-bottom: 5px;
  }

  /* Search and Filter */
  .search-filter-container {
    margin-bottom: 20px;
  }

  /* Highlighting */
  .selected-row {
    background-color: #5897FB !important;
    color: white !important;
  }

  .selected-row td {
    background-color: #5897FB !important;
    color: white !important;
  }

  /* Print Styles */
  @media print {
    body {
      -webkit-print-color-adjust: exact;
      color-adjust: exact;
      font-size: 12px;
      margin: 10mm;
    }

    .no-print {
      display: none !important;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      border: 1px solid #000 !important;
      padding: 6px;
      text-align: left;
    }

    th {
      background-color: #f2f2f2 !important;
    }

    .print-header {
      text-align: center;
      margin-bottom: 15px;
    }
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .table td, .table th {
      padding: 6px;
      font-size: 0.8rem;
    }
    
    .action-buttons .btn {
      margin-right: 3px;
      padding: 5px 8px;
      font-size: 0.8rem;
    }
  }

  /* Bordered digits for PAN/VAT */
  .bordered-digit {
    display: inline-block;
    padding: 2px 4px;
    margin-right: 2px;
    border: 1px solid #000;
  }
</style>

<div class="container expanded-container">
  <div class="card expanded-card">
    <!-- Print Header (hidden on screen) -->
    <div id="printHeader" class="d-none print-only">
      <div class="print-header">
        <h2><%= currentCompanyName %></h2>
        <p>
          <%= currentCompany.address %>-<%=currentCompany.ward%>, <%=currentCompany.city%>,
          <%=currentCompany.country%><br>
          Tel.: <%=currentCompany.phone%>, Email: <%=currentCompany.email%><br>
          VAT NO.: <span id="pan-vat-container"></span>
        </p>
        <hr>
      </div>
    </div>

    <h1 class="mb-4 text-center" style="text-decoration: underline;">Purchase Return Vouchers</h1>

    <!-- Search and Filter Section -->
    <div class="row search-filter-container no-print">
      <div class="col-md-8">
        <div class="input-group">
          <input type="text" class="form-control" id="searchInput" 
                 placeholder="Search by voucher number, suppliers name or user..." 
                 aria-label="Search" autofocus autocomplete="off">
          <button class="btn btn-outline-secondary" type="button" id="clearSearch">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div class="col-md-4">
        <div class="d-flex align-items-center">
          <label for="paymentModeFilter" class="form-label me-2 mb-0">Payment Mode:</label>
          <select class="form-select" id="paymentModeFilter" aria-label="Filter by Payment Mode">
            <option value="">All</option>
            <option value="cash">Cash</option>
            <option value="credit">Credit</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons no-print mb-3">
      <a href="/purchase-return" class="btn btn-primary">
        <i class="fas fa-receipt"></i> New Voucher
      </a>
      <button id="printAllBills" class="btn btn-secondary">
        <i class="fas fa-print"></i> Print All
      </button>
      <button id="printFilteredBills" class="btn btn-secondary">
        <i class="fas fa-filter"></i> Print Filtered
      </button>
    </div>

    <!-- Bills Table -->
    <div class="table-responsive">
      <table class="table table-striped" id="billsList">
        <thead>
          <tr>
            <th>Date</th>
            <th>Vch. No.</th>
            <th>Suppliers Name</th>
            <th>Pay.Mode</th>
            <th class="text-end">Sub Total</th>
            <th class="text-end">Discount</th>
            <th class="text-end">Taxable</th>
            <th class="text-end">VAT</th>
            <th class="text-end">Off(-/+)</th>
            <th class="text-end">Total</th>
            <th>User</th>
            <th class="no-print">Actions</th>
          </tr>
        </thead>
        <tbody>
          <% bills.forEach(purchaseReturn=> { %>
            <tr class="searchClass bill-row" data-payment-mode="<%= purchaseReturn.paymentMode %>">
              <td><%= new Date(purchaseReturn.date).toLocaleDateString() %></td>
              <td><%= purchaseReturn.billNumber %></td>
              <td><%= purchaseReturn.account ? purchaseReturn.account.name : 'Account Not Found' %></td>
              <td><%= purchaseReturn.paymentMode %></td>
              <td class="text-end"><%= purchaseReturn.subTotal.toFixed(2) %></td>
              <td class="text-end"><%= purchaseReturn.discountPercentage.toFixed(2) %>% - <%= purchaseReturn.discountAmount.toFixed(2) %></td>
              <td class="text-end"><%= purchaseReturn.taxableAmount.toFixed(2) %></td>
              <td class="text-end"><%= purchaseReturn.vatPercentage %>% - <%= purchaseReturn.vatAmount.toFixed(2) %></td>
              <td class="text-end"><%= purchaseReturn.roundOffAmount.toFixed(2) %></td>
              <td class="text-end"><%= purchaseReturn.totalAmount.toFixed(2) %></td>
              <td><%= purchaseReturn.user?purchaseReturn.user.name:'User Not Found' %></td>
              <td class="no-print">
                <div class="d-flex">
                  <a href="/purchase-return/<%= purchaseReturn._id %>/print" class="btn btn-sm btn-info me-1">
                    <i class="fas fa-eye"></i>
                  </a>
                  <a href="/purchase-return/edit/<%=purchaseReturn._id%>" class="btn btn-sm btn-warning me-1">
                    <i class="fas fa-edit"></i>
                  </a>
                </div>
              </td>
            </tr>
          <% }); %>
        </tbody>
        <tfoot>
          <tr id="totalsRow">
            <td colspan="4"><strong>Total:</strong></td>
            <td class="text-end"><strong id="totalSubTotal">0.00</strong></td>
            <td class="text-end"><strong id="totalDiscount">0.00</strong></td>
            <td class="text-end"><strong id="totalTaxable">0.00</strong></td>
            <td class="text-end"><strong id="totalVat">0.00</strong></td>
            <td class="text-end"><strong id="totalRoundOff">0.00</strong></td>
            <td class="text-end"><strong id="totalAmount">0.00</strong></td>
            <td></td>
            <td class="no-print"></td>
          </tr>
        </tfoot>
      </table>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize variables
    let billRows = document.querySelectorAll(".bill-row");
    let currentBillIndex = 0;
    
    // Filter bills based on search and payment mode
    function filterBills() {
      const searchQuery = document.getElementById("searchInput").value.trim().toLowerCase();
      const selectedPaymentMode = document.getElementById("paymentModeFilter").value.trim().toLowerCase();
      
      let visibleCount = 0;
      
      billRows.forEach((row) => {
        const billNumber = row.cells[1].textContent.trim().toLowerCase();
        const companyName = row.cells[2].textContent.trim().toLowerCase();
        const paymentMode = row.cells[3].textContent.trim().toLowerCase();
        const users = row.cells[10].textContent.trim().toLowerCase();

        const matchesSearch = companyName.includes(searchQuery) || 
                            billNumber.includes(searchQuery) || 
                            users.includes(searchQuery);
        const matchesPaymentMode = selectedPaymentMode === "" || 
                                 paymentMode === selectedPaymentMode;

        if (matchesSearch && matchesPaymentMode) {
          row.style.display = "";
          visibleCount++;
        } else {
          row.style.display = "none";
        }
      });

      updateTotals();
      
      // Reset current index when filtering
      currentBillIndex = visibleCount > 0 ? 0 : -1;
      updateBillRowHighlight();
    }

    // Update totals based on visible rows
    function updateTotals() {
      let totals = {
        subTotal: 0,
        discount: 0,
        taxable: 0,
        vat: 0,
        roundOff: 0,
        amount: 0
      };

      document.querySelectorAll('#billsList tbody tr.searchClass:not([style*="display: none"])').forEach(row => {
        totals.subTotal += parseFloat(row.cells[4].textContent);
        totals.discount += parseFloat(row.cells[5].textContent.split(" - ")[1]);
        totals.taxable += parseFloat(row.cells[6].textContent);
        totals.vat += parseFloat(row.cells[7].textContent.split(" - ")[1]);
        totals.roundOff += parseFloat(row.cells[8].textContent);
        totals.amount += parseFloat(row.cells[9].textContent);
      });

      document.getElementById("totalSubTotal").textContent = totals.subTotal.toFixed(2);
      document.getElementById("totalDiscount").textContent = totals.discount.toFixed(2);
      document.getElementById("totalTaxable").textContent = totals.taxable.toFixed(2);
      document.getElementById("totalVat").textContent = totals.vat.toFixed(2);
      document.getElementById("totalRoundOff").textContent = totals.roundOff.toFixed(2);
      document.getElementById("totalAmount").textContent = totals.amount.toFixed(2);
    }

    // Update row highlighting
    function updateBillRowHighlight() {
      const visibleRows = getVisibleRows();
      visibleRows.forEach(row => row.classList.remove("selected-row"));
      
      if (currentBillIndex >= 0 && currentBillIndex < visibleRows.length) {
        visibleRows[currentBillIndex].classList.add("selected-row");
        visibleRows[currentBillIndex].scrollIntoView({
          behavior: "smooth",
          block: "nearest"
        });
      }
    }

    // Get visible rows after filtering
    function getVisibleRows() {
      return Array.from(document.querySelectorAll(".bill-row")).filter(
        row => row.style.display !== "none"
      );
    }

    // Keyboard navigation
    document.addEventListener("keydown", function(event) {
      const visibleRows = getVisibleRows();
      
      if (event.key === "ArrowDown" && currentBillIndex < visibleRows.length - 1) {
        currentBillIndex++;
        updateBillRowHighlight();
      } else if (event.key === "ArrowUp" && currentBillIndex > 0) {
        currentBillIndex--;
        updateBillRowHighlight();
      } else if (event.key === "Enter" && currentBillIndex >= 0) {
        const viewLink = visibleRows[currentBillIndex].querySelector("a.btn-info");
        if (viewLink) viewLink.click();
      }
    });

    // Row click handlers
    billRows.forEach((row, index) => {
      row.addEventListener("click", function() {
        const visibleRows = getVisibleRows();
        currentBillIndex = visibleRows.indexOf(row);
        updateBillRowHighlight();
      });

      row.addEventListener("dblclick", function() {
        const viewLink = row.querySelector("a.btn-info");
        if (viewLink) viewLink.click();
      });
    });

    // Event listeners
    document.getElementById("searchInput").addEventListener("input", filterBills);
    document.getElementById("paymentModeFilter").addEventListener("change", filterBills);
    
    document.getElementById("clearSearch").addEventListener("click", () => {
      document.getElementById("searchInput").value = "";
      filterBills();
    });

    // Print functions
    document.getElementById("printAllBills").addEventListener("click", printAllBills);
    document.getElementById("printFilteredBills").addEventListener("click", printFilteredBills);

    function printAllBills() {
      printBills(document.querySelectorAll(".bill-row"));
    }

    function printFilteredBills() {
      printBills(document.querySelectorAll('.bill-row:not([style*="display: none"])'));
    }

    function printBills(rowsToPrint) {
      if (rowsToPrint.length === 0) {
        alert("No bills to print");
        return;
      }

      const printWindow = window.open("", "_blank");
      const printHeader = document.getElementById("printHeader").innerHTML;
      
      let tableContent = `
        <style>
          @page {
            size: A4 landscape;
            margin: 10mm;
          }
          body { 
            font-family: Arial, sans-serif; 
            font-size: 10px; 
            margin: 0;
            padding: 10mm;
          }
          table { 
            width: 100%; 
            border-collapse: collapse; 
            page-break-inside: auto;
          }
          tr { page-break-inside: avoid; page-break-after: auto; }
          th, td { 
            border: 1px solid #000; 
            padding: 4px; 
            text-align: left; 
            white-space: nowrap;
          }
          th { 
            background-color: #f2f2f2 !important; 
            -webkit-print-color-adjust: exact; 
          }
          .print-header { 
            text-align: center; 
            margin-bottom: 15px; 
          }
          .nowrap {
            white-space: nowrap;
          }
        </style>
        ${printHeader}
        <h1 style="text-align:center;text-decoration:underline;">Purchase Return Vouchers</h1>
        <table>
          <thead>
            <tr>
              <th class="nowrap">Date</th>
              <th class="nowrap">Vch No.</th>
              <th class="nowrap">Suppliers Name</th>
              <th class="nowrap">Pay Mode</th>
              <th class="nowrap">Sub Total</th>
              <th class="nowrap">Discount</th>
              <th class="nowrap">Taxable</th>
              <th class="nowrap">VAT</th>
              <th class="nowrap">Off(-/+)</th>
              <th class="nowrap">Total</th>
              <th class="nowrap">User</th>
            </tr>
          </thead>
          <tbody>
      `;

      let totals = {
        subTotal: 0,
        discount: 0,
        taxable: 0,
        vat: 0,
        roundOff: 0,
        amount: 0
      };

      rowsToPrint.forEach(row => {
        const cells = row.cells;
        tableContent += `
          <tr>
            <td class="nowrap">${cells[0].textContent}</td>
            <td class="nowrap">${cells[1].textContent}</td>
            <td class="nowrap">${cells[2].textContent}</td>
            <td class="nowrap">${cells[3].textContent}</td>
            <td class="nowrap">${cells[4].textContent}</td>
            <td class="nowrap">${cells[5].textContent}</td>
            <td class="nowrap">${cells[6].textContent}</td>
            <td class="nowrap">${cells[7].textContent}</td>
            <td class="nowrap">${cells[8].textContent}</td>
            <td class="nowrap">${cells[9].textContent}</td>
            <td class="nowrap">${cells[10].textContent}</td>
          </tr>
        `;

        totals.subTotal += parseFloat(cells[4].textContent);
        totals.discount += parseFloat(cells[5].textContent.split(" - ")[1]);
        totals.taxable += parseFloat(cells[6].textContent);
        totals.vat += parseFloat(cells[7].textContent.split(" - ")[1]);
        totals.roundOff += parseFloat(cells[8].textContent);
        totals.amount += parseFloat(cells[9].textContent);
      });

      // Add totals row
      tableContent += `
          <tr style="font-weight:bold;">
            <td colspan="4">Totals</td>
            <td>${totals.subTotal.toFixed(2)}</td>
            <td>${totals.discount.toFixed(2)}</td>
            <td>${totals.taxable.toFixed(2)}</td>
            <td>${totals.vat.toFixed(2)}</td>
            <td>${totals.roundOff.toFixed(2)}</td>
            <td>${totals.amount.toFixed(2)}</td>
            <td></td>
          </tr>
        </tbody>
      </table>
      `;

      printWindow.document.write(`
        <html>
          <head>
            <title>Purchase Return Vouchers Report</title>
          </head>
          <body>
            ${tableContent}
            <script>
              window.onload = function() {
                setTimeout(function() {
                  window.print();
                }, 200);
              };
            <\/script>
          </body>
        </html>
      `);
      printWindow.document.close();
    }

    // Initialize bordered digits for PAN/VAT
    const panVatNo = '<%= currentCompany.pan %>';
    const container = document.getElementById('pan-vat-container');

    for (let i = 0; i < panVatNo.length; i++) {
      const digit = document.createElement('span');
      digit.className = 'bordered-digit';
      digit.textContent = panVatNo[i];
      container.appendChild(digit);
    }

    // Initial calculations
    filterBills();
  });
</script>