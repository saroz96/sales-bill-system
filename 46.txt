bills.ejs

<%- include('../layouts/boilerplate') %>

    <style>
        .vatable-item {
            background-color: lightgreen;
        }

        .non-vatable-item {
            background-color: lightyellow;
        }

        .dropdown-menu {
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }

        .dropdown-item {
            cursor: pointer;
        }

        .item {
            margin-bottom: 10px;
        }

        .last-transactions {
            list-style-type: none;
            padding-left: 0;
        }

        .credit-party {
            display: none;
            /* Hide credit party options by default */
        }
    </style>

    <div class="container">
        <div class="card mt-4">
            <div class="card-header">
                Create New Bill
                </h1>
            </div>
            <div class="card-body">
                <form action="/bills" method="post" id="billForm">
                    <div class="form-group row">
                        <div class="col">
                            <p class="form-control-plaintext" id="billNumber">
                                <label for="billNumber">Bill No:</label>
                                <%= nextBillNumber %>
                                    <input type="hidden" name="billNumber" value="<%= nextBillNumber %>" readonly>
                            </p>
                        </div>
                        <div class="col">
                            <label for="billDate">Bill Date</label>
                            <input type="date" name="billDate" id="billDate" class="form-control" required
                                value="<%= new Date().toISOString().split('T')[0] %>" autofocus>
                        </div>
                        <div class="col">
                            <label for="paymentMode">Payment Mode:</label>
                            <select class="form-control" id="paymentMode" name="paymentMode"
                                onchange="toggleCreditPartyOptions()">
                                <option>Select</option>
                                <option value="cash">Cash</option>
                                <option value="credit">Credit</option>
                            </select>
                        </div>
                        <div class="col" class="credit-party">
                            <label for="account">Company</label>
                            <select name="account" id="account" class="form-control" required
                                onchange="fetchLastTransactionsForAllItems()">
                                <option value="" disabled selected>Select a company</option>
                                <% if (accounts && accounts.length> 0) { %>
                                    <% accounts.forEach(account=> { %>
                                        <option value="<%= account._id %>">
                                            <%= account.name %>
                                        </option>
                                        <% }); %>
                                            <% } else { %>
                                                <option disabled>No companies available</option>
                                                <% } %>
                            </select>

                        </div>
                        <div class="col">
                            <label for="isVatExempt">VAT</label>
                            <select name="isVatExempt" id="isVatExempt" class="form-control"
                                onchange="toggleVatInputs()">
                                <option value="false">13%</option>
                                <option value="true">Exempt</option>
                            </select>
                        </div>
                    </div>
                    <div id="items">
                        <div class="form-group row item">
                            <div class="col-sm-6">
                                <input type="text" class="form-control item-search" id="item-search"
                                    placeholder="Search Product" oninput="filterItems(this)">
                                <div class="dropdown-menu"></div>
                                <select name="items[0][item]" id="itemSelect1" class="form-control item-select mt-2"
                                    required onchange="fetchLastTransactions(this); updateItemPrice(this);">
                                    <option value="" disabled selected>Select an item</option>
                                    <% if (items && items.length> 0) { %>
                                        <% items.forEach(item=> { %>
                                            <option value="<%= item._id %>" data-price="<%= item.price %>"
                                                data-vat="<%= item.vatStatus %>"
                                                data-unit="<%= item.unit ? item.unit.name : '' %>">
                                                <%= item.name %> - <%= item.category.name %> - <%= item.stock %> - <%=
                                                                item.unit ? item.unit.name : '' %> - Rs.<%= item.price
                                                                    %>
                                            </option>
                                            <% }); %>
                                                <% } else { %>
                                                    <option disabled>No items available</option>
                                                    <% } %>
                                </select>
                                <ul class="last-transactions mt-2"></ul>
                            </div>
                            <div class="col-sm-2">
                                <input type="number" step="any" name="items[0][quantity]" id="item-quantity"
                                    class="form-control quantity-input" placeholder="Quantity" required
                                    oninput="calculateTotal()">
                            </div>
                            <div class="col-sm-2">
                                <input type="number" step="any" name="items[0][price]" class="form-control price-input"
                                    placeholder="Price" id="item-price" required oninput="calculateTotal()">
                            </div>
                            <div class="col-sm-2">
                                <span class="form-control-plaintext item-total">0</span>

                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                                    onclick="removeItem(this)">
                                    <span aria-hidden="true" style="color: red;">&times;</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary" id="addItemButton" onclick="addItem()"><i
                            class="bi bi-plus"></i>Add Item</button>
                    <b>
                        <hr>
                    </b>
                    <div class="form-group row">
                        <div class="col">
                            <label for="subTotal">Sub Total: </label>
                            <p class="form-control-plaintext">Rs.<span id="subTotal">0</span></p>
                        </div>
                        <div class="col">
                            <label for="discountPercentage">Discount %: </label>
                            <input type="number" step="any" name="discountPercentage" id="discountPercentage"
                                class="form-control" value="0" oninput="calculateTotal()">
                        </div>
                        <div class="col">
                            <label for="discountAmount">Discount(Rs.): </label>
                            <input type="number" step="any" name="discountAmount" id="discountAmount" value="0"
                                class="form-control" oninput="calculateTotal()">
                        </div>
                    </div>
                    <div id="vatInputs">
                        <div class="form-group row">
                            <div class="col">
                                <label for="taxableAmount">Taxable Amount: </label>
                                <p class="form-control-plaintext">Rs.<span id="taxableAmount">0</span></p>
                            </div>
                            <div class="col">
                                <label for="vatPercentage">VAT (13%): </label>
                                <input type="number" name="vatPercentage" id="vatPercentage" class="form-control"
                                    value="13">
                            </div>
                            <div class="col">
                                <label for="vatAmount">VAT Amount: </label>
                                <p class="form-control-plaintext">Rs.<span id="vatAmount">0</span></p>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col">
                            <label for="totalAmount">Total Amount: </label>
                            <p class="form-control-plaintext">Rs.<span id="totalAmount">0</span></p>
                        </div>
                        <div class="col">
                            <label for="roundOffAmount">Round Off: </label>
                            <input type="number" class="form-control" step="any" id="roundOffAmount"
                                name="roundOffAmount" value="0">
                        </div>
                        <div class="col">
                            <label for="amountInWords">In Words: </label>
                            <p class="form-control-plaintext" id="amountInWords">Zero Only.</p>
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="submitBillForm(false)">Save Bill</button>
                    <button type="button" class="btn btn-secondary" onclick="showPrintModal()">Save & Print
                        Bill</button>
                </form>
            </div>
        </div>
        <a href="/" class="btn btn-link mt-4">Back</a>
    </div>

    <div id="printModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Print Bill</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Do you want to print this bill?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitBillForm(true)">Save &
                        Print</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Transaction Modal -->
    <div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transactionModalLabel">Last Transactions</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul id="transactionList" class="list-group">
                        <!-- Transactions will be dynamically inserted here -->
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- <script src="/js/bills.js"></script> -->

    <script>

        function addItem() {
            const itemsDiv = document.getElementById('items');
            const index = itemsDiv.children.length;
            const newItem = document.createElement('div');
            newItem.className = 'form-group row item';
            newItem.innerHTML = `
        <div class="col-sm-6">
            <input type="text" class="form-control item-search" placeholder="Search Product" oninput="filterItems(this)">
            <div class="dropdown-menu"></div>
            <select name="items[${index}][item]" class="form-control item-select mt-2" required onchange="fetchLastTransactions(this); updateItemPrice(this);">
                <option value="" disabled selected>Select a company</option>
                <% if (items && items.length > 0) { %>
                    <% items.forEach(item => { %>
                        <option value="<%= item._id %>" data-price="<%= item.price %>" data-vat="<%= item.vatStatus %>"><%= item.name %> - <%= item.category.name %> - <%= item.stock %> - <%= item.unit ? item.unit.name : '' %> - Rs.<%= item.price %></option>
                    <% }); %>
                <% } else { %>
                    <option disabled>No items available</option>
                <% } %>
            </select>
            <ul class="last-transactions mt-2"></ul>
        </div>
        <div class="col-sm-2">
            <input type="number" name="items[${index}][quantity]" class="form-control quantity-input" id="item-quantity" placeholder="Quantity" required oninput="calculateTotal()">
        </div>
        <div class="col-sm-2">
            <input type="number" name="items[${index}][price]" class="form-control price-input" id="item-price" placeholder="Price" required oninput="calculateTotal()">
        </div>
        <div class="col-sm-2">
            <span class="form-control-plaintext item-total">0</span>
            <button type="button" class="close" data-dismiss="modal"
                    aria-label="Close" onclick="removeItem(this)">
                    <span aria-hidden="true" style="color: red;">&times;</span>
            </button> 
        </div>
    `;
            itemsDiv.appendChild(newItem);
            updateItemPrice(newItem.querySelector('.item-select'));
            filterItemsBasedOnVatStatus();
        }

        let shouldPrint = false;

        function showPrintModal() {
            $('#printModal').modal('show');
        }

        function submitBillForm(print) {
            shouldPrint = print;
            const billForm = document.getElementById('billForm');
            if (print) {
                const url = new URL(billForm.action);
                url.searchParams.append('print', 'true');
                billForm.action = url.toString();
            }
            billForm.submit();
        }

        document.getElementById('billForm').addEventListener('submit', function (event) {
            if (!shouldPrint && event.submitter && event.submitter.innerText === 'Save & Print Bill') {
                event.preventDefault();
                showPrintModal();
            }
        });

        // document.getElementById('createBillButton').addEventListener('click', function () {
        //     $('#printModal').modal('show');
        // });

        // document.getElementById('yesPrint').addEventListener('click', function () {
        //     const form = document.getElementById('billForm');
        //     form.action = '/bills?print=true'; // Set form action for printing
        //     form.submit();
        //     $('#printModal').modal('hide');
        // });

        // document.getElementById('noPrint').addEventListener('click', function () {
        //     const form = document.getElementById('billForm');
        //     form.action = '/bills'; // Set form action for saving only
        //     form.submit();
        //     $('#printModal').modal('hide');
        // });

        // // Prevent default form submission
        // document.getElementById('billForm').addEventListener('submit', function (event) {
        //     event.preventDefault();
        //     $('#printModal').modal('show');
        // });
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.item-select').forEach(select => {
                updateItemPrice(select);
                select.addEventListener('change', function () {
                    updateItemPrice(this);
                });
            });
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('input', calculateTotal);
            });
            document.getElementById('isVatExempt').addEventListener('change', () => {
                toggleVatInputs();
                filterItemsBasedOnVatStatus();
                document.querySelectorAll('.item-search').forEach(input => {
                    filterItems(input);
                });
            });
            document.getElementById('addItemButton').addEventListener('click', openItemModal);

            toggleVatInputs();
            filterItemsBasedOnVatStatus();

            document.querySelectorAll('.item-search').forEach(input => {
                input.addEventListener('input', function () {
                    filterItems(this);
                });
            });
        });
        function filterItems(input) {
            // const filter = input.value.trim().toLowerCase();
            const filter = input.value.toLowerCase();
            const isVatExempt = document.getElementById('isVatExempt').checked;
            const itemsDiv = input.closest('.item').querySelector('.item-select');
            const options = itemsDiv.querySelectorAll('option');

            options.forEach(option => {
                const text = option.textContent.toLowerCase();
                const vatStatus = option.getAttribute('data-vat');

                if (text.includes(filter) && (isVatExempt && vatStatus === 'vatExempt' || !isVatExempt && vatStatus === 'vatable')) {
                    option.style.display = '';
                } else {
                    option.style.display = 'none';
                }
            });

            itemsDiv.value = ""; // Clear selection when searching
        }


        function filterItemsBasedOnVatStatus() {
            const isVatExempt = document.getElementById('isVatExempt').value === 'true';
            document.querySelectorAll('.item-select option').forEach(option => {
                const vatStatus = option.getAttribute('data-vat');

                if (isVatExempt && vatStatus === 'vatable') {
                    option.style.display = 'none';
                } else if (!isVatExempt && vatStatus === 'vatExempt') {
                    option.style.display = 'none';
                } else {
                    option.style.display = 'block';
                }
            });
        }

        function toggleVatInputs() {
            const isVatExempt = document.getElementById('isVatExempt').value === 'true';
            const vatInputs = document.getElementById('vatInputs');
            if (isVatExempt) {
                vatInputs.style.display = 'none';
            } else {
                vatInputs.style.display = 'block'
            }
            filterItemsBasedOnVatStatus();
            calculateTotal();
        }

        async function fetchLastTransactions(select) {
            const itemId = select.value;
            const accountId = document.getElementById('account').value;
            const transactionList = document.getElementById('transactionList');

            try {
                const response = await fetch(`/api/transactions/${itemId}/${accountId}`);
                const transactions = await response.json();

                // Create table header
                let tableHtml = `
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Trans. Id</th>
                        <th>Date</th>
                        <th>Bill No.</th>
                        <th>Type</th>
                        <th>Pay.Mode</th>
                        <th>Qty.</th>
                        <th>Unit</th>
                        <th>s.price</th>
                    </tr>
                </thead>
                <tbody>
        `;

                // Add table rows for each transaction
                tableHtml += transactions.map(transaction => `
            <tr onclick="window.location.href='/bills/${transaction.billId._id}/print'" style="cursor: pointer;">
                <td>${transaction._id}</td>
                <td>${new Date(transaction.transactionDate).toLocaleDateString()}</td>
                <td>${transaction.billNumber}</td>
                <td>${transaction.type}</td>
                <td>${transaction.paymentMode}</td>
                <td>${transaction.quantity}</td>
                <td>${transaction.unit}</td>
                <td>Rs.${transaction.price}</td>
            </tr>
        `).join('');

                // Close table
                tableHtml += `
                </tbody>
            </table>
        `;

                // Set the innerHTML of the transaction list container
                transactionList.innerHTML = tableHtml;

                // Show the modal
                $('#transactionModal').modal('show');
            } catch (error) {
                console.error('Error fetching transactions:', error);
            }
        }

        function removeItem(button) {
            const itemDiv = button.closest('.item');
            itemDiv.remove();
            calculateTotal();
        }

        function updateItemPrice(select) {
            const price = select.options[select.selectedIndex].getAttribute('data-price');
            const vatStatus = select.options[select.selectedIndex].getAttribute('data-vat');
            const priceInput = select.closest('.row').querySelector('.price-input');
            priceInput.value = price;
            setRowColor(select, vatStatus);
            calculateTotal();
        }

        function setRowColor(select, vatStatus) {
            const row = select.closest('.row');
            if (vatStatus === 'vatable') {
                row.classList.add('vatable-item');
                row.classList.remove('non-vatable-item');
            } else {
                row.classList.add('non-vatable-item');
                row.classList.remove('vatable-item');
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('discountPercentage').addEventListener('input', function () {
                updateDiscountFromPercentage();
                calculateTotal();
            });

            document.getElementById('discountAmount').addEventListener('input', function () {
                updateDiscountFromAmount();
                calculateTotal();
            });

            document.querySelectorAll('.price-input, .quantity-input, .item-select').forEach(element => {
                element.addEventListener('input', calculateTotal);
            });

            document.getElementById('roundOffAmount').addEventListener('input', function () {
                calculateTotal();
            });

            calculateTotal();
        });

        function updateDiscountFromPercentage() {
            const subTotal = calculateSubTotal();
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountAmount = (subTotal * discountPercentage) / 100;
            document.getElementById('discountAmount').value = discountAmount.toFixed(2);
        }

        function updateDiscountFromAmount() {
            const subTotal = calculateSubTotal();
            const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
            const discountPercentage = (discountAmount / subTotal) * 100;
            document.getElementById('discountPercentage').value = discountPercentage.toFixed(2);
        }

        function calculateSubTotal() {
            let subTotal = 0;

            document.querySelectorAll('.row .price-input').forEach((priceInput, index) => {
                const price = parseFloat(priceInput.value) || 0;
                const quantity = parseFloat(document.querySelectorAll('.row .quantity-input')[index].value) || 0;
                const itemTotal = document.querySelectorAll('.row .item-total')[index];
                const total = price * quantity || 0;
                itemTotal.textContent = total.toFixed(2);
                subTotal += total;
            });

            return subTotal;
        }

        function calculateTotal() {
            let subTotal = calculateSubTotal();
            let vatAmount = 0;
            let discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
            let taxableAmount = subTotal - discountAmount;
            let roundOffAmount = parseFloat(document.getElementById('roundOffAmount').value) || 0;

            document.querySelectorAll('.row .price-input').forEach((priceInput, index) => {
                const vatStatus = document.querySelectorAll('.row .item-select')[index].options[document.querySelectorAll('.row .item-select')[index].selectedIndex].getAttribute('data-vat');
                const vatPercentage = parseFloat(document.getElementById('vatPercentage').value) || 13;

                if (!document.getElementById('isVatExempt').checked && vatStatus === 'vatable') {
                    vatAmount = (taxableAmount * vatPercentage) / 100;
                }
            });

            // Update the totals in the DOM
            const totalAmount = taxableAmount + vatAmount + roundOffAmount;
            document.getElementById('subTotal').textContent = subTotal.toFixed(2);
            document.getElementById('taxableAmount').textContent = taxableAmount.toFixed(2);
            document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
            document.getElementById('totalAmount').textContent = (totalAmount).toFixed(2);

            document.getElementById('amountInWords').textContent = numberToWords(totalAmount);
        }

        //step by step going in input field when enter
        document.addEventListener('DOMContentLoaded', () => {
            const inputs = [
                'billDate',
                'paymentMode',
                'account',
                'isVatExempt',
                'item-search',
                'item-quantity',
                'item-price',
                'addItemButton'
                // Add more input IDs as needed
            ];

            inputs.forEach((inputId, index) => {
                const inputElement = document.getElementById(inputId);
                if (inputElement) {
                    inputElement.addEventListener('keydown', (event) => {
                        if (event.key === 'Enter') {
                            event.preventDefault();
                            const nextInputId = inputs[index + 1];
                            if (nextInputId) {
                                document.getElementById(nextInputId).focus();
                            }
                        }
                    });
                }
            });
        });


        function numberToWords(num) {
            const ones = [
                '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
                'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
                'Seventeen', 'Eighteen', 'Nineteen'
            ];

            const tens = [
                '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
            ];

            const scales = ['', 'Thousand', 'Million', 'Billion'];

            function convertHundreds(num) {
                let words = '';

                if (num > 99) {
                    words += ones[Math.floor(num / 100)] + ' Hundred ';
                    num %= 100;
                }

                if (num > 19) {
                    words += tens[Math.floor(num / 10)] + ' ';
                    num %= 10;
                }

                if (num > 0) {
                    words += ones[num] + ' ';
                }

                return words.trim();
            }

            if (num === 0) return 'Zero';

            if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

            let words = '';

            for (let i = 0; i < scales.length; i++) {
                let unit = Math.pow(1000, scales.length - i - 1);
                let currentNum = Math.floor(num / unit);

                if (currentNum > 0) {
                    words += convertHundreds(currentNum) + ' ' + scales[scales.length - i - 1] + ' ';
                }

                num %= unit;
            }

            return words.trim();
        }

    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
