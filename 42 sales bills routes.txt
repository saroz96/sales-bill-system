sales bill routes


router.post('/bills', ensureAuthenticated, ensureCompanySelected, async (req, res) => {
    try {
        const { account, items, vatPercentage, billDate, isVatExempt, discountPercentage, paymentMode, roundOffAmount: manualRoundOffAmount } = req.body;
        const companyId = req.session.currentCompany;
        const userId = req.user._id;
        console.log('Request Body:', req.body);
        // Find the counter for the company
        let billCounter = await BillCounter.findOne({ company: companyId });
        if (!billCounter) {
            billCounter = new BillCounter({ company: companyId });
        }
        // Increment the counter
        billCounter.count += 1;
        await billCounter.save();

        const isVatExemptBool = isVatExempt === 'true' || isVatExempt === true;
        const discount = parseFloat(discountPercentage) || 0;

        let subTotal = 0;
        let vatAmount = 0;
        let hasVatableItems = false;
        let hasNonVatableItems = false;

        if (!companyId) {
            return res.status(400).json({ error: 'Company ID is required' });
        }
        const accounts = await Account.findOne({ _id: account, company: companyId });
        if (!accounts) {
            return res.status(400).json({ error: 'Invalid account for this company' });
        }

        // Validate each item before processing
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const product = await Item.findById(item.item);

            if (!product) {
                req.flash('error', `Item with id ${item.item} not found`);
                return res.redirect('/bills');
            }

            const itemTotal = parseFloat(item.price) * parseFloat(item.quantity, 10);
            subTotal += itemTotal;

            if (product.vatStatus === 'vatable') {
                hasVatableItems = true;
            } else {
                hasNonVatableItems = true;
            }

            // Check stock quantity
            if (product.stock < item.quantity) {
                req.flash('error', `Not enough stock for item: ${product.name}. Available: ${product.stock}, Required: ${item.quantity}`);
                return res.redirect('/bills');
            }
        }

        // Check validation conditions after processing all items
        if (isVatExemptBool && hasVatableItems) {
            req.flash('error', 'Cannot save VAT exempt bill with vatable items');
            return res.redirect('/bills');
        }

        if (!isVatExemptBool && hasNonVatableItems) {
            req.flash('error', 'Cannot save bill with non-vatable items when VAT is applied');
            return res.redirect('/bills');
        }

        // Generate unique bill number
        const lastBill = await SalesBill.findOne().sort({ billNumber: -1 });
        const billNumber = lastBill ? lastBill.billNumber + 1 : 1;

        // Calculate totals
        const discountAmount = (subTotal * discount) / 100;
        const taxableAmount = subTotal - discountAmount;

        if (!isVatExemptBool) {
            vatAmount = (taxableAmount * vatPercentage) / 100;
        }

        let totalAmount = taxableAmount + vatAmount;
        let finalAmount = totalAmount;

        // Check if round off is enabled in settings
        const settings = await Settings.findOne(); // Assuming you have a single settings document

        // Handle case where settings is null
        if (!settings) {
            console.log('No settings found, using default settings or handling as required');
            settings = { roundOff: false }; // Provide default settings or handle as needed
        }
        let roundOffAmount = 0;
        if (settings.roundOff) {
            finalAmount = Math.round(finalAmount.toFixed(2)); // Round off final amount
            roundOffAmount = finalAmount - totalAmount;
        }
        // let roundOffAmount = finalAmount - totalAmount;

        if (manualRoundOffAmount && !settings.roundOff) {
            roundOffAmount = parseFloat(manualRoundOffAmount);
            finalAmount = totalAmount + roundOffAmount;
        }

        // if (roundOffAmount) {
        //     finalAmount += parseFloat(roundOffAmount);
        // }
        // Calculate roundOffAmount

        // Create new bill
        const newBill = new SalesBill({
            billNumber: billCounter.count,
            account,
            items: [], // We'll update this later
            isVatExempt: isVatExemptBool,
            vatPercentage: isVatExemptBool ? 0 : vatPercentage,
            subTotal,
            discountPercentage: discount,
            discountAmount,
            taxableAmount,
            vatAmount,
            // roundOffAmount: roundOffAmount ? parseFloat(roundOffAmount) : 0,
            totalAmount: finalAmount,
            roundOffAmount: roundOffAmount,
            // roundOffApplied: settings.roundOff,
            paymentMode,
            date: new Date(billDate),
            company: companyId,
            user: userId
        });

        // Create transactions
        const billItems = await Promise.all(items.map(async item => {
            const product = await Item.findById(item.item);

            const transaction = new Transaction({
                company: companyId,
                item: product._id,
                account: account,
                billNumber: billNumber,
                quantity: item.quantity,
                price: item.price,
                transactionDate: new Date(billDate),
                type: 'Sale',
                billId: newBill._id,  // Set billId to the new bill's ID
                accountType: 'Sales',
                debit: finalAmount,
                paymentMode,
                credit: 0,
            });

            await transaction.save();

            // Decrement stock quantity
            product.stock -= item.quantity;
            await product.save();

            return {
                item: product._id,
                quantity: item.quantity,
                price: item.price,
                vatStatus: product.vatStatus
            };
        }));

        // Update bill with items
        newBill.items = billItems;
        console.log(newBill);
        await newBill.save();

        if (req.query.print === 'true') {
            // Redirect to the print route
            res.redirect(`/bills/${newBill._id}/print`);
            // res.json({ success: true, billId: newBill._id });
        } else {
            // Redirect to the bills list or another appropriate page
            req.flash('success', 'Bill saved successfully!');
            res.redirect('/bills');
        }
    } catch (error) {
        console.error("Error creating bill:", error);
        req.flash('error', 'Error creating bill');
        res.redirect('/bills');
    }
});

