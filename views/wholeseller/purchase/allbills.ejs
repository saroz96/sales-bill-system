<%- include('../layouts/boilerplate', { title: '' , body: '' }) %>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.5.0/font/bootstrap-icons.min.css"
        rel="stylesheet">

    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
            /* Let columns size automatically based on content */
        }

        th,
        td {
            padding: 8px;
            text-align: left;
            border: 1px solid black;
            white-space: nowrap;
        }

        th {
            background-color: #f2f2f2;
        }

        @media print {
            @page {
                size: A4 landscape;
                margin: 10mm;
            }

            body {
                font-size: 12px;
                margin: 10mm;
            }

            #printHeader {
                display: block;
                /* Show header when printing */
            }

            /* Ensure no text wrapping when printing */
            th,
            td {
                white-space: nowrap;
            }

            /* Hide unnecessary elements during printing */
            #filterForm,
            #searchInput,
            #billsList .searchClass td:last-child {
                display: none;
            }

            /* Adjust the container width to fit landscape */
            #mainContainer {
                width: 100%;
            }
        }

        @media screen {
            #printHeader {
                display: none;
                /* Hide header when on screen */
            }
        }


        /* Custom styles to resize the form */
        .expanded-container {
            max-width: 90%;
            /* Expand the container to 90% of the viewport width */
        }

        .expanded-card {
            width: 100%;
            /* Ensure the card takes full width of the container */
        }

        @media (min-width: 768px) {
            .expanded-container {
                max-width: 90%;
                /* Adjust width for medium and larger screens */
            }
        }
    </style>
    <div class="container wow-form expanded-container">
        <div class="card mt-4 shadow-lg p-4 animate__animated animate__fadeInUp expanded-card">
            <!-- Print Header -->
            <div id="printHeader" class="d-none text-center">
                <div class="header" style="text-align: center;">
                    <h2 class="card-subtitle mb-2">
                        <%= currentCompanyName %>
                    </h2>
                    <b>
                        <h4>
                            <%= currentCompany.address %>-<%=currentCompany.ward%>, <%=currentCompany.city%>,
                                        <%=currentCompany.country%> <br><br>
                                            Tel.: <%=currentCompany.phone%>, Email: <%=currentCompany.email%>
                                                    <br><br>
                                                    VAT NO.: <span id="pan-vat-container"></span>
                        </h4>
                    </b>
                    <hr style="border: 0.5px solid;">
                </div>
            </div>
            <br>
            <!-- Search Form -->
            <h1 class="mb-4" id="printh1" style="text-align: center; text-decoration: underline;">List of Purchase Bill
            </h1>
            <!-- Add margin to separate title from the forms -->
            <div class="row g-3 align-items-center mb-4"> <!-- Align items vertically in the center -->
                <div class="col-9"> <!-- Add margin-bottom for better spacing -->
                    <form class="input-group"> <!-- Use d-flex for horizontal alignment -->
                        <input type="text" class="form-control" id="searchInput"
                            placeholder="Search by invoice number, party name & users..." aria-label="Search">
                        <button class="btn btn-outline-secondary" type="button" id="clearSearch">Clear</button>
                        <!-- Added clear button -->
                    </form>
                </div>
                <div class="col-md-3"> <!-- Same column size to maintain alignment -->
                    <form id="filterForm" class="d-flex align-items-center">
                        <!-- Align items vertically in the center -->
                        <label for="paymentModeFilter" class="mr-2 mb-0">Filter by Payment Mode:</label>
                        <select class="form-select" id="paymentModeFilter" aria-label="Filter by Payment Mode"
                            style="width: auto;">
                            <option value="">All</option>
                            <option value="cash">Cash</option>
                            <option value="credit">Credit</option>
                        </select>
                    </form>
                </div>
            </div>
            <!-- Print Button -->
            <div class="row">
                <div class="col">
                    <a href="/purchase-bills" class="btn btn-primary mb-3"><i class="bi bi-receipt"></i></a>
                    <button id="printAllBills" class="btn btn-secondary mb-3"><i class="bi bi-printer"> All</i></button>
                    <button id="printFilteredBills" class="btn btn-secondary mb-3"><i class="bi bi-printer">
                            Filtered</i></button>
                </div>
            </div>

            <table class="table table-striped" id="billsList">
                <thead>
                    <tr>
                        <th>Bill no.</th>
                        <th>Date</th>
                        <th>Suppliers Name</th>
                        <th>Pay.Mode</th>
                        <th>Sub Total</th>
                        <th>Discount</th>
                        <th>Taxable</th>
                        <th>Vat</th>
                        <th>Off(-/+)</th>
                        <th>Total</th>
                        <th>User</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% bills.forEach(purchaseBill=> { %>
                        <tr class="searchClass" data-payment-mode="<%= purchaseBill.paymentMode %>">
                            <td>
                                <%= purchaseBill.billNumber %>
                            </td>
                            <td>
                                <%= new Date(purchaseBill.date).toLocaleDateString() %>
                            </td>
                            <td>
                                <%= purchaseBill.account ? purchaseBill.account.name : 'Account Not Found' %>
                            </td>
                            <td>
                                <%= purchaseBill.paymentMode %>
                            </td>
                            <td>
                                <%= purchaseBill.subTotal %>
                            </td>
                            <td>
                                <%= purchaseBill.discountPercentage %>% - Rs.<%= purchaseBill.discountAmount %>
                            </td>
                            <td>
                                <%= purchaseBill.taxableAmount %>
                            </td>
                            <td>
                                <%= purchaseBill.vatPercentage %>% - Rs.<%= purchaseBill.vatAmount.toFixed(2) %>
                            </td>
                            <td>
                                <%= purchaseBill.roundOffAmount %>
                            </td>
                            <td>
                                <%= purchaseBill.totalAmount %>
                            </td>
                            <td>
                                <%= purchaseBill.user?purchaseBill.user.name:'User Not Found' %>
                            </td>
                            <td><a href="/purchase-bills/<%= purchaseBill._id %>/print">View</a></td>
                        </tr>
                        <% }); %>
                </tbody>
                <!-- Totals row outside tbody -->
                <tfoot>
                    <tr id="totalsRow">
                        <td colspan="4"><strong>Total:</strong></td>
                        <td><strong id="totalSubTotal">0.00</strong></td>
                        <td><strong id="totalDiscount">0.00</strong></td>
                        <td><strong id="totalTaxable">0.00</strong></td>
                        <td><strong id="totalVat">0.00</strong></td>
                        <td><strong id="totalRoundOff">0.00</strong></td>
                        <td><strong id="totalAmount">0.00</strong></td>
                        <td></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <script>
        // Function to handle search input changes
        document.getElementById('searchInput').addEventListener('input', function () {
            filterBills();
        });

        // Function to handle payment mode filter changes
        document.getElementById('paymentModeFilter').addEventListener('change', function () {
            filterBills();
        });

        // Function to filter bills based on search input and payment mode filter
        function filterBills() {
            const searchQuery = document.getElementById('searchInput').value.trim().toLowerCase();
            const selectedPaymentMode = document.getElementById('paymentModeFilter').value.trim().toLowerCase();
            const billsList = document.getElementById('billsList');
            const rows = billsList.querySelectorAll('tbody tr.searchClass');

            rows.forEach(row => {
                const billNumber = row.cells[0].textContent.trim().toLowerCase();
                const companyName = row.cells[2].textContent.trim().toLowerCase();
                const paymentMode = row.cells[3].textContent.trim().toLowerCase();
                const users = row.cells[10].textContent.trim().toLowerCase();

                const matchesSearch = companyName.includes(searchQuery) || billNumber.includes(searchQuery) || users.includes(searchQuery);
                const matchesPaymentMode = selectedPaymentMode === '' || paymentMode === selectedPaymentMode;

                if (matchesSearch && matchesPaymentMode) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            // Update totals based on visible rows
            updateTotals();
        }

        // Function to update totals based on visible rows
        function updateTotals() {
            let totalSubTotal = 0;
            let totalDiscount = 0;
            let totalTaxable = 0;
            let totalVat = 0;
            let totalRoundOff = 0;
            let totalAmount = 0;

            const visibleRows = document.querySelectorAll('#billsList tbody tr.searchClass:not([style*="display: none"])');

            visibleRows.forEach(row => {
                totalSubTotal += parseFloat(row.cells[4].textContent); // Sub Total
                totalDiscount += parseFloat(row.cells[5].textContent.split(' - Rs.')[1]); // Discount
                totalTaxable += parseFloat(row.cells[6].textContent); // Taxable
                totalVat += parseFloat(row.cells[7].textContent.split(' - Rs.')[1]); // Vat
                totalRoundOff += parseFloat(row.cells[8].textContent); // Round Off
                totalAmount += parseFloat(row.cells[9].textContent); // Total
            });

            // Update totals row in the footer
            document.getElementById('totalSubTotal').textContent = totalSubTotal.toFixed(2);
            document.getElementById('totalDiscount').textContent = totalDiscount.toFixed(2);
            document.getElementById('totalTaxable').textContent = totalTaxable.toFixed(2);
            document.getElementById('totalVat').textContent = totalVat.toFixed(2);
            document.getElementById('totalRoundOff').textContent = totalRoundOff.toFixed(2);
            document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);
        }

        // Initial call to filterBills to apply any initial filters (if needed)
        filterBills();

        // //Handle scape buttons
        // document.addEventListener('keydown', function (event) {
        //     if (event.key === 'Escape') {
        //         event.preventDefault(); // Prevent default escape behavior
        //         var exitModal = new bootstrap.Modal(document.getElementById('exitConfirmationModal'));
        //         exitModal.show();
        //     }
        // });

        // // Handle the exit confirmation
        // document.getElementById('confirmExit').addEventListener('click', function () {
        //     // Redirect to the home page
        //     window.location.href = '/wholesellerDashboard'; // Change '/' to your home page URL
        // });

        // Print all bills
        document.getElementById('printAllBills').addEventListener('click', function () {
            printBills(document.querySelectorAll('#billsList tbody tr.searchClass'));
        });

        // Print filtered bills
        document.getElementById('printFilteredBills').addEventListener('click', function () {
            printBills(document.querySelectorAll('#billsList tbody tr.searchClass:not([style*="display: none"])'));
        });

        // Function to print the selected bills
        function printBills(billRows) {
            const printWindow = window.open('', '_blank');

            // Basic HTML and styling for the print view
            const headerHTML = `
        <html>
            <head>
                <title>Print Bills</title>
                <style>
                    @page { size: A4 landscape; margin: 10mm; }
                    table { width: 100%; border-collapse: collapse; }
                    th, td { padding: 8px; text-align: left; border: 1px solid black; white-space: nowrap; }
                    th { background-color: #f2f2f2; }
                </style>
            </head>
            <body>
                ${document.getElementById('printHeader').innerHTML}
                <h1>Purchase Bills</h1>
    `;

            // Table header for the printed bills
            const tableHeaderHTML = `
        <table>
            <thead>
                <tr>
                    <th>Bill no.</th>
                    <th>Date</th>
                    <th>Party Name</th>
                    <th>Pay.Mode</th>
                    <th>Sub Total</th>
                    <th>Discount</th>
                    <th>Taxable</th>
                    <th>Vat</th>
                    <th>Off(-/+)</th>
                    <th>Total</th>
                    <th>User</th>
                </tr>
            </thead>
            <tbody>
    `;

            // Initialize variables for totals
            let totalSubTotal = 0;
            let totalDiscount = 0;
            let totalTaxable = 0;
            let totalVat = 0;
            let totalRoundOff = 0;
            let totalAmount = 0;

            // Construct table rows and calculate totals
            let tableRowsHTML = '';
            billRows.forEach(row => {
                const cells = row.querySelectorAll('td');
                tableRowsHTML += '<tr>';

                // Exclude the last cell (Actions) from printing
                for (let i = 0; i < cells.length - 1; i++) {
                    const cellText = cells[i]?.textContent || '';
                    tableRowsHTML += `<td>${cellText}</td>`;

                    // Calculate totals for visible rows
                    if (row.style.display !== 'none') {
                        switch (i) {
                            case 4: // Sub Total
                                totalSubTotal += parseFloat(cellText) || 0;
                                break;
                            case 5: // Discount
                                totalDiscount += parseFloat(cellText.split(' - Rs.')[1]) || 0;
                                break;
                            case 6: // Taxable
                                totalTaxable += parseFloat(cellText) || 0;
                                break;
                            case 7: // Vat
                                totalVat += parseFloat(cellText.split(' - Rs.')[1]) || 0;
                                break;
                            case 8: // Round Off
                                totalRoundOff += parseFloat(cellText) || 0;
                                break;
                            case 9: // Total Amount
                                totalAmount += parseFloat(cellText) || 0;
                                break;
                        }
                    }
                }

                tableRowsHTML += '</tr>';
            });

            // Add a totals row at the end of the table
            const totalsRowHTML = `
        <tr style="font-weight: bold; background-color: #f9f9f9;">
            <td colspan="4">Totals</td>
            <td>${totalSubTotal.toFixed(2)}</td>
            <td>${totalDiscount.toFixed(2)}</td>
            <td>${totalTaxable.toFixed(2)}</td>
            <td>${totalVat.toFixed(2)}</td>
            <td>${totalRoundOff.toFixed(2)}</td>
            <td>${totalAmount.toFixed(2)}</td>
            <td></td> <!-- Empty cell for the User column -->
        </tr>
    `;

            // Construct the final HTML for printing
            const finalHTML = `
        ${headerHTML}
        ${tableHeaderHTML}
        ${tableRowsHTML}
        ${totalsRowHTML}
        </tbody></table>
        </body></html>
    `;

            // Write to the print window and initiate print
            printWindow.document.write(finalHTML);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        const panVatNo = '<%= currentCompany.pan %>';
        const container = document.getElementById('pan-vat-container');

        for (let i = 0; i < panVatNo.length; i++) {
            const digit = document.createElement('span');
            digit.className = 'bordered-digit';
            digit.textContent = panVatNo[i];
            container.appendChild(digit);
        }
    </script>