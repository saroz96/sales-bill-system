<div class="form-control">
    <%- include('../layouts/boilerplate', { title: 'Stock Adjustment' , body: 'wholeseller >> stock adjustment >> add'
        }) %>
</div>
<style>
    .vatable-item {
        background-color: lightgreen;
    }

    .non-vatable-item {
        background-color: lightyellow;
    }

    .dropdown-menu {
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
    }

    .dropdown-item {
        cursor: pointer;
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

    .dropdown-item:focus,
    .dropdown-item:hover {
        background-color: #f1f1f1;
    }

    .item {
        margin-bottom: 10px;
    }

    .last-transactions {
        list-style-type: none;
        padding-left: 0;
    }

    .credit-party {
        display: none;
        /* Hide credit party options by default */
    }

    .dropdown-menu {
        display: none;
    }

    .dropdown-menu.show {
        display: block;
    }

    .dropdown-header {
        display: flex;
        justify-content: space-between;
        padding: 8px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        font-weight: bold;
    }

    .dropdown-item {
        display: flex;
        justify-content: space-around;
        padding: 8px;
        border-bottom: 1px solid #dee2e6;
    }

    .dropdown-item:last-child {
        border-bottom: none;
    }

    /* Styling for Select2 dropdown */
    .select2-container .select2-selection--single {
        height: 40px;
        padding: 5px;
        border-radius: 4px;
        border: 1px solid #ccc;
        display: flex;
        align-items: center;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 100%;
        right: 10px;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        color: #495057;
        font-size: 16px;
    }

    /* Focus state for the Select2 dropdown */
    .select2-container--default .select2-selection--single:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
</style>
<div class="container" id="mainContainer">
    <div class=" card mt-4">
        <div class="card-header">
            Create New Adjustment
        </div>
        <div class="card-body">
            <form action="/stockAdjustments" method="post" id="billForm">
                <div class="form-group row">

                    <% if (companyDateFormat==='nepali' ) { %>
                        <div class="col">
                            <label for="nepaliDate">Date:</label>
                            <input type="text" name="nepaliDate" id="nepaliDate" class="form-control" required
                                value="<%= nepaliDate || '' %>" autofocus>
                        </div>
                        <div class="col d-none">
                            <label for="billDate">Date:</label>
                            <input type="date" name="billDate" id="billDate" class="form-control"
                                value="<%= new Date().toISOString().split('T')[0] %>" disabled autofocus>
                        </div>
                        <% } else { %>
                            <div class="col">
                                <label for="billDate">Date:</label>
                                <input type="date" name="billDate" id="billDate" class="form-control" required
                                    value="<%= new Date().toISOString().split('T')[0] %>" autofocus>
                            </div>
                            <div class="col d-none">
                                <label for="nepaliDate">Date:</label>
                                <input type="text" name="nepaliDate" id="nepaliDate" class="form-control"
                                    value="<%= nepaliDate || '' %>" disabled autofocus>
                            </div>

                            <% } %>
                                <div class="col">
                                    <label for="adjustmentType">Type:</label>
                                    <select id="adjustmentType" name="adjustmentType" class="form-control"
                                        onchange="toggleReasonDropdowns()">
                                        <option value="short">Short</option>
                                        <option value="xcess">Xcess</option>
                                    </select>
                                </div>
                                <div class="col">
                                    <p id="billNumber">
                                        <label for="billNumber">Vch. No:</label>
                                        <input type="number" class="form-control" value="<%=nextBillNumber %>" disabled
                                            readonly>
                                        <input type="hidden" name="billNumber" value="<%= nextBillNumber %>" readonly>
                                    </p>
                                </div>

                                <div class="col">
                                    <label for="isVatExempt">VAT</label>
                                    <select name="isVatExempt" id="isVatExempt" class="form-control"
                                        onchange="toggleVatInputs()"
                                        onchange="filterItems(document.getElementById('itemSearch'))">
                                        <option value="all">All</option>
                                        <option value="false">13%</option>
                                        <option value="true">Exempt</option>
                                    </select>
                                </div>
                </div>
                <hr style="border: 1px solid gray;">
                <div class="form-group row">
                    <div class="col">
                        <div class="form-group row">
                            <div class="col">
                                <label for="itemSearch">Search Item</label>
                                <input type="text" id="itemSearch" class="form-control" placeholder="Search for an item"
                                    oninput="filterItems(this)" autocomplete="off"
                                    onkeydown="handleItemSearchKeydown(event)">
                                <div id="dropdownMenu" class="dropdown-menu"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <table class="table table-bordered" id="itemsTable">
                    <thead>
                        <tr>
                            <th>S.No.</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>H.S. Code</th>
                            <th>Qty</th>
                            <th>Unit</th>
                            <th>Batch & Exp.</th>
                            <th>Price</th>
                            <th>Amount</th>
                            <th>Reason</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="items">
                        <!-- Item rows will be dynamically added here -->
                    </tbody>
                </table>

                <hr style="border: 1px solid gray;">
                <div class="form-group">
                    <label for="note">Note</label>
                    <input type="text" class="form-control" id="note" name="note" placeholder="add note"
                        onkeydown="handleAddNoteKeydown(event)">
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label for="subTotal">Sub Total: </label>
                        <p class="form-control-plaintext">Rs.<span id="subTotal">0</span></p>
                    </div>
                    <div class="col">
                        <label for="discountPercentage">Discount %: </label>
                        <input type="number" step="any" name="discountPercentage" id="discountPercentage"
                            class="form-control" value="0" oninput="calculateTotal()">
                    </div>
                    <div class="col">
                        <label for="discountAmount">Discount (Rs.): </label>
                        <input type="number" step="any" name="discountAmount" id="discountAmount" value="0"
                            class="form-control" oninput="calculateTotal()">
                    </div>
                </div>
                <div id="vatInputs">
                    <div class="form-group row">
                        <div class="col">
                            <label for="taxableAmount">Taxable Amount: </label>
                            <p class="form-control-plaintext">Rs.<span id="taxableAmount">0</span></p>
                        </div>
                        <div class="col">
                            <label for="vatPercentage">VAT (13%): </label>
                            <input type="number" name="vatPercentage" id="vatPercentage" class="form-control"
                                value="13">
                        </div>
                        <div class="col">
                            <label for="vatAmount">VAT Amount: </label>
                            <p class="form-control-plaintext">Rs.<span id="vatAmount">0</span></p>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label for="totalAmount">Total Amount: </label>
                        <p class="form-control-plaintext">Rs.<span id="totalAmount">0</span></p>
                    </div>
                    <div class="col">
                        <label for="roundOffAmount">Round Off: </label>
                        <input type="number" class="form-control" step="any" id="roundOffAmount" name="roundOffAmount"
                            value="0" oninput="calculateTotal()">
                    </div>
                    <div class="col">
                        <label for="amountInWords">In Words: </label>
                        <p class="form-control-plaintext" id="amountInWords" oninput="numberToWords">Zero Only.</p>
                    </div>
                </div>
                <div style="float: right;">
                    <button type="button" class="btn btn-primary" id="saveBill" onclick="submitBillForm(false)">Save
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="showPrintModal()">Save & Print
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="printModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Print Bill</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Do you want to print this bill?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitBillForm(true)">Save & Print</button>
            </div>
        </div>
    </div>
</div>

<!-- Exit Confirmation Modal -->
<!-- <div class="modal fade" id="exitConfirmationModal" tabindex="-1" aria-labelledby="exitConfirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exitConfirmationModalLabel">Exit Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to exit without saving?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmExit" autofocus>Yes, Exit</button>
            </div>
        </div>
    </div>
</div> -->

<!-- Batch and Expiry Modal -->
<div class="modal fade" id="batchModal" tabindex="-1" aria-labelledby="batchModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="batchModalLabel">Batch Information</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="batchModalBody">
                <!-- Batch information will be populated here dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Sales Price Modal -->
<div class="modal fade" id="setSalesPriceModal" tabindex="-1" aria-labelledby="setSalesPriceModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="setSalesPriceModalLabel">Set Sales Price for New Batch</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="puPrice" class="form-label">Purchase Price</label>
                    <input type="number" class="form-control" id="puPrice" step="any" readonly>
                </div>
                <div class="mb-3">
                    <label for="marginPercentage" class="form-label">Margin Percentage (%)</label>
                    <input type="number" class="form-control" id="marginPercentage" min="0" step="any"
                        placeholder="Enter margin percentage">
                </div>
                <div class="mb-3">
                    <label for="currency" class="form-label">Currency</label>
                    <select class="form-select" id="currency">
                        <option value="NPR">NPR</option>
                        <option value="INR">INR</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="mrp" class="form-label">MRP</label>
                    <input type="number" class="form-control" id="mrp" step="any" placeholder="Enter MRP">
                </div>
                <div class="mb-3">
                    <label for="salesPrice" class="form-label">Sales Price</label>
                    <input type="number" class="form-control" id="salesPrice" step="any" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveSalesPrice">Save Sales Price</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/nepali-datepicker/js/nepali.datepicker.v4.0.min.js"></script>
<script>
    let itemIndex = 0;
    let currentFocus = 0;

    $(document).ready(function () {
        // Initialize Select2 for searchable dropdown
        $('#account').select2({
            placeholder: "Select a party name",
            allowClear: true,
            width: '100%', // Ensure it takes the full width of the container
        });
    });

    async function fetchItems(query, vatStatus, existingItemIds) {
        try {
            const response = await fetch(`/items/search?q=${query}&isVatExempt=${vatStatus}&exclude=${existingItemIds.join(',')}`);
            const data = await response.json();

            console.log('Fetched items:', data);

            if (!Array.isArray(data)) {
                throw new Error('Invalid response format');
            }

            return data;
        } catch (error) {
            console.error('Error fetching items:', error);
            return [];
        }
    }


    document.getElementById('itemSearch').addEventListener('keydown', function (event) {
        const inputField = this;
        const dropdownMenu = document.getElementById('dropdownMenu');
        const items = dropdownMenu.getElementsByClassName('dropdown-item');


        if (event.key === 'ArrowDown') {
            // Navigate down the list
            currentFocus++;
            addActive(items);
        } else if (event.key === 'ArrowUp') {
            // Navigate up the list
            currentFocus--;
            addActive(items);
        } else if (event.key === 'Enter') {
            // Select the item
            event.preventDefault();
            if (currentFocus > -1) {
                if (items[currentFocus]) {
                    items[currentFocus].click();
                }
            }
        }
    });

    function addActive(items) {
        if (!items) return false;
        removeActive(items);
        if (currentFocus >= items.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = items.length - 1;
        items[currentFocus].classList.add('active');
    }

    function removeActive(items) {
        for (let i = 0; i < items.length; i++) {
            items[i].classList.remove('active');
        }
    }

    async function filterItems(input) {
        const query = input.value.trim().toLowerCase();
        const vatStatus = document.getElementById('isVatExempt').value; // Get the VAT status from the select input
        const dropdownMenu = input.nextElementSibling;

        // To exclude already present items from search
        const existingItemIds = Array.from(document.querySelectorAll('input[name^="items["]'))
            .filter(input => input.name.includes('[item]'))
            .map(input => input.value);

        if (query.length === 0) {
            dropdownMenu.innerHTML = '';
            dropdownMenu.classList.remove('show'); // Hide the dropdown if input is blank
            return;
        }

        try {
            const items = await fetchItems(query, vatStatus, existingItemIds);

            console.log('Filtered items:', items);

            // Clear existing dropdown items
            dropdownMenu.innerHTML = '';

            if (items.length === 0) {
                // Display a "No items found" message
                const noItemsMessage = document.createElement('div');
                noItemsMessage.classList.add('dropdown-item');
                noItemsMessage.textContent = 'No items found';
                noItemsMessage.style.textAlign = 'center'; // Center-align the message
                noItemsMessage.style.color = 'white';
                noItemsMessage.style.backgroundColor = 'blue';
                dropdownMenu.appendChild(noItemsMessage);
                dropdownMenu.classList.add('show');
            } else {
                // Create and add table header
                const header = document.createElement('div');
                header.classList.add('dropdown-header');
                header.innerHTML = `
                <div><strong>Item Code</strong></div>
                <div><strong>H.S. Code</strong></div>
                <div><strong>Item Name</strong></div>
                <div><strong>Category</strong></div>
                <div><strong>Quantity</strong></div>
                <div><strong>Unit</strong></div>
                <div><strong>S.Price</strong></div>
                <div><strong>Pu.Price</strong></div>
            `;
                dropdownMenu.appendChild(header);

                // Create and add dropdown items
                items.forEach(item => {
                    const dropdownItem = document.createElement('div');
                    dropdownItem.classList.add('dropdown-item');
                    dropdownItem.tabIndex = 0; // Make the item focusable

                    // Add class based on VAT status
                    if (item.vatStatus === 'vatable') {
                        dropdownItem.classList.add('vatable-item');
                    } else {
                        dropdownItem.classList.add('non-vatable-item');
                    }

                    // Calculate the total available stock from stockEntries
                    const totalStock = item.stockEntries.reduce((acc, entry) => acc + entry.quantity, 0);

                    dropdownItem.innerHTML = `
                    <div>${item.uniqueNumber || 'N/A'}</div>
                    <div>${item.hscode || 'N/A'}</div>
                    <div>${item.name}</div>
                    <div>${item.category ? item.category.name : 'No Category'}</div>
                    <div>${totalStock}</div>
                    <div>${item.unit ? item.unit.name : ''}</div>
                    <div>Rs.${item.price}</div>
                    <div>Rs.${item.puPrice}</div>
                `;
                    dropdownItem.addEventListener('click', () => addItemToBill(item, dropdownMenu));
                    dropdownMenu.appendChild(dropdownItem);
                });

                dropdownMenu.classList.add('show');
            }
        } catch (error) {
            console.error('Error fetching items:', error);
            // Optionally, handle errors here
        }
    }

    let selectedBatch = {}; // Store the selected batch information

    function addItemToBill(item, dropdownMenu) {
        const tbody = document.getElementById('items');
        const inputField = document.getElementById('itemSearch');
        const adjustmentType = document.getElementById('adjustmentType').value;

        if (!inputField.value.trim()) {
            return; // Do not add an item if the search field is blank
        }

        // Show the batch modal only if adjustmentType is 'short'
        if (adjustmentType === 'short') {
            showBatchModal(item, (batchInfo) => {
                selectedBatch = batchInfo;
                createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType);
            });

            // Clear the item search field after adding the item
            inputField.value = '';
        } else {
            // For 'xcess', directly allow input without showing batch modal
            selectedBatch = { batchNumber: '', expiryDate: '', puPrice: '' };
            createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType);

            // Clear the item search field after adding the item
            inputField.value = '';
        }
    }

    function createItemRow(item, selectedBatch, tbody, dropdownMenu, adjustmentType) {
        const tr = document.createElement('tr');
        tr.classList.add('item', item.vatStatus ? 'vatable-item' : 'non-vatable-item');

        const serialNumber = tbody.rows.length + 1;

        tr.innerHTML = `
        <td>${serialNumber}</td>
        <td>${item.uniqueNumber || 'N/A'}</td>
        <td>
            <input type="hidden" name="items[${itemIndex}][item]" value="${item._id}">
            ${item.name}
        </td>
        <td>
            <input type="hidden" name="items[${itemIndex}][hscode]" value="${item.hscode || 'N/A'}">
            ${item.hscode || 'N/A'}
        </td>
        <td>
            <input type="number" name="items[${itemIndex}][quantity]" value="0" class="form-control item-quantity" id="quantity-${itemIndex}" min="1" step="any" oninput="updateItemTotal(this)" onkeydown="handleQuantityKeydown(event,${itemIndex})" onfocus="selectValue(this)">
        </td>
        <td>
            ${item.unit ? item.unit.name : ''}
            <input type="hidden" name="items[${itemIndex}][unit]" value="${item.unit ? item.unit._id : ''}">
        </td>
        <!-- Add fields for batch number and expiry date, these will remain editable -->
        <td>
            <input type="text" name="items[${itemIndex}][batchNumber]" value="${selectedBatch.batchNumber}" class="form-control item-batchNumber" id="batchNumber-${itemIndex}" onkeydown="handleBatchKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
            <input type="date" name="items[${itemIndex}][expiryDate]" value="${selectedBatch.expiryDate}" class="form-control item-expiryDate" id="expiryDate-${itemIndex}" onkeydown="handleExpDateKeydown(event, ${itemIndex})" onfocus="selectValue(this)">
        </td>
        <td><input type="number" name="items[${itemIndex}][puPrice]" value="${selectedBatch.puPrice}" class="form-control item-puPrice" id="puPrice-${itemIndex}" step="any" oninput="updateItemTotal(this)" onkeydown="handlePriceKeydown(event, ${itemIndex})" onfocus="selectValue(this)"></td>
        <td class="item-amount">0.00</td>
        <td>
            <select name="items[${itemIndex}][reason]" class="form-control reason-dropdown short-reason" style="${adjustmentType === 'short' ? 'display: block;' : 'display: none;'}" id="shortReason-${itemIndex}" onkeydown="handleReasonKeydown(event,${itemIndex})" onfocus="selectValue(this)">
                <option value="">None</option>
                <option value="Exp.">Exp.</option>
                <option value="Damage">Damage</option>
                <option value="Donate">Donate</option>
            </select>
            <select name="items[${itemIndex}][reason]" class="form-control reason-dropdown xcess-reason" style="${adjustmentType === 'xcess' ? 'display: block;' : 'display: none;'}" id="xcessReason-${itemIndex}" onkeydown="handleReasonKeydown(event,${itemIndex})" onfocus="selectValue(this)">
                <option value="">None</option>
                <option value="Bonus">Bonus</option>
            </select>
        </td>
        <td>
            <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close" onclick="removeItem(this)">
                <span aria-hidden="true">&times;</span>
            </button>
        </td>
        <input type="hidden" name="items[${itemIndex}][vatStatus]" value="${item.vatStatus}">
    `;
        tbody.appendChild(tr);
        itemIndex++;
        calculateTotal();

        // Hide the dropdown menu after selecting an item
        dropdownMenu.classList.remove('show');

        // Focus on the newly added row's quantity input
        document.getElementById(`quantity-${itemIndex - 1}`).focus();
    }

    function showBatchModal(item, callback) {
        const modal = document.getElementById('batchModal');
        const modalBody = document.getElementById('batchModalBody');

        const outOfStock = item.stockEntries.every((entry) => entry.quantity === 0);
        let modalContent = `<h5>Batch Information for ${item.name}</h5>`;

        if (outOfStock) {
            modalContent += `<div class="alert alert-warning" role="alert">Out of Stock</div>`;
        } else {
            modalContent += `
        <table class="table" id="batchTable">
            <thead>
                <tr>
                    <th>Batch Number</th>
                    <th>Expiry Date</th>
                    <th>Quantity</th>
                    <th>S.P</th>
                    <th>C.P</th>
                    <th>Mrp</th>
                    <th>%</th>
                </tr>
            </thead>
            <tbody>
        `;

            item.stockEntries.forEach((entry) => {
                if (entry.quantity > 0) {
                    modalContent += `
                <tr tabindex="0">
                    <td>${entry.batchNumber || 'N/A'}</td>
                    <td>${entry.expiryDate || 'N/A'}</td>
                    <td>${entry.quantity}</td>
                    <td>${entry.price}</td>
                    <td>${entry.puPrice}</td>
                    <td>${entry.mrp}</td>
                    <td>${entry.marginPercentage}</td>
                </tr>
            `;
                }
            });

            modalContent += '</tbody></table>';
        }

        modalBody.innerHTML = modalContent;
        $(modal).modal('show');

        $(modal).on('shown.bs.modal', function () {
            const firstRow = modalBody.querySelector('tbody tr');
            if (firstRow) {
                firstRow.focus();
            }
        });

        const rows = modalBody.querySelectorAll('tbody tr');
        let selectedIndex = 0;

        rows.forEach((row, index) => {
            row.addEventListener('keydown', (event) => {
                if (event.key === 'ArrowDown') {
                    selectedIndex = (index + 1) % rows.length;
                    rows[selectedIndex].focus();
                } else if (event.key === 'ArrowUp') {
                    selectedIndex = (index - 1 + rows.length) % rows.length;
                    rows[selectedIndex].focus();
                } else if (event.key === 'Enter') {
                    const batchNumber = row.cells[0].textContent;
                    const expiryDate = row.cells[1].textContent;
                    const puPrice = row.cells[4].textContent;
                    callback({ batchNumber, expiryDate, puPrice });
                    $(modal).modal('hide');
                }
            });
        });

        modal.addEventListener('hidden.bs.modal', function () {
            modalBody.innerHTML = '';
        });
    }


    function removeItem(button) {
        const row = button.closest('tr');
        row.remove();
        calculateTotal();
    }

    function toggleReasonDropdowns() {
        const adjustmentType = document.getElementById('adjustmentType').value;
        const rows = document.querySelectorAll('#items tr');

        rows.forEach(row => {
            const shortReasonDropdown = row.querySelector('.short-reason');
            const xcessReasonDropdown = row.querySelector('.xcess-reason');

            if (adjustmentType === 'short') {
                shortReasonDropdown.style.display = 'block';
                xcessReasonDropdown.style.display = 'none';
            } else if (adjustmentType === 'xcess') {
                shortReasonDropdown.style.display = 'none';
                xcessReasonDropdown.style.display = 'block';
            } else {
                shortReasonDropdown.style.display = 'none';
                xcessReasonDropdown.style.display = 'none';
            }
        });
    }

    // Initial setup for reason dropdowns on page load
    document.addEventListener('DOMContentLoaded', function () {
        toggleReasonDropdowns();
    });

    // Update dropdowns when adjustment type changes
    document.getElementById('adjustmentType').addEventListener('change', toggleReasonDropdowns);



    function updateItemTotal(input) {
        const row = input.closest('tr');
        const quantity = parseFloat(row.querySelector('input.item-quantity').value) || 0;
        const puPrice = parseFloat(row.querySelector('input.item-puPrice').value) || 0;
        const amount = quantity * puPrice;
        row.querySelector('.item-amount').textContent = amount.toFixed(2);
        calculateTotal();
    }

    function updateDiscountFromPercentage() {
        const subTotal = calculateSubTotal();
        const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
        const discountAmount = (subTotal * discountPercentage) / 100;
        document.getElementById('discountAmount').value = discountAmount.toFixed(2);
    }

    function updateDiscountFromAmount() {
        const subTotal = calculateSubTotal();
        const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;
        const discountPercentage = (discountAmount / subTotal) * 100;
        document.getElementById('discountPercentage').value = discountPercentage.toFixed(2);
    }

    function calculateSubTotal() {
        const rows = document.querySelectorAll('#items tr.item');
        let subTotal = 0;

        rows.forEach(row => {
            const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
            const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value === 'true';

            subTotal += amount;
            if (vatStatus) {
                taxableAmount += amount;
                vatAmount += amount * 0.13; // VAT is 13%
            }
        });

        return subTotal;
    }

    function calculateTotal() {
        const rows = document.querySelectorAll('#items tr.item');
        let subTotal = calculateSubTotal();
        let vatAmount = 0;
        let totalTaxableAmount = 0;
        let totalNonTaxableAmount = 0;

        // Separate amounts for vatable and non-vatable items
        rows.forEach(row => {
            const amount = parseFloat(row.querySelector('.item-amount').textContent) || 0;
            const vatStatus = row.querySelector('input[name$="[vatStatus]"]').value;

            if (vatStatus === 'vatable') {
                totalTaxableAmount += amount;
            } else {
                totalNonTaxableAmount += amount;
            }
        });

        const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
        const discountAmount = parseFloat(document.getElementById('discountAmount').value) || 0;

        // Calculate total amount before discount
        const totalAmountBeforeDiscount = totalTaxableAmount + totalNonTaxableAmount;

        // Apply discount proportionally to vatable and non-vatable items
        // const totalDiscount = (totalAmountBeforeDiscount * discountPercentage / 100) + discountAmount;
        const discountForTaxable = (totalTaxableAmount * discountPercentage / 100);
        const discountForNonTaxable = (totalNonTaxableAmount * discountPercentage / 100)

        const finalTaxableAmount = totalTaxableAmount - discountForTaxable;
        const finalNonTaxableAmount = totalNonTaxableAmount - discountForNonTaxable;

        // Calculate VAT only for vatable items
        const vatSelection = document.getElementById('isVatExempt').value;
        if (vatSelection === 'false' || vatSelection === 'all') {
            vatAmount = finalTaxableAmount * 0.13; // VAT is 13%
        } else {
            vatAmount = 0;
        }
        const roundOffAmount = parseFloat(document.getElementById('roundOffAmount').value) || 0;
        const totalAmount = finalTaxableAmount + finalNonTaxableAmount + vatAmount + roundOffAmount;

        document.getElementById('subTotal').textContent = subTotal.toFixed(2);
        document.getElementById('taxableAmount').textContent = finalTaxableAmount.toFixed(2);
        document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
        document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);

        const amountInWords = numberToWords(totalAmount) + ' Only.';
        document.getElementById('amountInWords').textContent = amountInWords;
    }


    function toggleVatInputs() {
        const isVatExempt = document.getElementById('isVatExempt').value === 'true';
        const vatInputs = document.getElementById('vatInputs');
        vatInputs.style.display = isVatExempt ? 'none' : 'block';
        calculateTotal();
    }

    function showPrintModal() {
        $('#printModal').modal('show');
    }

    function submitBillForm(print) {
        shouldPrint = print;
        const billForm = document.getElementById('billForm');
        const saveButton = document.getElementById('saveBill');

        // Change button text and disable it
        saveButton.innerText = 'Saving...';
        saveButton.disabled = true;

        if (print) {
            const url = new URL(billForm.action);
            url.searchParams.append('print', 'true');
            billForm.action = url.toString();
        }

        // Simulate form submission (replace this with actual form submission logic)
        setTimeout(() => {
            billForm.submit();

            // Reset button text and enable it after submission
            saveButton.innerText = 'Save Bill';
            saveButton.disabled = false;
        }, 2000); // Simulating a delay; adjust or remove as needed
    }


    document.getElementById('billForm').addEventListener('submit', function (event) {
        if (!shouldPrint && event.submitter && event.submitter.innerText === 'Save & Print Bill') {
            event.preventDefault();
            showPrintModal();
        }
    });
    function numberToWords(num) {
        const ones = [
            '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
            'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
            'Seventeen', 'Eighteen', 'Nineteen'
        ];

        const tens = [
            '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
        ];

        const scales = ['', 'Thousand', 'Million', 'Billion'];

        function convertHundreds(num) {
            let words = '';

            if (num > 99) {
                words += ones[Math.floor(num / 100)] + ' Hundred ';
                num %= 100;
            }

            if (num > 19) {
                words += tens[Math.floor(num / 10)] + ' ';
                num %= 10;
            }

            if (num > 0) {
                words += ones[num] + ' ';
            }

            return words.trim();
        }

        if (num === 0) return 'Zero';

        if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

        let words = '';

        for (let i = 0; i < scales.length; i++) {
            let unit = Math.pow(1000, scales.length - i - 1);
            let currentNum = Math.floor(num / unit);

            if (currentNum > 0) {
                words += convertHundreds(currentNum) + ' ' + scales[scales.length - i - 1] + ' ';
            }

            num %= unit;
        }

        return words.trim();
    }
    window.addEventListener('DOMContentLoaded', () => {
        toggleVatInputs();
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('discountPercentage').addEventListener('input', function () {
            updateDiscountFromPercentage();
            calculateTotal();
        });

        document.getElementById('discountAmount').addEventListener('input', function () {
            updateDiscountFromAmount();
            calculateTotal();
        });

        // document.querySelectorAll('.price-input, .quantity-input, .item-select').forEach(element => {
        //     element.addEventListener('input', calculateTotal);
        // });

        document.getElementById('roundOffAmount').addEventListener('input', function () {
            calculateTotal();
        });

        calculateTotal();
    });

    // Assuming you have a batch modal with an ID 'batchModal' and an input field inside it
    const batchModal = document.getElementById('batchModal');

    // Add keydown event listener to the batch modal to detect "Enter" press
    batchModal.addEventListener('keydown', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault(); // Prevent form submission or modal close

            // Focus on the quantity field of the last added row after pressing "Enter"
            focusOnLastQuantityField();
        }
    });

    // Function to focus on the quantity field of the last added item
    function focusOnLastQuantityField() {
        const tbody = document.getElementById('items');

        // Get the last row's quantity field
        const lastRow = tbody.querySelector('tr.item:last-child');

        if (lastRow) {
            const lastQuantityField = lastRow.querySelector('.item-quantity');

            if (lastQuantityField) {
                lastQuantityField.focus();
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const itemSearchInput = document.getElementById('itemSearch'); // Initial focus on item search input
    });

    async function handleItemSearchKeydown(event) {
        const itemSearchInput = document.getElementById('itemSearch');
        const itemsTable = document.getElementById('itemsTable');
        const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

        if (itemSearchInput.value.length > 0) {
            if (event.key === 'Enter') {

                focusOnLastRow('item-quantity');
            }
        } else if (itemSearchInput.value.length < 0 || itemsAvailable) {
            if (event.key === 'Enter') {
                const addNoteInput = document.getElementById('note')
                addNoteInput.focus();
            }
        }
    }

    function handleAddNoteKeydown(event) {
        if (event.key === 'Enter') {
            const submitBillForm = document.getElementById('saveBill');
            const itemsAvailable = itemsTable && itemsTable.querySelectorAll('.item').length > 0;

            if (itemsAvailable) {
                event.preventDefault();
                submitBillForm.focus();
            }
        }
    }

    function handleQuantityKeydown(event) {
        if (event.key === 'Enter') {
            // Focus on the price input field
            // document.getElementById('price').focus();
            // document.getElementById(`price-${itemIndex}`).focus();
            const batchNumberInput = document.getElementById(`batchNumber-${itemIndex - 1}`);
            batchNumberInput.focus();
            batchNumberInput.select();

        }
    }

    function handleBatchKeydown(event) {
        if (event.key === 'Enter') {
            const expDateInput = document.getElementById(`expiryDate-${itemIndex - 1}`);
            expDateInput.focus();
            expDateInput.select();
        }
    }

    function handleExpDateKeydown(event) {
        if (event.key === 'Enter') {
            const priceInput = document.getElementById(`puPrice-${itemIndex - 1}`);
            priceInput.focus();
            priceInput.select();
        }
    }

    // function handlePriceKeydown(event) {
    //     if (event.key === 'Enter') {

    //         // Get the current item index
    //         const index = itemIndex - 1;

    //         // Get the reason dropdowns based on the current item index
    //         const shortReasonInput = document.getElementById(`shortReason-${index}`);
    //         const xcessReasonInput = document.getElementById(`xcessReason-${index}`);

    //         // Check which dropdown should be focused based on the adjustment type
    //         const adjustmentType = document.getElementById('adjustmentType').value;

    //         if (adjustmentType === 'short' && shortReasonInput) {
    //             shortReasonInput.focus();
    //             shortReasonInput.select();
    //         } else if (adjustmentType === 'xcess' && xcessReasonInput) {
    //             xcessReasonInput.focus();
    //             xcessReasonInput.select();
    //         }
    //     }
    // }

    function handlePriceKeydown(event, itemIndex) {
        if (event.key === 'Enter') {
            const puPriceInput = document.getElementById(`puPrice-${itemIndex}`);
            const adjustmentType = document.getElementById('adjustmentType').value;

            if (puPriceInput.value) {
                // Only show the modal if adjustment type is 'xcess'
                if (adjustmentType === 'xcess') {
                    // Set the PU Price in the modal
                    document.getElementById('puPrice').value = puPriceInput.value;

                    // Show the sales price modal
                    $('#setSalesPriceModal').modal('show');

                    // Handle modal shown event to focus on the margin percentage input
                    $('#setSalesPriceModal').on('shown.bs.modal', function () {
                        document.getElementById('marginPercentage').focus();
                    });

                    // Handle margin percentage input
                    const marginPercentageInput = document.getElementById('marginPercentage');
                    marginPercentageInput.oninput = function () {
                        updateSalesPriceFromMargin(puPriceInput.value);
                    };

                    // Handle MRP input
                    const mrpInput = document.getElementById('mrp');
                    mrpInput.oninput = function () {
                        updateSalesPriceFromMRP(mrpInput.value);
                        updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
                    };

                    // Handle sales price input
                    const salesPriceInput = document.getElementById('salesPrice');
                    salesPriceInput.oninput = function () {
                        updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
                    };

                    // Handle currency change
                    const currencySelect = document.getElementById('currency');
                    currencySelect.onchange = function () {
                        updateSalesPriceFromMRP(mrpInput.value);
                    };

                    // Handle sales price save action
                    const saveSalesPriceButton = document.getElementById('saveSalesPrice');
                    saveSalesPriceButton.onclick = function () {
                        const salesPrice = document.getElementById('salesPrice').value;
                        const mrpValue = document.getElementById('mrp').value;
                        const marginPercentage = document.getElementById('marginPercentage').value;

                        if (salesPrice) {
                            // Store sales price in a hidden input within the current row
                            const tr = puPriceInput.closest('tr');
                            const salesPriceInput = document.createElement('input');
                            salesPriceInput.type = 'hidden';
                            salesPriceInput.name = `items[${itemIndex}][price]`;
                            salesPriceInput.value = salesPrice;
                            tr.appendChild(salesPriceInput);

                            // Store MRP in a hidden input within the current row
                            const mrpInputHidden = document.createElement('input');
                            mrpInputHidden.type = 'hidden';
                            mrpInputHidden.name = `items[${itemIndex}][mrp]`;
                            mrpInputHidden.value = mrpValue;
                            tr.appendChild(mrpInputHidden);

                            // Store marginPercentage in a hidden input within the current row
                            const marginPercentageInputHidden = document.createElement('input');
                            marginPercentageInputHidden.type = 'hidden';
                            marginPercentageInputHidden.name = `items[${itemIndex}][marginPercentage]`;
                            marginPercentageInputHidden.value = marginPercentage;
                            tr.appendChild(marginPercentageInputHidden);

                            // Close the modal
                            $('#setSalesPriceModal').modal('hide');

                            // Now focus on the reason input field based on the adjustment type
                            const shortReasonInput = document.getElementById(`shortReason-${itemIndex}`);
                            const xcessReasonInput = document.getElementById(`xcessReason-${itemIndex}`);

                            if (adjustmentType === 'short' && shortReasonInput) {
                                shortReasonInput.focus();
                                shortReasonInput.select();
                            } else if (adjustmentType === 'xcess' && xcessReasonInput) {
                                xcessReasonInput.focus();
                                xcessReasonInput.select();
                            }
                        } else {
                            alert('Please enter a valid sales price.');
                        }
                    };
                } else {
                    // If adjustment type is 'short', directly move to reason input
                    const shortReasonInput = document.getElementById(`shortReason-${itemIndex}`);
                    if (shortReasonInput) {
                        shortReasonInput.focus();
                        shortReasonInput.select();
                    }
                }
            }
        }
    }

    function updateSalesPriceFromMargin(puPrice) {
        const marginPercentage = parseFloat(document.getElementById('marginPercentage').value) || 0;
        const salesPriceFromMargin = parseFloat(puPrice) + (parseFloat(puPrice) * marginPercentage / 100);
        document.getElementById('salesPrice').value = salesPriceFromMargin.toFixed(2); // Set calculated sales price from margin
    }

    function updateSalesPriceFromMRP(mrpValue) {
        const currency = document.getElementById('currency').value;
        let salesPriceFromMRP;
        if (currency === 'INR') {
            salesPriceFromMRP = parseFloat(mrpValue) * 1.60; // Convert MRP to sales price for INR
        } else {
            salesPriceFromMRP = parseFloat(mrpValue); // Use MRP directly for NPR
        }
        document.getElementById('salesPrice').value = salesPriceFromMRP.toFixed(2); // Set calculated sales price from MRP
    }

    function updateMarginFromMRPAndSalesPrice(mrpValue, puPriceValue) {
        const salesPrice = parseFloat(document.getElementById('salesPrice').value) || 0;
        const puPrice = parseFloat(puPriceValue) || 0;
        const marginPercentageInput = document.getElementById('marginPercentage');

        // Calculate margin percentage based on (Sales Price - PU Price) / PU Price * 100
        const marginPercentage = ((salesPrice - puPrice) / puPrice) * 100;

        if (!isNaN(marginPercentage) && puPrice > 0) {
            marginPercentageInput.value = marginPercentage.toFixed(2); // Update margin percentage
        } else {
            marginPercentageInput.value = ''; // Reset if the calculation fails or PU Price is 0
        }
    }


    function selectValue(input) {
        input.select(); // Select the value of the input field when it is focused
    }

    function handleReasonKeydown(event) {
        if (event.key === 'Enter') {
            const itemSearchInput = document.getElementById('itemSearch');
            itemSearchInput.focus();
            itemSearchInput.select();
        }
    }

    function selectValue(input) {
        input.select(); // Select the value of the input field when it is focused
    }

    function focusOnLastRow(fieldClass) {
        const rows = document.querySelectorAll('.item');
        if (rows.length > 0) {
            const lastRow = rows[rows.length - 1];
            const inputField = lastRow.querySelector(`.${fieldClass}`);
            if (inputField) {
                inputField.focus();
                inputField.select();
            }
        }
    }

    // //Handle scape buttons
    // document.addEventListener('keydown', function (event) {
    //     if (event.key === 'Escape') {
    //         event.preventDefault(); // Prevent default escape behavior
    //         var exitModal = new bootstrap.Modal(document.getElementById('exitConfirmationModal'));
    //         exitModal.show();
    //     }
    // });

    // // Handle the exit confirmation
    // document.getElementById('confirmExit').addEventListener('click', function () {
    //     // Redirect to the home page
    //     window.location.href = '/wholesellerDashboard'; // Change '/' to your home page URL
    // });
</script>