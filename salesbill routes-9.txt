SalesBill.js

const express = require('express');
const router = express.Router();

//npm install pdfkit fs
const PDFDocument = require('pdfkit');
//npm install pdfkit fs

const Company = require('../models/Company');
const Item = require('../models/Item');
const SalesBill = require('../models/SalesBill');
const Transaction = require('../models/Transaction');

// Home route
router.get('/', (req, res) => {
    res.render('index');
});

// Sales Bill routes
router.get('/bills-list', async (req, res) => {
    const bills = await SalesBill.find().populate('company').populate('items.item');
    res.render('sales-bills/index', { bills });
});


// Sales Bill routes
router.get('/bills', async (req, res) => {
    const companies = await Company.find();
    const items = await Item.find().populate('category').populate('unit');
    const bills = await SalesBill.find().populate('company').populate('items.item');

    // Get the next bill number
    const lastBill = await SalesBill.findOne().sort({ billNumber: -1 });
    const nextBillNumber = lastBill ? lastBill.billNumber + 1 : 1;
    res.render('sales-bills/bills', { companies: companies, items: items, bills: bills, nextBillNumber: nextBillNumber });
});
router.post('/bills', async (req, res) => {
    try {
        const { company, items, vatPercentage, billDate, isVatExempt } = req.body;
        const isVatExemptBool = isVatExempt === 'true' || isVatExempt === true;

        let totalAmount = 0;
        let vatAmount = 0;
        let hasVatableItems = false;
        let hasNonVatableItems = false;

        // Validate each item before processing
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const product = await Item.findById(item.item);

            if (!product) {
                req.flash('error', `Item with id ${item.item} not found`);
                return res.redirect('/bills');
            }

            const itemTotal = parseFloat(item.price) * parseInt(item.quantity, 10);
            totalAmount += itemTotal;

            if (product.vatStatus === 'vatable') {
                hasVatableItems = true;
                if (!isVatExemptBool) {
                    vatAmount += (itemTotal * vatPercentage) / 100;
                }
            } else {
                hasNonVatableItems = true;
            }

            // Check stock quantity
            if (product.stock < item.quantity) {
                req.flash('error', `Not enough stock for item: ${product.name}. Available: ${product.stock}, Required: ${item.quantity}`);
                return res.redirect('/bills');
            }
        }

        // Check validation conditions after processing all items
        if (isVatExemptBool && hasVatableItems) {
            req.flash('error', 'Cannot save VAT exempt bill with vatable items');
            return res.redirect('/bills');
        }

        if (!isVatExemptBool && hasNonVatableItems) {
            req.flash('error', 'Cannot save bill with non-vatable items when VAT is applied');
            return res.redirect('/bills');
        }

        // Generate unique bill number
        const lastBill = await SalesBill.findOne().sort({ billNumber: -1 });
        const billNumber = lastBill ? lastBill.billNumber + 1 : 1;

        // Create new bill
        const newBill = new SalesBill({
            billNumber,
            company,
            items: [], // We'll update this later
            isVatExempt: isVatExemptBool,
            vatPercentage: isVatExemptBool ? 0 : vatPercentage,
            totalAmount,
            totalAmountWithVAT: totalAmount + vatAmount,
            date: new Date(billDate)
        });

        await newBill.save();

        // Create transactions
        const billItems = await Promise.all(items.map(async item => {
            const product = await Item.findById(item.item);

            const transaction = new Transaction({
                item: product._id,
                company: company,
                billNumber: billNumber,
                quantity: item.quantity,
                price: item.price,
                transactionDate: new Date(),
                type: 'Sale',
                billId: newBill._id,  // Set billId to the new bill's ID
                account: 'Sales',
                debit: totalAmount + vatAmount,
                credit: 0
            });

            await transaction.save();

            // Decrement stock quantity
            product.stock -= item.quantity;
            await product.save();

            return {
                item: product._id,
                quantity: item.quantity,
                price: item.price,
                vatStatus: product.vatStatus
            };
        }));

        // Update bill with items
        newBill.items = billItems;
        await newBill.save();

        res.redirect(`/bills/${newBill._id}/print`);
    } catch (error) {
        console.error("Error creating bill:", error);
        req.flash('error', 'Error creating bill');
        res.redirect('/bills');
    }
});


// Route to generate PDF
router.get('/bills/:id/pdf', async (req, res) => {
    try {
        const billId = req.params.id;
        const bill = await SalesBill.findById(billId).populate('company').populate('items.item');
        if (!bill) {
            req.flash('error', 'Bill not found');
            return res.redirect('/bills');
        }

        const doc = new PDFDocument();
        const filename = `bill_${bill.billNumber}.pdf`;

        res.setHeader('Content-disposition', `attachment; filename=${filename}`);
        res.setHeader('Content-type', 'application/pdf');

        doc.pipe(res);

        // Add content to the PDF
        doc.fontSize(20).text(`Bill No: ${bill.billNumber}`, { align: 'center' });
        doc.moveDown();
        doc.fontSize(12).text(`Company: ${bill.company.name}`, { align: 'left' });
        doc.text(`Date: ${new Date(bill.date).toLocaleDateString()}`, { align: 'left' });
        doc.moveDown();

        // Add items table
        doc.fontSize(12).text('Items:', { underline: true });
        const tableTop = 150;
        const itemHeaders = [
            { label: 'Item', align: 'left', width: 150 },
            { label: 'Quantity', align: 'right', width: 80 },
            { label: 'Price', align: 'right', width: 80 },
            { label: 'Total', align: 'right', width: 80 },
        ];

        let currentPosition = tableTop;

        // Headers
        itemHeaders.forEach(header => {
            doc.text(header.label, currentPosition, tableTop, { width: header.width, align: header.align });
            currentPosition += header.width;
        });

        doc.moveDown();

        // Items
        let itemsStartY = tableTop + 20;
        bill.items.forEach(item => {
            currentPosition = 50;
            doc.text(item.item.name, currentPosition, itemsStartY, { width: 150, align: 'left' });
            doc.text(item.quantity.toString(), currentPosition + 150, itemsStartY, { width: 80, align: 'right' });
            doc.text(item.price.toFixed(2), currentPosition + 230, itemsStartY, { width: 80, align: 'right' });
            doc.text((item.quantity * item.price).toFixed(2), currentPosition + 310, itemsStartY, { width: 80, align: 'right' });
            itemsStartY += 20;
        });

        // Add totals
        doc.moveDown();
        doc.text(`Subtotal: Rs.${bill.totalAmount.toFixed(2)}`, { align: 'right' });
        if (!bill.isVatExempt) {
            doc.text(`VAT (${bill.vatPercentage}%): Rs.${(bill.totalAmount * bill.vatPercentage / 100).toFixed(2)}`, { align: 'right' });
            doc.text(`Total with VAT: Rs.${bill.totalAmountWithVAT.toFixed(2)}`, { align: 'right' });
        } else {
            doc.text('VAT Exempt', { align: 'right' });
        }

        // Convert amount to words
        const numberToWords = (num) => {
            const ones = [
                '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine',
                'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',
                'Seventeen', 'Eighteen', 'Nineteen'
            ];

            const tens = [
                '', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'
            ];

            const scales = ['', 'Thousand', 'Lakh', 'Crore'];

            function convertHundreds(num) {
                let words = '';

                if (num > 99) {
                    words += ones[Math.floor(num / 100)] + ' Hundred ';
                    num %= 100;
                }

                if (num > 19) {
                    words += tens[Math.floor(num / 10)] + ' ';
                    num %= 10;
                }

                if (num > 0) {
                    words += ones[num] + ' ';
                }

                return words.trim();
            }

            function convertSection(num) {
                let words = '';
                if (num > 0) {
                    words = convertHundreds(num) + ' ';
                }
                return words;
            }

            if (num === 0) return 'Zero Rupees and Zero Paisa Only';

            if (num < 0) return 'Negative ' + numberToWords(Math.abs(num));

            let rupees = Math.floor(num);
            let paise = Math.round((num - rupees) * 100);

            // Rounding off logic
            if (paise > 50) {
                rupees += 1;
                paise = 0;
            }

            let words = '';

            for (let i = scales.length - 1; i >= 0; i--) {
                let unit = Math.pow(100, i + 1);
                if (rupees >= unit) {
                    words += convertSection(Math.floor(rupees / unit)) + scales[i] + ' ';
                    rupees %= unit;
                }
            }
            words += convertSection(rupees) + ' Rupees';

            if (paise > 0) {
                words += ' and ' + convertSection(paise) + ' Paisa';
            } else {
                words += ' and Zero Paisa';
            }

            words += ' Only';

            return words.trim();
        };

        doc.moveDown();
        doc.text(`Amount in Words: ${numberToWords(bill.totalAmountWithVAT)}`, { align: 'left' });

        doc.end();
    } catch (error) {
        console.error("Error generating PDF:", error);
        req.flash('error', 'Error generating PDF');
        res.redirect('/bills');
    }
});

// GET route to fetch statement
router.get('/statement', async (req, res) => {
    try {
        const companies = await Company.find();
        const selectedCompany = req.query.company || '';
        const fromDate = req.query.fromDate ? new Date(req.query.fromDate) : null;
        const toDate = req.query.toDate ? new Date(req.query.toDate) : null;

        if (!selectedCompany) {
            return res.render('statements/statement', { statement: [], companies, selectedCompany: null, fromDate: '', toDate: '' });
        }

        // Fetch company details including opening balance and opening balance date
        const company = await Company.findById(selectedCompany);

        if (!company) {
            return res.status(404).json({ error: 'Company not found' });
        }

        let query = { company: selectedCompany };

        if (fromDate && toDate) {
            query.transactionDate = { $gte: fromDate, $lte: toDate };
        } else if (fromDate) {
            query.transactionDate = { $gte: fromDate };
        } else if (toDate) {
            query.transactionDate = { $lte: toDate };
        }

        // Fetch transactions within the date range
        const transactions = await Transaction.find(query).sort({ transactionDate: 1 });

        // Calculate opening balance based on opening balance date
        const openingBalance = calculateOpeningBalance(company, transactions, fromDate);

        // Prepare statement with opening balance row
        const statement = prepareStatementWithOpeningBalance(openingBalance, transactions);

        res.render('statements/statement', { statement, companies, selectedCompany, company, fromDate: req.query.fromDate, toDate: req.query.toDate });
    } catch (error) {
        console.error("Error fetching statement:", error);
        res.status(500).json({ error: 'Error fetching statement' });
    }
});

// Function to calculate opening balance based on opening balance date
function calculateOpeningBalance(company, transactions, fromDate) {
    const openingBalanceDate = company.openingBalanceDate || new Date('July 17, 2024'); // Default to July 17
    let openingBalance = company.openingBalance || 0;

    transactions.forEach(tx => {
        if (tx.transactionDate < openingBalanceDate && (!fromDate || tx.transactionDate >= fromDate)) {
            openingBalance;
        }
    });

    return openingBalance;
}

// Function to prepare statement with opening balance row
function prepareStatementWithOpeningBalance(openingBalance, transactions) {
    let balance = openingBalance;
    const statement = [
        { date: 'Opening Balance', type: '', billNumber: '', account: 'Opening Balance', debit: null, credit: null, balance: openingBalance }
    ];
    transactions.forEach(tx => {
        balance += (tx.debit || 0) - (tx.credit || 0);
        statement.push({
            date: tx.transactionDate,
            type: tx.type,
            billId: tx.billId, // Ensure this is set correctly
            billNumber: tx.billNumber,
            account: tx.account,
            debit: tx.debit,
            credit: tx.credit,
            balance: balance
        });
    });
    return statement;
}

router.get('/bills/:id/print', async (req, res) => {
    try {
        const billIds = req.params.id;
        const bill = await SalesBill.findById(billIds).populate('company').populate('items.item');
        if (!bill) {
            req.flash('error', 'Bill not found');
            return res.redirect('/bills');
        }
        res.render('sales-bills/print', { bill });
    } catch (error) {
        console.error("Error fetching bill for printing:", error);
        req.flash('error', 'Error fetching bill for printing');
        res.redirect('/bills');
    }
});

router.get('/statement/pdf', async (req, res) => {
    try {
        const selectedCompany = req.query.company;
        const fromDate = req.query.fromDate ? new Date(req.query.fromDate) : null;
        const toDate = req.query.toDate ? new Date(req.query.toDate) : null;


        if (!selectedCompany) {
            req.flash('error', 'No company selected');
            return res.redirect('/statement');
        }

        let query = { company: selectedCompany };

        if (fromDate && toDate) {
            query.transactionDate = { $gte: fromDate, $lte: toDate };
        } else if (fromDate) {
            query.transactionDate = { $gte: fromDate };
        } else if (toDate) {
            query.transactionDate = { $lte: toDate };
        }

        const transactions = await Transaction.find(query).sort({ transactionDate: 1 });
        const company = await Company.findById(selectedCompany);
        if (!company) {
            req.flash('error', 'Company not found');
            return res.redirect('/statement');
        }

        const doc = new PDFDocument({ margin: 40, size: 'A4' });
        const filename = `statement_${company.name.replace(/ /g, '_')}.pdf`;

        res.setHeader('Content-disposition', `attachment; filename=${filename}`);
        res.setHeader('Content-type', 'application/pdf');

        doc.pipe(res);

        doc.fontSize(25).text('Financial Statement', { align: 'center' }).moveDown(0.5);
        doc.fontSize(20).text(`${company.name}`, { align: 'center' });
        doc.fontSize(14).text(`PAN: ${company.pan}`, { align: 'center' }).moveDown(0.5);
        //s Opening balance section
        // doc.fontSize(12).text(`Opening Balance: ${company.openingBalance.toFixed(2)}`, { align: 'left' }).moveDown(1);
        doc.fontSize(12).text(`Opening Balance: ${company.openingBalance.toFixed(2)}                                                               From: ${fromDate.toLocaleDateString()} to ${toDate.toLocaleDateString()}`, { align: 'left' });
        // // Write From and To dates in one line
        // if (fromDate && toDate) {
        //     doc.fontSize(9).text(`Period: ${fromDate.toLocaleDateString()} to ${toDate.toLocaleDateString()}`, { align: 'right' }).moveDown(0.5);
        // } else if (fromDate) {
        //     doc.text(`From Date: ${fromDate.toLocaleDateString()}`, { align: 'left' });
        // } else if (toDate) {
        //     doc.text(`To Date: ${toDate.toLocaleDateString()}`, { align: 'left' });
        // }

        doc.moveDown();

        // Table Header
        const tableTop = 150;
        const rowHeight = 20;
        const marginLeft = 10;

        doc.fontSize(12).text('Date', marginLeft, tableTop);
        doc.text('Vouch/Type', marginLeft + 75, tableTop);
        doc.text('Vouch/Bill', marginLeft + 160, tableTop);
        doc.text('Account', marginLeft + 250, tableTop);
        doc.text('Debit(Rs.)', marginLeft + 325, tableTop);
        doc.text('Credit(Rs.)', marginLeft + 400, tableTop);
        doc.text('Balance(Rs.)', marginLeft + 475, tableTop);

        // Draw horizontal line after header
        doc.moveTo(marginLeft, tableTop + 15)
            .lineTo(590, tableTop + 15)
            .stroke();

        let balance = company.openingBalance;
        let rowIndex = 1;

        transactions.forEach(tx => {
            const y = tableTop + rowIndex * rowHeight;
            balance += (tx.debit || 0) - (tx.credit || 0);

            doc.text(tx.transactionDate.toLocaleDateString(), marginLeft, y);
            doc.text(tx.type, marginLeft + 80, y);
            doc.text(tx.billNumber, marginLeft + 180, y);
            doc.text(tx.account, marginLeft + 250, y);
            doc.text(tx.debit ? `${tx.debit.toFixed(2)}` : '', marginLeft + 325, y);
            doc.text(tx.credit ? `${tx.credit.toFixed(2)}` : '', marginLeft + 450, y);
            doc.text(`${balance === 0 ? 'Nill' : balance.toFixed(2)}`, marginLeft + 475, y);

            // Draw horizontal line after each row
            doc.moveTo(marginLeft, y + 15)
                .lineTo(590, y + 15)
                .stroke();

            rowIndex++;
        });
        doc.end();
    } catch (error) {
        console.error("Error generating PDF:", error);
        req.flash('error', 'Error generating PDF');
        res.redirect('/statement');
    }
});

// router.get('/bills/:id/print', async (req, res) => {
//     try {
//         const bill = await SalesBill.findById(req.params.id).populate('company').populate('items.item');
//         if (!bill) {
//             req.flash('error', 'Bill not found');
//             return res.redirect('/statement');
//         }
//         res.render('statements/print', { bill });
//     } catch (error) {
//         console.error("Error fetching bill for printing:", error);
//         req.flash('error', 'Error fetching bill for printing');
//         res.redirect('/statement');
//     }
// });



module.exports = router;
