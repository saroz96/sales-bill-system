<%- include('../layouts/boilerplate') %>

<style>
    .vatable-item {
        background-color: lightgreen;
    }

    .non-vatable-item {
        background-color: lightyellow;
    }

    .dropdown-menu {
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
    }

    .dropdown-item {
        cursor: pointer;
    }

    .item {
        margin-bottom: 10px;
    }

    .last-transactions {
        list-style-type: none;
        padding-left: 0;
    }

    .credit-party {
        display: none;
        /* Hide credit party options by default */
    }
</style>

<div class="container">
    <div class="card mt-4">
        <div class="card-header">
            Create New Bill
        </div>
        <div class="card-body">
            <form action="/bills" method="post" id="billForm">
                <div class="form-group row">
                    <div class="col">
                        <label for="billNumber">Bill No:</label>
                        <p class="form-control-plaintext"><%= nextBillNumber %></p>
                        <input type="hidden" name="billNumber" value="<%= nextBillNumber %>" readonly>
                    </div>
                    <div class="col">
                        <label for="billDate">Bill Date</label>
                        <input type="date" name="billDate" id="billDate" class="form-control" required
                            value="<%= new Date().toISOString().split('T')[0] %>" autofocus>
                    </div>
                    <div class="col">
                        <label for="paymentMode">Payment Mode:</label>
                        <select class="form-control" id="paymentMode" name="paymentMode"
                            onchange="toggleCreditPartyOptions()">
                            <option value="cash">Cash</option>
                            <option value="credit">Credit</option>
                        </select>
                    </div>
                    <div class="col credit-party">
                        <label for="account">Company</label>
                        <select name="account" id="account" class="form-control" required
                            onchange="fetchLastTransactionsForAllItems()">
                            <% if (accounts && accounts.length > 0) { %>
                                <% accounts.forEach(account => { %>
                                    <option value="<%= account._id %>"><%= account.name %></option>
                                <% }); %>
                            <% } else { %>
                                <option disabled>No companies available</option>
                            <% } %>
                        </select>
                    </div>
                    <div class="col">
                        <label for="isVatExempt">VAT/Itemwise</label>
                        <select name="isVatExempt" id="isVatExempt" class="form-control"
                            onchange="toggleVatInputs()">
                            <option value="false">13%</option>
                            <option value="true">Exempt</option>
                            <option value="both">Both</option>
                        </select>
                    </div>
                </div>
                <div id="items">
                    <div class="form-group row item">
                        <div class="col-sm-6">
                            <input type="text" class="form-control item-search" placeholder="Search Product"
                                oninput="filterItems(this)">
                            <div class="dropdown-menu"></div>
                            <select name="items[0][item]" class="form-control item-select mt-2" required
                                onchange="fetchLastTransactions(this); updateItemPrice(this);">
                                <% if (items && items.length > 0) { %>
                                    <% items.forEach(item => { %>
                                        <option value="<%= item._id %>"
                                            data-price="<%= item.price %>"
                                            data-vat="<%= item.vatStatus %>">
                                            <%= item.name %> - <%= item.category.name %> - <%= item.stock %> -
                                            <%= item.unit ? item.unit.name : '' %> - Rs.<%= item.price %>
                                        </option>
                                    <% }); %>
                                <% } else { %>
                                    <option disabled>No items available</option>
                                <% } %>
                            </select>
                            <ul class="last-transactions mt-2"></ul>
                        </div>
                        <div class="col-sm-2">
                            <input type="number" step="any" name="items[0][quantity]"
                                class="form-control quantity-input" placeholder="Quantity" required
                                oninput="calculateTotal()">
                        </div>
                        <div class="col-sm-2">
                            <input type="number" step="any" name="items[0][price]" class="form-control price-input"
                                placeholder="Price" required oninput="calculateTotal()">
                        </div>
                        <div class="col-sm-2">
                            <span class="form-control-plaintext item-total">0</span>
                            <button type="button" class="btn btn-danger btn-sm"
                                onclick="removeItem(this)">Remove</button>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-secondary mb-3" onclick="addItem()">Add Item</button>
                <div class="form-group row">
                    <div class="col">
                        <label for="subTotal">Sub Total</label>
                        <p class="form-control-plaintext">Rs.<span id="subTotal">0</span></p>
                    </div>
                    <div class="col">
                        <label for="discountPercentage">Discount %</label>
                        <input type="number" step="any" name="discountPercentage" id="discountPercentage"
                            class="form-control" value="0" oninput="calculateTotal()">
                    </div>
                    <div class="col">
                        <label for="discountAmount">Discount(Rs.)</label>
                        <input type="number" step="any" name="discountAmount" id="discountAmount" value="0"
                            class="form-control" oninput="calculateTotal()">
                    </div>
                </div>
                <div id="vatInputs">
                    <div class="form-group row">
                        <div class="col">
                            <label for="taxableAmount">Taxable Amount</label>
                            <p class="form-control-plaintext">Rs.<span id="taxableAmount">0</span></p>
                        </div>
                        <div class="col">
                            <label for="vatPercentage">VAT %</label>
                            <input type="number" name="vatPercentage" id="vatPercentage" class="form-control"
                                value="13" oninput="calculateTotal()">
                        </div>
                        <div class="col">
                            <label for="vatAmount">VAT Amount</label>
                            <p class="form-control-plaintext">Rs.<span id="vatAmount">0</span></p>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col">
                        <label for="totalAmount">Total Amount</label>
                        <p class="form-control-plaintext">Rs.<span id="totalAmount">0</span></p>
                    </div>
                    <div class="col">
                        <label for="roundOffAmount">Round Off Amount</label>
                        <input type="number" step="any" id="roundOffAmount" name="roundOffAmount" value="0">
                    </div>
                    <div class="col">
                        <label for="amountInWords">In Words: </label>
                        <p class="form-control-plaintext" id="amountInWords">Zero</p>
                    </div>
                </div>
                <button type="button" class="btn btn-primary" onclick="submitBillForm(false)">Save Bill</button>
                <button type="button" class="btn btn-secondary" onclick="showPrintModal()">Save & Print Bill</button>
            </form>
        </div>
    </div>
    <a href="/" class="btn btn-link mt-4">Back</a>
</div>

<!-- Print Modal -->
<div id="printModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Print Bill</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Do you want to print this bill?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitBillForm(true)">Save & Print</button>
            </div>
        </div>
    </div>
</div>

<!-- Transaction Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="transactionModalLabel">Last Transactions</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Bill No</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody id="transactionModalBody">
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    // Fetch items on page load
    window.onload = function () {
        fetchItems();
    };

    // Fetch items for selection
    function fetchItems() {
        axios.get('/items')
            .then(function (response) {
                let items = response.data;
                let dropdownMenus = document.querySelectorAll('.dropdown-menu');
                dropdownMenus.forEach(dropdownMenu => {
                    dropdownMenu.innerHTML = '';
                    items.forEach(item => {
                        dropdownMenu.innerHTML += `<a class="dropdown-item" href="#" onclick="selectItem(this)" data-id="${item._id}">${item.name}</a>`;
                    });
                });
            })
            .catch(function (error) {
                console.error('Error fetching items:', error);
            });
    }

    // Add item to the bill
    function addItem() {
        let itemsDiv = document.getElementById('items');
        let itemCount = itemsDiv.getElementsByClassName('item').length;

        axios.get('/items')
            .then(function (response) {
                let items = response.data;
                let newItemHtml = `
                    <div class="form-group row item">
                        <div class="col-sm-6">
                            <input type="text" class="form-control item-search" placeholder="Search Product" oninput="filterItems(this)">
                            <div class="dropdown-menu"></div>
                            <select name="items[${itemCount}][item]" class="form-control item-select mt-2" required onchange="fetchLastTransactions(this); updateItemPrice(this);">
                                ${items.map(item => `<option value="${item._id}" data-price="${item.price}" data-vat="${item.vatStatus}">
                                    ${item.name} - ${item.category.name} - ${item.stock} - ${item.unit ? item.unit.name : ''} - Rs.${item.price}
                                </option>`).join('')}
                            </select>
                            <ul class="last-transactions mt-2"></ul>
                        </div>
                        <div class="col-sm-2">
                            <input type="number" step="any" name="items[${itemCount}][quantity]" class="form-control quantity-input" placeholder="Quantity" required oninput="calculateTotal()">
                        </div>
                        <div class="col-sm-2">
                            <input type="number" step="any" name="items[${itemCount}][price]" class="form-control price-input" placeholder="Price" required oninput="calculateTotal()">
                        </div>
                        <div class="col-sm-2">
                            <span class="form-control-plaintext item-total">0</span>
                            <button type="button" class="btn btn-danger btn-sm" onclick="removeItem(this)">Remove</button>
                        </div>
                    </div>
                `;
                itemsDiv.insertAdjacentHTML('beforeend', newItemHtml);
            })
            .catch(function (error) {
                console.error('Error fetching items:', error);
            });
    }

    function filterItems(input) {
        let filter = input.value.toLowerCase();
        let dropdownMenu = input.nextElementSibling;
        let items = dropdownMenu.querySelectorAll('.dropdown-item');
        items.forEach(item => {
            if (item.textContent.toLowerCase().includes(filter)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
        dropdownMenu.classList.add('show');
    }

    function selectItem(item) {
        let dropdownMenu = item.closest('.dropdown-menu');
        let input = dropdownMenu.previousElementSibling;
        input.value = item.textContent;
        let select = input.nextElementSibling;
        let option = select.querySelector(`option[value="${item.getAttribute('data-id')}"]`);
        option.selected = true;
        dropdownMenu.classList.remove('show');
    }

    function removeItem(button) {
        let item = button.closest('.item');
        item.remove();
        calculateTotal();
    }

    function calculateTotal() {
        let items = document.getElementsByClassName('item');
        let subTotal = 0;
        let taxableAmount = 0;
        let vatAmount = 0;
        let totalAmount = 0;
        for (let item of items) {
            let quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
            let price = parseFloat(item.querySelector('.price-input').value) || 0;
            let itemTotal = quantity * price;
            subTotal += itemTotal;
            let vatStatus = item.querySelector('select option:checked').getAttribute('data-vat');
            if (vatStatus === 'vatable') {
                taxableAmount += itemTotal;
                vatAmount += itemTotal * (parseFloat(document.getElementById('vatPercentage').value) / 100);
            }
        }
        totalAmount = subTotal - (parseFloat(document.getElementById('discountAmount').value) || 0) + vatAmount;
        document.getElementById('subTotal').textContent = subTotal.toFixed(2);
        document.getElementById('taxableAmount').textContent = taxableAmount.toFixed(2);
        document.getElementById('vatAmount').textContent = vatAmount.toFixed(2);
        document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);
        document.getElementById('amountInWords').textContent = convertNumberToWords(totalAmount);
    }

    function toggleCreditPartyOptions() {
        let paymentMode = document.getElementById('paymentMode').value;
        let creditPartyOptions = document.querySelector('.credit-party');
        if (paymentMode === 'credit') {
            creditPartyOptions.style.display = 'block';
        } else {
            creditPartyOptions.style.display = 'none';
        }
    }

    function toggleVatInputs() {
        let isVatExempt = document.getElementById('isVatExempt').value;
        let vatInputs = document.getElementById('vatInputs');
        if (isVatExempt === 'both') {
            vatInputs.style.display = 'block';
        } else if (isVatExempt === 'true') {
            vatInputs.style.display = 'none';
        } else {
            vatInputs.style.display = 'block';
        }
    }

    function submitBillForm(print) {
        let billForm = document.getElementById('billForm');
        if (print) {
            billForm.setAttribute('target', '_blank');
        } else {
            billForm.removeAttribute('target');
        }
        billForm.submit();
    }

    function showPrintModal() {
        $('#printModal').modal('show');
    }

    function fetchLastTransactions(select) {
        let itemId = select.value;
        let accountId = document.getElementById('account').value;
        axios.get(`/transactions/${accountId}/${itemId}`)
            .then(response => {
                let transactions = response.data;
                let lastTransactions = select.parentElement.querySelector('.last-transactions');
                lastTransactions.innerHTML = '';
                transactions.forEach(transaction => {
                    lastTransactions.innerHTML += `
                        <li>${transaction.date} - Bill No: ${transaction.billNumber} - Quantity: ${transaction.quantity} - Rate: ${transaction.rate} - Total: ${transaction.total}</li>
                    `;
                });
            })
            .catch(error => {
                console.error('Error fetching transactions:', error);
            });
    }

    function fetchLastTransactionsForAllItems() {
        let items = document.querySelectorAll('.item-select');
        items.forEach(select => {
            fetchLastTransactions(select);
        });
    }

    function updateItemPrice(select) {
        let selectedOption = select.options[select.selectedIndex];
        let price = selectedOption.getAttribute('data-price');
        select.closest('.item').querySelector('.price-input').value = price;
        calculateTotal();
    }

    function convertNumberToWords(amount) {
        // Add a function to convert numbers to words, if needed
        return amount.toFixed(2);
    }
</script>
