const express = require('express');
const router = express.Router();
const Company = require('../models/Company');
const User = require('../models/User');
const mongoose = require('mongoose');

const { ensureAuthenticated } = require('../middleware/auth');

router.get('/company/new', ensureAuthenticated, async (req, res) => {
    res.render('createCompany', { companyId: req.session.currentCompany });
});

router.get('/dashboard', ensureAuthenticated, async (req, res) => {
    try {
        const userCompanies = await Company.find({ owner: req.user._id });
        res.render('dashboard', { user: req.user, companies: userCompanies });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: err.message });
    }
});

// router.get('/dashboard', ensureAuthenticated, (req, res) => {
//     User.findById(req.user.id).populate('companies').exec((err, user) => {
//         if (err) throw err;
//         res.render('dashboard', { user });
//     });
// });
// router.get('/dashboard', ensureAuthenticated, (req, res) => {
//     User.findById(req.user.id).populate('companies').exec()
//         .then(user => {
//             res.render('dashboard', { user });
//         })
//         .catch(err => {
//             console.error(err);
//             req.flash('error_msg', 'An error occurred while loading the dashboard');
//             res.redirect('/login');
//         });
// });

router.post('/company', ensureAuthenticated, async (req, res) => {
    try {
        const { name, address, country, state, pan, phone, ward, email } = req.body;
        const companyId = req.session.currentCompany;
        const owner = req.user._id
        const newCompany = new Company({
            name,
            address,
            country,
            state,
            pan,
            phone,
            ward,
            email,
            owner,
            company: companyId
        });
        const company = await newCompany.save();
        await User.findByIdAndUpdate(req.user._id, { $push: { companies: company._id } });
        res.redirect('/dashboard'); // Redirect to a dashboard or another relevant page
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: err.message });
    }
});

router.get('/switch/:id/', ensureAuthenticated, async (req, res) => {
    try {
        const companyId = req.params.id;
        req.session.currentCompany = company._id;
        req.session.currentCompanyName = company.name;
        console.log(`Switching to company with ID: ${companyId}`);
        const company = await Company.findById(companyId);

        // if (!mongoose.Types.ObjectId.isValid(companyId)) {
        //     console.log('Invalid Company ID'); // Log invalid ID
        //     return res.status(400).json({ error: 'Invalid Company ID' });
        // }

        if (!company) {
            req.flash('error', 'Company not found');
        }
        if (!company.owner.equals(req.user._id)) {
            return res.status(403).json({ error: 'Unauthorized' });
        }
        req.flash('success', `Switched to company: ${company.name}`);
        res.redirect('/index'); // Redirect to a relevant page
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: err.message });
    }
});

// Switch Company
// router.get('/switch/:id', ensureAuthenticated, (req, res) => {
//     Company.findById(req.params.id, (err, company) => {
//         if (err) throw err;
//         if (!company) {
//             req.flash('error_msg', 'Company not found');
//             return res.redirect('/dashboard');
//         }

//         req.session.currentCompany = company.id;
//         res.redirect('/dashboard');
//     });
// });

module.exports = router;

